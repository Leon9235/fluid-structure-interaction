// This code conforms with the UFC specification version 2017.1.0
// and was automatically generated by FFC version 2017.1.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   add_tabulate_tensor_timing:     False
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   generate_dummy_tabulate_tensor: False
//   max_signature_length:           0
//   optimize:                       True
//   precision:                      None
//   quadrature_degree:              None
//   quadrature_rule:                None
//   representation:                 'auto'
//   split:                          False

#ifndef __ELASTIC3DP1P1_H
#define __ELASTIC3DP1P1_H
#include <algorithm>
#include <cmath>
#include <stdexcept>
#include <ufc.h>

class elastic3dp1p1_finite_element_0: public ufc::finite_element
{
public:

  elastic3dp1p1_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~elastic3dp1p1_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', tetrahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new elastic3dp1p1_finite_element_0();
  }

};


class elastic3dp1p1_finite_element_1: public ufc::finite_element
{
public:

  elastic3dp1p1_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~elastic3dp1p1_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[9];
    for (unsigned int r = 0; r < 9; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[4] = vals[1];
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[5] = vals[1];
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[6] = vals[1];
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[7] = vals[1];
    values[11] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = coordinate_dofs[6];
    dof_coordinates[19] = coordinate_dofs[7];
    dof_coordinates[20] = coordinate_dofs[8];
    dof_coordinates[21] = coordinate_dofs[9];
    dof_coordinates[22] = coordinate_dofs[10];
    dof_coordinates[23] = coordinate_dofs[11];
    dof_coordinates[24] = coordinate_dofs[0];
    dof_coordinates[25] = coordinate_dofs[1];
    dof_coordinates[26] = coordinate_dofs[2];
    dof_coordinates[27] = coordinate_dofs[3];
    dof_coordinates[28] = coordinate_dofs[4];
    dof_coordinates[29] = coordinate_dofs[5];
    dof_coordinates[30] = coordinate_dofs[6];
    dof_coordinates[31] = coordinate_dofs[7];
    dof_coordinates[32] = coordinate_dofs[8];
    dof_coordinates[33] = coordinate_dofs[9];
    dof_coordinates[34] = coordinate_dofs[10];
    dof_coordinates[35] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new elastic3dp1p1_finite_element_0();
        break;
      }
    case 1:
      {
        return new elastic3dp1p1_finite_element_0();
        break;
      }
    case 2:
      {
        return new elastic3dp1p1_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new elastic3dp1p1_finite_element_1();
  }

};


class elastic3dp1p1_finite_element_2: public ufc::finite_element
{
public:

  elastic3dp1p1_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~elastic3dp1p1_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3), FiniteElement('Lagrange', tetrahedron, 1))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 16;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  std::size_t value_size() const final override
  {
    return 4;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  std::size_t reference_value_size() const final override
  {
    return 4;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    values[3] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 16; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 4; s++)
      {
        values[r*4 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 4*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 16; r++)
    {
      for (unsigned int s = 0; s < 4*num_derivatives; s++)
      {
        values[r*4*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[12];
    for (unsigned int r = 0; r < 12; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 16; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 4*num_derivatives; s++)
      {
        values[r*4*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[4];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 12:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 13:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 14:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 15:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[4];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[4] = vals[1];
    values[8] = vals[2];
    values[12] = vals[3];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[5] = vals[1];
    values[9] = vals[2];
    values[13] = vals[3];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[6] = vals[1];
    values[10] = vals[2];
    values[14] = vals[3];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[7] = vals[1];
    values[11] = vals[2];
    values[15] = vals[3];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[4] = dof_values[1];
    vertex_values[8] = dof_values[2];
    vertex_values[12] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[5] = dof_values[5];
    vertex_values[9] = dof_values[6];
    vertex_values[13] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[6] = dof_values[9];
    vertex_values[10] = dof_values[10];
    vertex_values[14] = dof_values[11];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[12];
    vertex_values[7] = dof_values[13];
    vertex_values[11] = dof_values[14];
    vertex_values[15] = dof_values[15];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = coordinate_dofs[6];
    dof_coordinates[19] = coordinate_dofs[7];
    dof_coordinates[20] = coordinate_dofs[8];
    dof_coordinates[21] = coordinate_dofs[9];
    dof_coordinates[22] = coordinate_dofs[10];
    dof_coordinates[23] = coordinate_dofs[11];
    dof_coordinates[24] = coordinate_dofs[0];
    dof_coordinates[25] = coordinate_dofs[1];
    dof_coordinates[26] = coordinate_dofs[2];
    dof_coordinates[27] = coordinate_dofs[3];
    dof_coordinates[28] = coordinate_dofs[4];
    dof_coordinates[29] = coordinate_dofs[5];
    dof_coordinates[30] = coordinate_dofs[6];
    dof_coordinates[31] = coordinate_dofs[7];
    dof_coordinates[32] = coordinate_dofs[8];
    dof_coordinates[33] = coordinate_dofs[9];
    dof_coordinates[34] = coordinate_dofs[10];
    dof_coordinates[35] = coordinate_dofs[11];
    dof_coordinates[36] = coordinate_dofs[0];
    dof_coordinates[37] = coordinate_dofs[1];
    dof_coordinates[38] = coordinate_dofs[2];
    dof_coordinates[39] = coordinate_dofs[3];
    dof_coordinates[40] = coordinate_dofs[4];
    dof_coordinates[41] = coordinate_dofs[5];
    dof_coordinates[42] = coordinate_dofs[6];
    dof_coordinates[43] = coordinate_dofs[7];
    dof_coordinates[44] = coordinate_dofs[8];
    dof_coordinates[45] = coordinate_dofs[9];
    dof_coordinates[46] = coordinate_dofs[10];
    dof_coordinates[47] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new elastic3dp1p1_finite_element_1();
        break;
      }
    case 1:
      {
        return new elastic3dp1p1_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new elastic3dp1p1_finite_element_2();
  }

};


class elastic3dp1p1_finite_element_3: public ufc::finite_element
{
public:

  elastic3dp1p1_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~elastic3dp1p1_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', tetrahedron, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    dof_coordinates[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    dof_coordinates[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new elastic3dp1p1_finite_element_3();
  }

};


class elastic3dp1p1_finite_element_4: public ufc::finite_element
{
public:

  elastic3dp1p1_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~elastic3dp1p1_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Discontinuous Lagrange', tetrahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Discontinuous Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new elastic3dp1p1_finite_element_4();
  }

};


class elastic3dp1p1_dofmap_0: public ufc::dofmap
{
public:

  elastic3dp1p1_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~elastic3dp1p1_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 3;
        break;
      }
    case 3:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new elastic3dp1p1_dofmap_0();
  }

};


class elastic3dp1p1_dofmap_1: public ufc::dofmap
{
public:

  elastic3dp1p1_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~elastic3dp1p1_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3*num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 9;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 6;
        break;
      }
    case 2:
      {
        return 9;
        break;
      }
    case 3:
      {
        return 12;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 7;
        dofs[4] = 10;
        dofs[5] = 11;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
        dofs[2] = 5;
        dofs[3] = 7;
        dofs[4] = 9;
        dofs[5] = 11;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 9;
        dofs[5] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 4;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 11;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 4;
        dofs[3] = 5;
        dofs[4] = 8;
        dofs[5] = 9;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
      dofs[10] = 10;
      dofs[11] = 11;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new elastic3dp1p1_dofmap_0();
        break;
      }
    case 1:
      {
        return new elastic3dp1p1_dofmap_0();
        break;
      }
    case 2:
      {
        return new elastic3dp1p1_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new elastic3dp1p1_dofmap_1();
  }

};


class elastic3dp1p1_dofmap_2: public ufc::dofmap
{
public:

  elastic3dp1p1_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~elastic3dp1p1_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3), FiniteElement('Lagrange', tetrahedron, 1))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 4*num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 16;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 12;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 4;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 4;
        break;
      }
    case 1:
      {
        return 8;
        break;
      }
    case 2:
      {
        return 12;
        break;
      }
    case 3:
      {
        return 16;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[12] = offset + entity_indices[0][0];
    dofs[13] = offset + entity_indices[0][1];
    dofs[14] = offset + entity_indices[0][2];
    dofs[15] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 13;
      dofs[10] = 14;
      dofs[11] = 15;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 12;
      dofs[10] = 14;
      dofs[11] = 15;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
      dofs[9] = 12;
      dofs[10] = 13;
      dofs[11] = 15;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
      dofs[9] = 12;
      dofs[10] = 13;
      dofs[11] = 14;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
        dofs[3] = 12;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
        dofs[3] = 13;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
        dofs[3] = 14;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
        dofs[3] = 15;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
        dofs[3] = 12;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
        dofs[3] = 13;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
        dofs[3] = 14;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
        dofs[3] = 15;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 7;
        dofs[4] = 10;
        dofs[5] = 11;
        dofs[6] = 14;
        dofs[7] = 15;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
        dofs[2] = 5;
        dofs[3] = 7;
        dofs[4] = 9;
        dofs[5] = 11;
        dofs[6] = 13;
        dofs[7] = 15;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 9;
        dofs[5] = 10;
        dofs[6] = 13;
        dofs[7] = 14;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 4;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 11;
        dofs[6] = 12;
        dofs[7] = 15;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
        dofs[6] = 12;
        dofs[7] = 14;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 4;
        dofs[3] = 5;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 12;
        dofs[7] = 13;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
        dofs[9] = 13;
        dofs[10] = 14;
        dofs[11] = 15;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
        dofs[9] = 12;
        dofs[10] = 14;
        dofs[11] = 15;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
        dofs[9] = 12;
        dofs[10] = 13;
        dofs[11] = 15;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
        dofs[9] = 12;
        dofs[10] = 13;
        dofs[11] = 14;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
      dofs[10] = 10;
      dofs[11] = 11;
      dofs[12] = 12;
      dofs[13] = 13;
      dofs[14] = 14;
      dofs[15] = 15;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new elastic3dp1p1_dofmap_1();
        break;
      }
    case 1:
      {
        return new elastic3dp1p1_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new elastic3dp1p1_dofmap_2();
  }

};


class elastic3dp1p1_dofmap_3: public ufc::dofmap
{
public:

  elastic3dp1p1_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~elastic3dp1p1_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', tetrahedron, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      case 4:
        {
          
          break;
        }
      case 5:
        {
          
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new elastic3dp1p1_dofmap_3();
  }

};


class elastic3dp1p1_dofmap_4: public ufc::dofmap
{
public:

  elastic3dp1p1_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~elastic3dp1p1_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', tetrahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 4*num_global_entities[3];
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 4*entity_indices[3][0];
    dofs[1] = 4*entity_indices[3][0] + 1;
    dofs[2] = 4*entity_indices[3][0] + 2;
    dofs[3] = 4*entity_indices[3][0] + 3;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      case 4:
        {
          
          break;
        }
      case 5:
        {
          
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new elastic3dp1p1_dofmap_4();
  }

};


class elastic3dp1p1_cell_integral_0_1: public ufc::cell_integral
{
public:

  elastic3dp1p1_cell_integral_0_1() : ufc::cell_integral()
  {

  }

  ~elastic3dp1p1_cell_integral_0_1() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 3
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 3
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           3
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights5[5] = { -0.1333333333333333, 0.075, 0.075, 0.075, 0.075 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE25_C0_D001_Q5[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE25_C0_Q5[1][5][4] =
        { { { 0.2500000000000001, 0.25, 0.25, 0.25 },
            { 0.1666666666666668, 0.5, 0.1666666666666667, 0.1666666666666667 },
            { 0.1666666666666668, 0.1666666666666666, 0.5, 0.1666666666666667 },
            { 0.1666666666666668, 0.1666666666666666, 0.1666666666666667, 0.5 },
            { 0.5, 0.1666666666666665, 0.1666666666666667, 0.1666666666666667 } } };
    // Unstructured piecewise computations
    double w2_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c0 += w[2][ic] * FE25_C0_D001_Q5[0][0][ic];
    const double J_c4 = coordinate_dofs[1] * FE25_C0_D001_Q5[0][0][0] + coordinate_dofs[7] * FE25_C0_D001_Q5[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE25_C0_D001_Q5[0][0][0] + coordinate_dofs[11] * FE25_C0_D001_Q5[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE25_C0_D001_Q5[0][0][0] + coordinate_dofs[10] * FE25_C0_D001_Q5[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE25_C0_D001_Q5[0][0][0] + coordinate_dofs[8] * FE25_C0_D001_Q5[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE25_C0_D001_Q5[0][0][0] + coordinate_dofs[3] * FE25_C0_D001_Q5[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE25_C0_D001_Q5[0][0][0] + coordinate_dofs[6] * FE25_C0_D001_Q5[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE25_C0_D001_Q5[0][0][0] + coordinate_dofs[5] * FE25_C0_D001_Q5[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE25_C0_D001_Q5[0][0][0] + coordinate_dofs[4] * FE25_C0_D001_Q5[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE25_C0_D001_Q5[0][0][0] + coordinate_dofs[9] * FE25_C0_D001_Q5[0][0][1];
    const double w2_d1_c0 = w[2][0] * FE25_C0_D001_Q5[0][0][0] + w[2][2] * FE25_C0_D001_Q5[0][0][1];
    const double w2_d2_c0 = w[2][0] * FE25_C0_D001_Q5[0][0][0] + w[2][3] * FE25_C0_D001_Q5[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE25_C0_D001_Q5[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE25_C0_D001_Q5[0][0][0] + w[0][2] * FE25_C0_D001_Q5[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE25_C0_D001_Q5[0][0][0] + w[0][3] * FE25_C0_D001_Q5[0][0][1];
    double w1_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c0 += w[1][ic] * FE25_C0_D001_Q5[0][0][ic];
    const double w1_d1_c0 = w[1][0] * FE25_C0_D001_Q5[0][0][0] + w[1][2] * FE25_C0_D001_Q5[0][0][1];
    const double w1_d2_c0 = w[1][0] * FE25_C0_D001_Q5[0][0][0] + w[1][3] * FE25_C0_D001_Q5[0][0][1];
    double w2_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c1 += w[2][ic + 4] * FE25_C0_D001_Q5[0][0][ic];
    const double w2_d1_c1 = w[2][4] * FE25_C0_D001_Q5[0][0][0] + w[2][6] * FE25_C0_D001_Q5[0][0][1];
    const double w2_d2_c1 = w[2][4] * FE25_C0_D001_Q5[0][0][0] + w[2][7] * FE25_C0_D001_Q5[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE25_C0_D001_Q5[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE25_C0_D001_Q5[0][0][0] + w[0][6] * FE25_C0_D001_Q5[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE25_C0_D001_Q5[0][0][0] + w[0][7] * FE25_C0_D001_Q5[0][0][1];
    double w1_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c1 += w[1][ic + 4] * FE25_C0_D001_Q5[0][0][ic];
    const double w1_d1_c1 = w[1][4] * FE25_C0_D001_Q5[0][0][0] + w[1][6] * FE25_C0_D001_Q5[0][0][1];
    const double w1_d2_c1 = w[1][4] * FE25_C0_D001_Q5[0][0][0] + w[1][7] * FE25_C0_D001_Q5[0][0][1];
    double w2_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c2 += w[2][ic + 8] * FE25_C0_D001_Q5[0][0][ic];
    const double w2_d1_c2 = w[2][8] * FE25_C0_D001_Q5[0][0][0] + w[2][10] * FE25_C0_D001_Q5[0][0][1];
    const double w2_d2_c2 = w[2][8] * FE25_C0_D001_Q5[0][0][0] + w[2][11] * FE25_C0_D001_Q5[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE25_C0_D001_Q5[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE25_C0_D001_Q5[0][0][0] + w[0][10] * FE25_C0_D001_Q5[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE25_C0_D001_Q5[0][0][0] + w[0][11] * FE25_C0_D001_Q5[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 8] * FE25_C0_D001_Q5[0][0][ic];
    const double w1_d1_c2 = w[1][8] * FE25_C0_D001_Q5[0][0][0] + w[1][10] * FE25_C0_D001_Q5[0][0][1];
    const double w1_d2_c2 = w[1][8] * FE25_C0_D001_Q5[0][0][0] + w[1][11] * FE25_C0_D001_Q5[0][0][1];
    alignas(32) double sp[257];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = w2_d0_c0 * sp[14];
    sp[16] = J_c3 * (-1 * J_c8);
    sp[17] = sp[4] + sp[16];
    sp[18] = sp[17] / sp[13];
    sp[19] = w2_d1_c0 * sp[18];
    sp[20] = sp[15] + sp[19];
    sp[21] = sp[11] / sp[13];
    sp[22] = w2_d2_c0 * sp[21];
    sp[23] = sp[20] + sp[22];
    sp[24] = w0_d0_c0 * sp[14];
    sp[25] = w0_d1_c0 * sp[18];
    sp[26] = sp[24] + sp[25];
    sp[27] = w0_d2_c0 * sp[21];
    sp[28] = sp[26] + sp[27];
    sp[29] = w1_d0_c0 * sp[14];
    sp[30] = w1_d1_c0 * sp[18];
    sp[31] = sp[29] + sp[30];
    sp[32] = w1_d2_c0 * sp[21];
    sp[33] = sp[31] + sp[32];
    sp[34] = sp[28] + sp[33];
    sp[35] = sp[34] * w[7][0];
    sp[36] = sp[23] + 0.5 * sp[35];
    sp[37] = (1 + sp[36]) * (1 + sp[36]);
    sp[38] = J_c2 * J_c7;
    sp[39] = J_c8 * (-1 * J_c1);
    sp[40] = sp[38] + sp[39];
    sp[41] = sp[40] / sp[13];
    sp[42] = w2_d0_c0 * sp[41];
    sp[43] = J_c0 * J_c8;
    sp[44] = J_c6 * (-1 * J_c2);
    sp[45] = sp[43] + sp[44];
    sp[46] = sp[45] / sp[13];
    sp[47] = w2_d1_c0 * sp[46];
    sp[48] = sp[42] + sp[47];
    sp[49] = J_c1 * J_c6;
    sp[50] = J_c0 * J_c7;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = w2_d2_c0 * sp[52];
    sp[54] = sp[48] + sp[53];
    sp[55] = w0_d0_c0 * sp[41];
    sp[56] = w0_d1_c0 * sp[46];
    sp[57] = sp[55] + sp[56];
    sp[58] = w0_d2_c0 * sp[52];
    sp[59] = sp[57] + sp[58];
    sp[60] = w1_d0_c0 * sp[41];
    sp[61] = w1_d1_c0 * sp[46];
    sp[62] = sp[60] + sp[61];
    sp[63] = w1_d2_c0 * sp[52];
    sp[64] = sp[62] + sp[63];
    sp[65] = sp[59] + sp[64];
    sp[66] = sp[65] * w[7][0];
    sp[67] = sp[54] + 0.5 * sp[66];
    sp[68] = sp[67] * sp[67];
    sp[69] = sp[37] + sp[68];
    sp[70] = J_c1 * J_c5;
    sp[71] = J_c2 * J_c4;
    sp[72] = sp[70] + -1 * sp[71];
    sp[73] = sp[72] / sp[13];
    sp[74] = w2_d0_c0 * sp[73];
    sp[75] = J_c2 * J_c3;
    sp[76] = J_c0 * J_c5;
    sp[77] = sp[75] + -1 * sp[76];
    sp[78] = sp[77] / sp[13];
    sp[79] = w2_d1_c0 * sp[78];
    sp[80] = sp[74] + sp[79];
    sp[81] = J_c0 * J_c4;
    sp[82] = J_c1 * J_c3;
    sp[83] = sp[81] + -1 * sp[82];
    sp[84] = sp[83] / sp[13];
    sp[85] = w2_d2_c0 * sp[84];
    sp[86] = sp[80] + sp[85];
    sp[87] = w0_d0_c0 * sp[73];
    sp[88] = w0_d1_c0 * sp[78];
    sp[89] = sp[87] + sp[88];
    sp[90] = w0_d2_c0 * sp[84];
    sp[91] = sp[89] + sp[90];
    sp[92] = w1_d0_c0 * sp[73];
    sp[93] = w1_d1_c0 * sp[78];
    sp[94] = sp[92] + sp[93];
    sp[95] = w1_d2_c0 * sp[84];
    sp[96] = sp[94] + sp[95];
    sp[97] = sp[91] + sp[96];
    sp[98] = sp[97] * w[7][0];
    sp[99] = sp[86] + 0.5 * sp[98];
    sp[100] = sp[99] * sp[99];
    sp[101] = sp[69] + sp[100];
    sp[102] = w2_d0_c1 * sp[41];
    sp[103] = w2_d1_c1 * sp[46];
    sp[104] = sp[102] + sp[103];
    sp[105] = w2_d2_c1 * sp[52];
    sp[106] = sp[104] + sp[105];
    sp[107] = w0_d0_c1 * sp[41];
    sp[108] = w0_d1_c1 * sp[46];
    sp[109] = sp[107] + sp[108];
    sp[110] = w0_d2_c1 * sp[52];
    sp[111] = sp[109] + sp[110];
    sp[112] = w1_d0_c1 * sp[41];
    sp[113] = w1_d1_c1 * sp[46];
    sp[114] = sp[112] + sp[113];
    sp[115] = w1_d2_c1 * sp[52];
    sp[116] = sp[114] + sp[115];
    sp[117] = sp[111] + sp[116];
    sp[118] = sp[117] * w[7][0];
    sp[119] = sp[106] + 0.5 * sp[118];
    sp[120] = (1 + sp[119]) * (1 + sp[119]);
    sp[121] = w2_d0_c1 * sp[14];
    sp[122] = w2_d1_c1 * sp[18];
    sp[123] = sp[121] + sp[122];
    sp[124] = w2_d2_c1 * sp[21];
    sp[125] = sp[123] + sp[124];
    sp[126] = w0_d0_c1 * sp[14];
    sp[127] = w0_d1_c1 * sp[18];
    sp[128] = sp[126] + sp[127];
    sp[129] = w0_d2_c1 * sp[21];
    sp[130] = sp[128] + sp[129];
    sp[131] = w1_d0_c1 * sp[14];
    sp[132] = w1_d1_c1 * sp[18];
    sp[133] = sp[131] + sp[132];
    sp[134] = w1_d2_c1 * sp[21];
    sp[135] = sp[133] + sp[134];
    sp[136] = sp[130] + sp[135];
    sp[137] = sp[136] * w[7][0];
    sp[138] = sp[125] + 0.5 * sp[137];
    sp[139] = sp[138] * sp[138];
    sp[140] = sp[120] + sp[139];
    sp[141] = w2_d0_c1 * sp[73];
    sp[142] = w2_d1_c1 * sp[78];
    sp[143] = sp[141] + sp[142];
    sp[144] = w2_d2_c1 * sp[84];
    sp[145] = sp[143] + sp[144];
    sp[146] = w0_d0_c1 * sp[73];
    sp[147] = w0_d1_c1 * sp[78];
    sp[148] = sp[146] + sp[147];
    sp[149] = w0_d2_c1 * sp[84];
    sp[150] = sp[148] + sp[149];
    sp[151] = w1_d0_c1 * sp[73];
    sp[152] = w1_d1_c1 * sp[78];
    sp[153] = sp[151] + sp[152];
    sp[154] = w1_d2_c1 * sp[84];
    sp[155] = sp[153] + sp[154];
    sp[156] = sp[150] + sp[155];
    sp[157] = sp[156] * w[7][0];
    sp[158] = sp[145] + 0.5 * sp[157];
    sp[159] = sp[158] * sp[158];
    sp[160] = sp[140] + sp[159];
    sp[161] = sp[101] + sp[160];
    sp[162] = w2_d0_c2 * sp[14];
    sp[163] = w2_d1_c2 * sp[18];
    sp[164] = sp[162] + sp[163];
    sp[165] = w2_d2_c2 * sp[21];
    sp[166] = sp[164] + sp[165];
    sp[167] = w0_d0_c2 * sp[14];
    sp[168] = w0_d1_c2 * sp[18];
    sp[169] = sp[167] + sp[168];
    sp[170] = w0_d2_c2 * sp[21];
    sp[171] = sp[169] + sp[170];
    sp[172] = w1_d0_c2 * sp[14];
    sp[173] = w1_d1_c2 * sp[18];
    sp[174] = sp[172] + sp[173];
    sp[175] = w1_d2_c2 * sp[21];
    sp[176] = sp[174] + sp[175];
    sp[177] = sp[171] + sp[176];
    sp[178] = sp[177] * w[7][0];
    sp[179] = sp[166] + 0.5 * sp[178];
    sp[180] = sp[179] * sp[179];
    sp[181] = w2_d0_c2 * sp[41];
    sp[182] = w2_d1_c2 * sp[46];
    sp[183] = sp[181] + sp[182];
    sp[184] = w2_d2_c2 * sp[52];
    sp[185] = sp[183] + sp[184];
    sp[186] = w0_d0_c2 * sp[41];
    sp[187] = w0_d1_c2 * sp[46];
    sp[188] = sp[186] + sp[187];
    sp[189] = w0_d2_c2 * sp[52];
    sp[190] = sp[188] + sp[189];
    sp[191] = w1_d0_c2 * sp[41];
    sp[192] = w1_d1_c2 * sp[46];
    sp[193] = sp[191] + sp[192];
    sp[194] = w1_d2_c2 * sp[52];
    sp[195] = sp[193] + sp[194];
    sp[196] = sp[190] + sp[195];
    sp[197] = sp[196] * w[7][0];
    sp[198] = sp[185] + 0.5 * sp[197];
    sp[199] = sp[198] * sp[198];
    sp[200] = sp[180] + sp[199];
    sp[201] = w2_d0_c2 * sp[73];
    sp[202] = w2_d1_c2 * sp[78];
    sp[203] = sp[201] + sp[202];
    sp[204] = w2_d2_c2 * sp[84];
    sp[205] = sp[203] + sp[204];
    sp[206] = w0_d0_c2 * sp[73];
    sp[207] = w0_d1_c2 * sp[78];
    sp[208] = sp[206] + sp[207];
    sp[209] = w0_d2_c2 * sp[84];
    sp[210] = sp[208] + sp[209];
    sp[211] = w1_d0_c2 * sp[73];
    sp[212] = w1_d1_c2 * sp[78];
    sp[213] = sp[211] + sp[212];
    sp[214] = w1_d2_c2 * sp[84];
    sp[215] = sp[213] + sp[214];
    sp[216] = sp[210] + sp[215];
    sp[217] = sp[216] * w[7][0];
    sp[218] = sp[205] + 0.5 * sp[217];
    sp[219] = (1 + sp[218]) * (1 + sp[218]);
    sp[220] = sp[200] + sp[219];
    sp[221] = sp[161] + sp[220];
    sp[222] = (1 + sp[218]) * (1 + sp[119]);
    sp[223] = sp[158] * sp[198];
    sp[224] = sp[222] + -1 * sp[223];
    sp[225] = (1 + sp[36]) * sp[224];
    sp[226] = sp[158] * sp[179];
    sp[227] = (1 + sp[218]) * sp[138];
    sp[228] = sp[226] + -1 * sp[227];
    sp[229] = sp[228] * sp[67];
    sp[230] = sp[225] + sp[229];
    sp[231] = sp[138] * sp[198];
    sp[232] = (1 + sp[119]) * sp[179];
    sp[233] = sp[231] + -1 * sp[232];
    sp[234] = sp[233] * sp[99];
    sp[235] = sp[230] + sp[234];
    sp[236] = sp[99] * sp[198];
    sp[237] = (1 + sp[218]) * sp[67];
    sp[238] = sp[236] + -1 * sp[237];
    sp[239] = sp[158] * sp[67];
    sp[240] = (1 + sp[119]) * sp[99];
    sp[241] = sp[239] + -1 * sp[240];
    sp[242] = (1 + sp[218]) * (1 + sp[36]);
    sp[243] = sp[99] * sp[179];
    sp[244] = sp[242] + -1 * sp[243];
    sp[245] = sp[99] * sp[138];
    sp[246] = (1 + sp[36]) * sp[158];
    sp[247] = sp[245] + -1 * sp[246];
    sp[248] = (1 + sp[119]) * (-1 * sp[179]);
    sp[249] = sp[231] + sp[248];
    sp[250] = sp[179] * sp[67];
    sp[251] = sp[198] * (-1 * (1 + sp[36]));
    sp[252] = sp[250] + sp[251];
    sp[253] = (1 + sp[36]) * (1 + sp[119]);
    sp[254] = sp[67] * (-1 * sp[138]);
    sp[255] = sp[253] + sp[254];
    sp[256] = std::abs(sp[13]);
    alignas(32) double BF0[2] = {};
    alignas(32) double BF1[4] = {};
    alignas(32) double BF2[2] = {};
    alignas(32) double BF3[2] = {};
    alignas(32) double BF4[2] = {};
    alignas(32) double BF5[4] = {};
    alignas(32) double BF6[2] = {};
    alignas(32) double BF7[2] = {};
    alignas(32) double BF8[2] = {};
    alignas(32) double BF9[4] = {};
    alignas(32) double BF10[2] = {};
    alignas(32) double BF11[2] = {};
    alignas(32) double BF12[4] = {};
    for (int iq = 0; iq < 5; ++iq)
    {
        // Quadrature loop body setup (num_points=5)
        // Unstructured varying computations for num_points=5
        double w6 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w6 += w[6][ic] * FE25_C0_Q5[0][iq][ic];
        double w5 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w5 += w[5][ic] * FE25_C0_Q5[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w4 += w[4][ic] * FE25_C0_Q5[0][iq][ic];
        double w0_c3 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c3 += w[0][ic + 12] * FE25_C0_Q5[0][iq][ic];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c0 += w[0][ic] * FE25_C0_Q5[0][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c0 += w[1][ic] * FE25_C0_Q5[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c1 += w[0][ic + 4] * FE25_C0_Q5[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c1 += w[1][ic + 4] * FE25_C0_Q5[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c2 += w[0][ic + 8] * FE25_C0_Q5[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c2 += w[1][ic + 8] * FE25_C0_Q5[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w3 += w[3][ic] * FE25_C0_Q5[0][iq][ic];
        alignas(32) double sv5[97];
        sv5[0] = (-2 + sp[221]) * (2 * w6);
        sv5[1] = sv5[0] + w5;
        sv5[2] = sv5[1] * (2 * sp[235]);
        sv5[3] = (1 + sp[36]) * sv5[2];
        sv5[4] = sp[224] * (-1 * w4);
        sv5[5] = sv5[3] + sv5[4];
        sv5[6] = sv5[5] * sp[14];
        sv5[7] = sv5[5] * sp[18];
        sv5[8] = sv5[5] * sp[21];
        sv5[9] = sp[138] * sv5[2];
        sv5[10] = sp[238] * (-1 * w4);
        sv5[11] = sv5[9] + sv5[10];
        sv5[12] = sv5[11] * sp[14];
        sv5[13] = sv5[11] * sp[18];
        sv5[14] = sv5[11] * sp[21];
        sv5[15] = sp[179] * sv5[2];
        sv5[16] = sp[241] * (-1 * w4);
        sv5[17] = sv5[15] + sv5[16];
        sv5[18] = sv5[17] * sp[14];
        sv5[19] = sv5[17] * sp[18];
        sv5[20] = sv5[17] * sp[21];
        sv5[21] = sp[67] * sv5[2];
        sv5[22] = sp[228] * (-1 * w4);
        sv5[23] = sv5[21] + sv5[22];
        sv5[24] = sv5[23] * sp[41];
        sv5[25] = sv5[23] * sp[46];
        sv5[26] = sv5[23] * sp[52];
        sv5[27] = (1 + sp[119]) * sv5[2];
        sv5[28] = sp[244] * (-1 * w4);
        sv5[29] = sv5[27] + sv5[28];
        sv5[30] = sv5[29] * sp[41];
        sv5[31] = sv5[29] * sp[46];
        sv5[32] = sv5[29] * sp[52];
        sv5[33] = sp[198] * sv5[2];
        sv5[34] = sp[247] * (-1 * w4);
        sv5[35] = sv5[33] + sv5[34];
        sv5[36] = sv5[35] * sp[41];
        sv5[37] = sv5[35] * sp[46];
        sv5[38] = sv5[35] * sp[52];
        sv5[39] = sv5[24] + sv5[6];
        sv5[40] = sv5[25] + sv5[7];
        sv5[41] = sv5[8] + sv5[26];
        sv5[42] = sv5[30] + sv5[12];
        sv5[43] = sv5[31] + sv5[13];
        sv5[44] = sv5[14] + sv5[32];
        sv5[45] = sv5[36] + sv5[18];
        sv5[46] = sv5[37] + sv5[19];
        sv5[47] = sv5[20] + sv5[38];
        sv5[48] = sp[99] * sv5[2];
        sv5[49] = sp[249] * (-1 * w4);
        sv5[50] = sv5[48] + sv5[49];
        sv5[51] = sv5[50] * sp[73];
        sv5[52] = sv5[50] * sp[78];
        sv5[53] = sv5[50] * sp[84];
        sv5[54] = sp[158] * sv5[2];
        sv5[55] = sp[252] * (-1 * w4);
        sv5[56] = sv5[54] + sv5[55];
        sv5[57] = sv5[56] * sp[73];
        sv5[58] = sv5[56] * sp[78];
        sv5[59] = sv5[56] * sp[84];
        sv5[60] = (1 + sp[218]) * sv5[2];
        sv5[61] = sp[255] * (-1 * w4);
        sv5[62] = sv5[60] + sv5[61];
        sv5[63] = sv5[62] * sp[73];
        sv5[64] = sv5[62] * sp[78];
        sv5[65] = sv5[62] * sp[84];
        sv5[66] = sv5[39] + sv5[51];
        sv5[67] = sv5[40] + sv5[52];
        sv5[68] = sv5[41] + sv5[53];
        sv5[69] = sv5[42] + sv5[57];
        sv5[70] = sv5[43] + sv5[58];
        sv5[71] = sv5[44] + sv5[59];
        sv5[72] = sv5[45] + sv5[63];
        sv5[73] = sv5[46] + sv5[64];
        sv5[74] = sv5[47] + sv5[65];
        sv5[75] = w0_c0 + -1 * w1_c0;
        sv5[76] = sv5[75] / w[7][0];
        sv5[77] = w0_c1 + -1 * w1_c1;
        sv5[78] = sv5[77] / w[7][0];
        sv5[79] = w0_c2 + -1 * w1_c2;
        sv5[80] = sv5[79] / w[7][0];
        sv5[81] = sv5[76] * w3;
        sv5[82] = sv5[78] * w3;
        sv5[83] = sv5[80] * w3;
        sv5[84] = sv5[66] * sp[256];
        sv5[85] = sv5[67] * sp[256];
        sv5[86] = sv5[68] * sp[256];
        sv5[87] = sv5[69] * sp[256];
        sv5[88] = sv5[70] * sp[256];
        sv5[89] = sv5[71] * sp[256];
        sv5[90] = sv5[72] * sp[256];
        sv5[91] = sv5[73] * sp[256];
        sv5[92] = sv5[74] * sp[256];
        sv5[93] = 1e-12 * w0_c3 * sp[256];
        sv5[94] = sv5[81] * sp[256];
        sv5[95] = sv5[82] * sp[256];
        sv5[96] = sv5[83] * sp[256];
        const double fw0 = sv5[84] * weights5[iq];
        for (int i = 0; i < 2; ++i)
            BF0[i] += fw0 * FE25_C0_D001_Q5[0][0][i];
        const double fw1 = sv5[94] * weights5[iq];
        for (int i = 0; i < 4; ++i)
            BF1[i] += fw1 * FE25_C0_Q5[0][iq][i];
        const double fw2 = sv5[85] * weights5[iq];
        for (int i = 0; i < 2; ++i)
            BF2[i] += fw2 * FE25_C0_D001_Q5[0][0][i];
        const double fw3 = sv5[86] * weights5[iq];
        for (int i = 0; i < 2; ++i)
            BF3[i] += fw3 * FE25_C0_D001_Q5[0][0][i];
        const double fw4 = sv5[87] * weights5[iq];
        for (int i = 0; i < 2; ++i)
            BF4[i] += fw4 * FE25_C0_D001_Q5[0][0][i];
        const double fw5 = sv5[95] * weights5[iq];
        for (int i = 0; i < 4; ++i)
            BF5[i] += fw5 * FE25_C0_Q5[0][iq][i];
        const double fw6 = sv5[88] * weights5[iq];
        for (int i = 0; i < 2; ++i)
            BF6[i] += fw6 * FE25_C0_D001_Q5[0][0][i];
        const double fw7 = sv5[89] * weights5[iq];
        for (int i = 0; i < 2; ++i)
            BF7[i] += fw7 * FE25_C0_D001_Q5[0][0][i];
        const double fw8 = sv5[90] * weights5[iq];
        for (int i = 0; i < 2; ++i)
            BF8[i] += fw8 * FE25_C0_D001_Q5[0][0][i];
        const double fw9 = sv5[96] * weights5[iq];
        for (int i = 0; i < 4; ++i)
            BF9[i] += fw9 * FE25_C0_Q5[0][iq][i];
        const double fw10 = sv5[91] * weights5[iq];
        for (int i = 0; i < 2; ++i)
            BF10[i] += fw10 * FE25_C0_D001_Q5[0][0][i];
        const double fw11 = sv5[92] * weights5[iq];
        for (int i = 0; i < 2; ++i)
            BF11[i] += fw11 * FE25_C0_D001_Q5[0][0][i];
        const double fw12 = sv5[93] * weights5[iq];
        for (int i = 0; i < 4; ++i)
            BF12[i] += fw12 * FE25_C0_Q5[0][iq][i];
    }
    std::fill(&A[0], &A[16], 0.0);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 4, 6 };
    static const int DM3[2] = { 4, 7 };
    static const int DM4[2] = { 8, 10 };
    static const int DM5[2] = { 8, 11 };
    for (int i = 0; i < 2; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 4; ++i)
        A[i] += BF1[i];
    for (int i = 0; i < 2; ++i)
        A[DM0[i]] += BF2[i];
    for (int i = 0; i < 2; ++i)
        A[DM1[i]] += BF3[i];
    for (int i = 0; i < 2; ++i)
        A[i + 4] += BF4[i];
    for (int i = 0; i < 4; ++i)
        A[i + 4] += BF5[i];
    for (int i = 0; i < 2; ++i)
        A[DM2[i]] += BF6[i];
    for (int i = 0; i < 2; ++i)
        A[DM3[i]] += BF7[i];
    for (int i = 0; i < 2; ++i)
        A[i + 8] += BF8[i];
    for (int i = 0; i < 4; ++i)
        A[i + 8] += BF9[i];
    for (int i = 0; i < 2; ++i)
        A[DM4[i]] += BF10[i];
    for (int i = 0; i < 2; ++i)
        A[DM5[i]] += BF11[i];
    for (int i = 0; i < 4; ++i)
        A[i + 12] += BF12[i];
  }

};


class elastic3dp1p1_cell_integral_0_2: public ufc::cell_integral
{
public:

  elastic3dp1p1_cell_integral_0_2() : ufc::cell_integral()
  {

  }

  ~elastic3dp1p1_cell_integral_0_2() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 3
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 3
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           3
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights5[5] = { -0.1333333333333333, 0.075, 0.075, 0.075, 0.075 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE25_C0_D001_Q5[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE25_C0_Q5[1][5][4] =
        { { { 0.2500000000000001, 0.25, 0.25, 0.25 },
            { 0.1666666666666668, 0.5, 0.1666666666666667, 0.1666666666666667 },
            { 0.1666666666666668, 0.1666666666666666, 0.5, 0.1666666666666667 },
            { 0.1666666666666668, 0.1666666666666666, 0.1666666666666667, 0.5 },
            { 0.5, 0.1666666666666665, 0.1666666666666667, 0.1666666666666667 } } };
    // Unstructured piecewise computations
    double w2_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c0 += w[2][ic] * FE25_C0_D001_Q5[0][0][ic];
    const double J_c4 = coordinate_dofs[1] * FE25_C0_D001_Q5[0][0][0] + coordinate_dofs[7] * FE25_C0_D001_Q5[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE25_C0_D001_Q5[0][0][0] + coordinate_dofs[11] * FE25_C0_D001_Q5[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE25_C0_D001_Q5[0][0][0] + coordinate_dofs[10] * FE25_C0_D001_Q5[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE25_C0_D001_Q5[0][0][0] + coordinate_dofs[8] * FE25_C0_D001_Q5[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE25_C0_D001_Q5[0][0][0] + coordinate_dofs[3] * FE25_C0_D001_Q5[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE25_C0_D001_Q5[0][0][0] + coordinate_dofs[6] * FE25_C0_D001_Q5[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE25_C0_D001_Q5[0][0][0] + coordinate_dofs[5] * FE25_C0_D001_Q5[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE25_C0_D001_Q5[0][0][0] + coordinate_dofs[4] * FE25_C0_D001_Q5[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE25_C0_D001_Q5[0][0][0] + coordinate_dofs[9] * FE25_C0_D001_Q5[0][0][1];
    const double w2_d1_c0 = w[2][0] * FE25_C0_D001_Q5[0][0][0] + w[2][2] * FE25_C0_D001_Q5[0][0][1];
    const double w2_d2_c0 = w[2][0] * FE25_C0_D001_Q5[0][0][0] + w[2][3] * FE25_C0_D001_Q5[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE25_C0_D001_Q5[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE25_C0_D001_Q5[0][0][0] + w[0][2] * FE25_C0_D001_Q5[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE25_C0_D001_Q5[0][0][0] + w[0][3] * FE25_C0_D001_Q5[0][0][1];
    double w1_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c0 += w[1][ic] * FE25_C0_D001_Q5[0][0][ic];
    const double w1_d1_c0 = w[1][0] * FE25_C0_D001_Q5[0][0][0] + w[1][2] * FE25_C0_D001_Q5[0][0][1];
    const double w1_d2_c0 = w[1][0] * FE25_C0_D001_Q5[0][0][0] + w[1][3] * FE25_C0_D001_Q5[0][0][1];
    double w2_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c1 += w[2][ic + 4] * FE25_C0_D001_Q5[0][0][ic];
    const double w2_d1_c1 = w[2][4] * FE25_C0_D001_Q5[0][0][0] + w[2][6] * FE25_C0_D001_Q5[0][0][1];
    const double w2_d2_c1 = w[2][4] * FE25_C0_D001_Q5[0][0][0] + w[2][7] * FE25_C0_D001_Q5[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE25_C0_D001_Q5[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE25_C0_D001_Q5[0][0][0] + w[0][6] * FE25_C0_D001_Q5[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE25_C0_D001_Q5[0][0][0] + w[0][7] * FE25_C0_D001_Q5[0][0][1];
    double w1_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c1 += w[1][ic + 4] * FE25_C0_D001_Q5[0][0][ic];
    const double w1_d1_c1 = w[1][4] * FE25_C0_D001_Q5[0][0][0] + w[1][6] * FE25_C0_D001_Q5[0][0][1];
    const double w1_d2_c1 = w[1][4] * FE25_C0_D001_Q5[0][0][0] + w[1][7] * FE25_C0_D001_Q5[0][0][1];
    double w2_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c2 += w[2][ic + 8] * FE25_C0_D001_Q5[0][0][ic];
    const double w2_d1_c2 = w[2][8] * FE25_C0_D001_Q5[0][0][0] + w[2][10] * FE25_C0_D001_Q5[0][0][1];
    const double w2_d2_c2 = w[2][8] * FE25_C0_D001_Q5[0][0][0] + w[2][11] * FE25_C0_D001_Q5[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE25_C0_D001_Q5[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE25_C0_D001_Q5[0][0][0] + w[0][10] * FE25_C0_D001_Q5[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE25_C0_D001_Q5[0][0][0] + w[0][11] * FE25_C0_D001_Q5[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 8] * FE25_C0_D001_Q5[0][0][ic];
    const double w1_d1_c2 = w[1][8] * FE25_C0_D001_Q5[0][0][0] + w[1][10] * FE25_C0_D001_Q5[0][0][1];
    const double w1_d2_c2 = w[1][8] * FE25_C0_D001_Q5[0][0][0] + w[1][11] * FE25_C0_D001_Q5[0][0][1];
    alignas(32) double sp[257];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = w2_d0_c0 * sp[14];
    sp[16] = J_c3 * (-1 * J_c8);
    sp[17] = sp[4] + sp[16];
    sp[18] = sp[17] / sp[13];
    sp[19] = w2_d1_c0 * sp[18];
    sp[20] = sp[15] + sp[19];
    sp[21] = sp[11] / sp[13];
    sp[22] = w2_d2_c0 * sp[21];
    sp[23] = sp[20] + sp[22];
    sp[24] = w0_d0_c0 * sp[14];
    sp[25] = w0_d1_c0 * sp[18];
    sp[26] = sp[24] + sp[25];
    sp[27] = w0_d2_c0 * sp[21];
    sp[28] = sp[26] + sp[27];
    sp[29] = w1_d0_c0 * sp[14];
    sp[30] = w1_d1_c0 * sp[18];
    sp[31] = sp[29] + sp[30];
    sp[32] = w1_d2_c0 * sp[21];
    sp[33] = sp[31] + sp[32];
    sp[34] = sp[28] + sp[33];
    sp[35] = sp[34] * w[7][0];
    sp[36] = sp[23] + 0.5 * sp[35];
    sp[37] = (1 + sp[36]) * (1 + sp[36]);
    sp[38] = J_c2 * J_c7;
    sp[39] = J_c8 * (-1 * J_c1);
    sp[40] = sp[38] + sp[39];
    sp[41] = sp[40] / sp[13];
    sp[42] = w2_d0_c0 * sp[41];
    sp[43] = J_c0 * J_c8;
    sp[44] = J_c6 * (-1 * J_c2);
    sp[45] = sp[43] + sp[44];
    sp[46] = sp[45] / sp[13];
    sp[47] = w2_d1_c0 * sp[46];
    sp[48] = sp[42] + sp[47];
    sp[49] = J_c1 * J_c6;
    sp[50] = J_c0 * J_c7;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = w2_d2_c0 * sp[52];
    sp[54] = sp[48] + sp[53];
    sp[55] = w0_d0_c0 * sp[41];
    sp[56] = w0_d1_c0 * sp[46];
    sp[57] = sp[55] + sp[56];
    sp[58] = w0_d2_c0 * sp[52];
    sp[59] = sp[57] + sp[58];
    sp[60] = w1_d0_c0 * sp[41];
    sp[61] = w1_d1_c0 * sp[46];
    sp[62] = sp[60] + sp[61];
    sp[63] = w1_d2_c0 * sp[52];
    sp[64] = sp[62] + sp[63];
    sp[65] = sp[59] + sp[64];
    sp[66] = sp[65] * w[7][0];
    sp[67] = sp[54] + 0.5 * sp[66];
    sp[68] = sp[67] * sp[67];
    sp[69] = sp[37] + sp[68];
    sp[70] = J_c1 * J_c5;
    sp[71] = J_c2 * J_c4;
    sp[72] = sp[70] + -1 * sp[71];
    sp[73] = sp[72] / sp[13];
    sp[74] = w2_d0_c0 * sp[73];
    sp[75] = J_c2 * J_c3;
    sp[76] = J_c0 * J_c5;
    sp[77] = sp[75] + -1 * sp[76];
    sp[78] = sp[77] / sp[13];
    sp[79] = w2_d1_c0 * sp[78];
    sp[80] = sp[74] + sp[79];
    sp[81] = J_c0 * J_c4;
    sp[82] = J_c1 * J_c3;
    sp[83] = sp[81] + -1 * sp[82];
    sp[84] = sp[83] / sp[13];
    sp[85] = w2_d2_c0 * sp[84];
    sp[86] = sp[80] + sp[85];
    sp[87] = w0_d0_c0 * sp[73];
    sp[88] = w0_d1_c0 * sp[78];
    sp[89] = sp[87] + sp[88];
    sp[90] = w0_d2_c0 * sp[84];
    sp[91] = sp[89] + sp[90];
    sp[92] = w1_d0_c0 * sp[73];
    sp[93] = w1_d1_c0 * sp[78];
    sp[94] = sp[92] + sp[93];
    sp[95] = w1_d2_c0 * sp[84];
    sp[96] = sp[94] + sp[95];
    sp[97] = sp[91] + sp[96];
    sp[98] = sp[97] * w[7][0];
    sp[99] = sp[86] + 0.5 * sp[98];
    sp[100] = sp[99] * sp[99];
    sp[101] = sp[69] + sp[100];
    sp[102] = w2_d0_c1 * sp[41];
    sp[103] = w2_d1_c1 * sp[46];
    sp[104] = sp[102] + sp[103];
    sp[105] = w2_d2_c1 * sp[52];
    sp[106] = sp[104] + sp[105];
    sp[107] = w0_d0_c1 * sp[41];
    sp[108] = w0_d1_c1 * sp[46];
    sp[109] = sp[107] + sp[108];
    sp[110] = w0_d2_c1 * sp[52];
    sp[111] = sp[109] + sp[110];
    sp[112] = w1_d0_c1 * sp[41];
    sp[113] = w1_d1_c1 * sp[46];
    sp[114] = sp[112] + sp[113];
    sp[115] = w1_d2_c1 * sp[52];
    sp[116] = sp[114] + sp[115];
    sp[117] = sp[111] + sp[116];
    sp[118] = sp[117] * w[7][0];
    sp[119] = sp[106] + 0.5 * sp[118];
    sp[120] = (1 + sp[119]) * (1 + sp[119]);
    sp[121] = w2_d0_c1 * sp[14];
    sp[122] = w2_d1_c1 * sp[18];
    sp[123] = sp[121] + sp[122];
    sp[124] = w2_d2_c1 * sp[21];
    sp[125] = sp[123] + sp[124];
    sp[126] = w0_d0_c1 * sp[14];
    sp[127] = w0_d1_c1 * sp[18];
    sp[128] = sp[126] + sp[127];
    sp[129] = w0_d2_c1 * sp[21];
    sp[130] = sp[128] + sp[129];
    sp[131] = w1_d0_c1 * sp[14];
    sp[132] = w1_d1_c1 * sp[18];
    sp[133] = sp[131] + sp[132];
    sp[134] = w1_d2_c1 * sp[21];
    sp[135] = sp[133] + sp[134];
    sp[136] = sp[130] + sp[135];
    sp[137] = sp[136] * w[7][0];
    sp[138] = sp[125] + 0.5 * sp[137];
    sp[139] = sp[138] * sp[138];
    sp[140] = sp[120] + sp[139];
    sp[141] = w2_d0_c1 * sp[73];
    sp[142] = w2_d1_c1 * sp[78];
    sp[143] = sp[141] + sp[142];
    sp[144] = w2_d2_c1 * sp[84];
    sp[145] = sp[143] + sp[144];
    sp[146] = w0_d0_c1 * sp[73];
    sp[147] = w0_d1_c1 * sp[78];
    sp[148] = sp[146] + sp[147];
    sp[149] = w0_d2_c1 * sp[84];
    sp[150] = sp[148] + sp[149];
    sp[151] = w1_d0_c1 * sp[73];
    sp[152] = w1_d1_c1 * sp[78];
    sp[153] = sp[151] + sp[152];
    sp[154] = w1_d2_c1 * sp[84];
    sp[155] = sp[153] + sp[154];
    sp[156] = sp[150] + sp[155];
    sp[157] = sp[156] * w[7][0];
    sp[158] = sp[145] + 0.5 * sp[157];
    sp[159] = sp[158] * sp[158];
    sp[160] = sp[140] + sp[159];
    sp[161] = sp[101] + sp[160];
    sp[162] = w2_d0_c2 * sp[14];
    sp[163] = w2_d1_c2 * sp[18];
    sp[164] = sp[162] + sp[163];
    sp[165] = w2_d2_c2 * sp[21];
    sp[166] = sp[164] + sp[165];
    sp[167] = w0_d0_c2 * sp[14];
    sp[168] = w0_d1_c2 * sp[18];
    sp[169] = sp[167] + sp[168];
    sp[170] = w0_d2_c2 * sp[21];
    sp[171] = sp[169] + sp[170];
    sp[172] = w1_d0_c2 * sp[14];
    sp[173] = w1_d1_c2 * sp[18];
    sp[174] = sp[172] + sp[173];
    sp[175] = w1_d2_c2 * sp[21];
    sp[176] = sp[174] + sp[175];
    sp[177] = sp[171] + sp[176];
    sp[178] = sp[177] * w[7][0];
    sp[179] = sp[166] + 0.5 * sp[178];
    sp[180] = sp[179] * sp[179];
    sp[181] = w2_d0_c2 * sp[41];
    sp[182] = w2_d1_c2 * sp[46];
    sp[183] = sp[181] + sp[182];
    sp[184] = w2_d2_c2 * sp[52];
    sp[185] = sp[183] + sp[184];
    sp[186] = w0_d0_c2 * sp[41];
    sp[187] = w0_d1_c2 * sp[46];
    sp[188] = sp[186] + sp[187];
    sp[189] = w0_d2_c2 * sp[52];
    sp[190] = sp[188] + sp[189];
    sp[191] = w1_d0_c2 * sp[41];
    sp[192] = w1_d1_c2 * sp[46];
    sp[193] = sp[191] + sp[192];
    sp[194] = w1_d2_c2 * sp[52];
    sp[195] = sp[193] + sp[194];
    sp[196] = sp[190] + sp[195];
    sp[197] = sp[196] * w[7][0];
    sp[198] = sp[185] + 0.5 * sp[197];
    sp[199] = sp[198] * sp[198];
    sp[200] = sp[180] + sp[199];
    sp[201] = w2_d0_c2 * sp[73];
    sp[202] = w2_d1_c2 * sp[78];
    sp[203] = sp[201] + sp[202];
    sp[204] = w2_d2_c2 * sp[84];
    sp[205] = sp[203] + sp[204];
    sp[206] = w0_d0_c2 * sp[73];
    sp[207] = w0_d1_c2 * sp[78];
    sp[208] = sp[206] + sp[207];
    sp[209] = w0_d2_c2 * sp[84];
    sp[210] = sp[208] + sp[209];
    sp[211] = w1_d0_c2 * sp[73];
    sp[212] = w1_d1_c2 * sp[78];
    sp[213] = sp[211] + sp[212];
    sp[214] = w1_d2_c2 * sp[84];
    sp[215] = sp[213] + sp[214];
    sp[216] = sp[210] + sp[215];
    sp[217] = sp[216] * w[7][0];
    sp[218] = sp[205] + 0.5 * sp[217];
    sp[219] = (1 + sp[218]) * (1 + sp[218]);
    sp[220] = sp[200] + sp[219];
    sp[221] = sp[161] + sp[220];
    sp[222] = (1 + sp[218]) * (1 + sp[119]);
    sp[223] = sp[158] * sp[198];
    sp[224] = sp[222] + -1 * sp[223];
    sp[225] = (1 + sp[36]) * sp[224];
    sp[226] = sp[158] * sp[179];
    sp[227] = (1 + sp[218]) * sp[138];
    sp[228] = sp[226] + -1 * sp[227];
    sp[229] = sp[228] * sp[67];
    sp[230] = sp[225] + sp[229];
    sp[231] = sp[138] * sp[198];
    sp[232] = (1 + sp[119]) * sp[179];
    sp[233] = sp[231] + -1 * sp[232];
    sp[234] = sp[233] * sp[99];
    sp[235] = sp[230] + sp[234];
    sp[236] = sp[99] * sp[198];
    sp[237] = (1 + sp[218]) * sp[67];
    sp[238] = sp[236] + -1 * sp[237];
    sp[239] = sp[158] * sp[67];
    sp[240] = (1 + sp[119]) * sp[99];
    sp[241] = sp[239] + -1 * sp[240];
    sp[242] = (1 + sp[218]) * (1 + sp[36]);
    sp[243] = sp[99] * sp[179];
    sp[244] = sp[242] + -1 * sp[243];
    sp[245] = sp[99] * sp[138];
    sp[246] = (1 + sp[36]) * sp[158];
    sp[247] = sp[245] + -1 * sp[246];
    sp[248] = (1 + sp[119]) * (-1 * sp[179]);
    sp[249] = sp[231] + sp[248];
    sp[250] = sp[179] * sp[67];
    sp[251] = sp[198] * (-1 * (1 + sp[36]));
    sp[252] = sp[250] + sp[251];
    sp[253] = (1 + sp[36]) * (1 + sp[119]);
    sp[254] = sp[67] * (-1 * sp[138]);
    sp[255] = sp[253] + sp[254];
    sp[256] = std::abs(sp[13]);
    alignas(32) double BF0[2] = {};
    alignas(32) double BF1[4] = {};
    alignas(32) double BF2[2] = {};
    alignas(32) double BF3[2] = {};
    alignas(32) double BF4[2] = {};
    alignas(32) double BF5[4] = {};
    alignas(32) double BF6[2] = {};
    alignas(32) double BF7[2] = {};
    alignas(32) double BF8[2] = {};
    alignas(32) double BF9[4] = {};
    alignas(32) double BF10[2] = {};
    alignas(32) double BF11[2] = {};
    alignas(32) double BF12[4] = {};
    for (int iq = 0; iq < 5; ++iq)
    {
        // Quadrature loop body setup (num_points=5)
        // Unstructured varying computations for num_points=5
        double w6 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w6 += w[6][ic] * FE25_C0_Q5[0][iq][ic];
        double w5 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w5 += w[5][ic] * FE25_C0_Q5[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w4 += w[4][ic] * FE25_C0_Q5[0][iq][ic];
        double w0_c3 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c3 += w[0][ic + 12] * FE25_C0_Q5[0][iq][ic];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c0 += w[0][ic] * FE25_C0_Q5[0][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c0 += w[1][ic] * FE25_C0_Q5[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c1 += w[0][ic + 4] * FE25_C0_Q5[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c1 += w[1][ic + 4] * FE25_C0_Q5[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c2 += w[0][ic + 8] * FE25_C0_Q5[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c2 += w[1][ic + 8] * FE25_C0_Q5[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w3 += w[3][ic] * FE25_C0_Q5[0][iq][ic];
        alignas(32) double sv5[97];
        sv5[0] = (-2 + sp[221]) * (2 * w6);
        sv5[1] = sv5[0] + w5;
        sv5[2] = sv5[1] * (2 * sp[235]);
        sv5[3] = (1 + sp[36]) * sv5[2];
        sv5[4] = sp[224] * (-1 * w4);
        sv5[5] = sv5[3] + sv5[4];
        sv5[6] = sv5[5] * sp[14];
        sv5[7] = sv5[5] * sp[18];
        sv5[8] = sv5[5] * sp[21];
        sv5[9] = sp[138] * sv5[2];
        sv5[10] = sp[238] * (-1 * w4);
        sv5[11] = sv5[9] + sv5[10];
        sv5[12] = sv5[11] * sp[14];
        sv5[13] = sv5[11] * sp[18];
        sv5[14] = sv5[11] * sp[21];
        sv5[15] = sp[179] * sv5[2];
        sv5[16] = sp[241] * (-1 * w4);
        sv5[17] = sv5[15] + sv5[16];
        sv5[18] = sv5[17] * sp[14];
        sv5[19] = sv5[17] * sp[18];
        sv5[20] = sv5[17] * sp[21];
        sv5[21] = sp[67] * sv5[2];
        sv5[22] = sp[228] * (-1 * w4);
        sv5[23] = sv5[21] + sv5[22];
        sv5[24] = sv5[23] * sp[41];
        sv5[25] = sv5[23] * sp[46];
        sv5[26] = sv5[23] * sp[52];
        sv5[27] = (1 + sp[119]) * sv5[2];
        sv5[28] = sp[244] * (-1 * w4);
        sv5[29] = sv5[27] + sv5[28];
        sv5[30] = sv5[29] * sp[41];
        sv5[31] = sv5[29] * sp[46];
        sv5[32] = sv5[29] * sp[52];
        sv5[33] = sp[198] * sv5[2];
        sv5[34] = sp[247] * (-1 * w4);
        sv5[35] = sv5[33] + sv5[34];
        sv5[36] = sv5[35] * sp[41];
        sv5[37] = sv5[35] * sp[46];
        sv5[38] = sv5[35] * sp[52];
        sv5[39] = sv5[24] + sv5[6];
        sv5[40] = sv5[25] + sv5[7];
        sv5[41] = sv5[8] + sv5[26];
        sv5[42] = sv5[30] + sv5[12];
        sv5[43] = sv5[31] + sv5[13];
        sv5[44] = sv5[14] + sv5[32];
        sv5[45] = sv5[36] + sv5[18];
        sv5[46] = sv5[37] + sv5[19];
        sv5[47] = sv5[20] + sv5[38];
        sv5[48] = sp[99] * sv5[2];
        sv5[49] = sp[249] * (-1 * w4);
        sv5[50] = sv5[48] + sv5[49];
        sv5[51] = sv5[50] * sp[73];
        sv5[52] = sv5[50] * sp[78];
        sv5[53] = sv5[50] * sp[84];
        sv5[54] = sp[158] * sv5[2];
        sv5[55] = sp[252] * (-1 * w4);
        sv5[56] = sv5[54] + sv5[55];
        sv5[57] = sv5[56] * sp[73];
        sv5[58] = sv5[56] * sp[78];
        sv5[59] = sv5[56] * sp[84];
        sv5[60] = (1 + sp[218]) * sv5[2];
        sv5[61] = sp[255] * (-1 * w4);
        sv5[62] = sv5[60] + sv5[61];
        sv5[63] = sv5[62] * sp[73];
        sv5[64] = sv5[62] * sp[78];
        sv5[65] = sv5[62] * sp[84];
        sv5[66] = sv5[39] + sv5[51];
        sv5[67] = sv5[40] + sv5[52];
        sv5[68] = sv5[41] + sv5[53];
        sv5[69] = sv5[42] + sv5[57];
        sv5[70] = sv5[43] + sv5[58];
        sv5[71] = sv5[44] + sv5[59];
        sv5[72] = sv5[45] + sv5[63];
        sv5[73] = sv5[46] + sv5[64];
        sv5[74] = sv5[47] + sv5[65];
        sv5[75] = w0_c0 + -1 * w1_c0;
        sv5[76] = sv5[75] / w[7][0];
        sv5[77] = w0_c1 + -1 * w1_c1;
        sv5[78] = sv5[77] / w[7][0];
        sv5[79] = w0_c2 + -1 * w1_c2;
        sv5[80] = sv5[79] / w[7][0];
        sv5[81] = sv5[76] * w3;
        sv5[82] = sv5[78] * w3;
        sv5[83] = sv5[80] * w3;
        sv5[84] = sv5[66] * sp[256];
        sv5[85] = sv5[67] * sp[256];
        sv5[86] = sv5[68] * sp[256];
        sv5[87] = sv5[69] * sp[256];
        sv5[88] = sv5[70] * sp[256];
        sv5[89] = sv5[71] * sp[256];
        sv5[90] = sv5[72] * sp[256];
        sv5[91] = sv5[73] * sp[256];
        sv5[92] = sv5[74] * sp[256];
        sv5[93] = 1e-12 * w0_c3 * sp[256];
        sv5[94] = sv5[81] * sp[256];
        sv5[95] = sv5[82] * sp[256];
        sv5[96] = sv5[83] * sp[256];
        const double fw0 = sv5[84] * weights5[iq];
        for (int i = 0; i < 2; ++i)
            BF0[i] += fw0 * FE25_C0_D001_Q5[0][0][i];
        const double fw1 = sv5[94] * weights5[iq];
        for (int i = 0; i < 4; ++i)
            BF1[i] += fw1 * FE25_C0_Q5[0][iq][i];
        const double fw2 = sv5[85] * weights5[iq];
        for (int i = 0; i < 2; ++i)
            BF2[i] += fw2 * FE25_C0_D001_Q5[0][0][i];
        const double fw3 = sv5[86] * weights5[iq];
        for (int i = 0; i < 2; ++i)
            BF3[i] += fw3 * FE25_C0_D001_Q5[0][0][i];
        const double fw4 = sv5[87] * weights5[iq];
        for (int i = 0; i < 2; ++i)
            BF4[i] += fw4 * FE25_C0_D001_Q5[0][0][i];
        const double fw5 = sv5[95] * weights5[iq];
        for (int i = 0; i < 4; ++i)
            BF5[i] += fw5 * FE25_C0_Q5[0][iq][i];
        const double fw6 = sv5[88] * weights5[iq];
        for (int i = 0; i < 2; ++i)
            BF6[i] += fw6 * FE25_C0_D001_Q5[0][0][i];
        const double fw7 = sv5[89] * weights5[iq];
        for (int i = 0; i < 2; ++i)
            BF7[i] += fw7 * FE25_C0_D001_Q5[0][0][i];
        const double fw8 = sv5[90] * weights5[iq];
        for (int i = 0; i < 2; ++i)
            BF8[i] += fw8 * FE25_C0_D001_Q5[0][0][i];
        const double fw9 = sv5[96] * weights5[iq];
        for (int i = 0; i < 4; ++i)
            BF9[i] += fw9 * FE25_C0_Q5[0][iq][i];
        const double fw10 = sv5[91] * weights5[iq];
        for (int i = 0; i < 2; ++i)
            BF10[i] += fw10 * FE25_C0_D001_Q5[0][0][i];
        const double fw11 = sv5[92] * weights5[iq];
        for (int i = 0; i < 2; ++i)
            BF11[i] += fw11 * FE25_C0_D001_Q5[0][0][i];
        const double fw12 = sv5[93] * weights5[iq];
        for (int i = 0; i < 4; ++i)
            BF12[i] += fw12 * FE25_C0_Q5[0][iq][i];
    }
    std::fill(&A[0], &A[16], 0.0);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 4, 6 };
    static const int DM3[2] = { 4, 7 };
    static const int DM4[2] = { 8, 10 };
    static const int DM5[2] = { 8, 11 };
    for (int i = 0; i < 2; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 4; ++i)
        A[i] += BF1[i];
    for (int i = 0; i < 2; ++i)
        A[DM0[i]] += BF2[i];
    for (int i = 0; i < 2; ++i)
        A[DM1[i]] += BF3[i];
    for (int i = 0; i < 2; ++i)
        A[i + 4] += BF4[i];
    for (int i = 0; i < 4; ++i)
        A[i + 4] += BF5[i];
    for (int i = 0; i < 2; ++i)
        A[DM2[i]] += BF6[i];
    for (int i = 0; i < 2; ++i)
        A[DM3[i]] += BF7[i];
    for (int i = 0; i < 2; ++i)
        A[i + 8] += BF8[i];
    for (int i = 0; i < 4; ++i)
        A[i + 8] += BF9[i];
    for (int i = 0; i < 2; ++i)
        A[DM4[i]] += BF10[i];
    for (int i = 0; i < 2; ++i)
        A[DM5[i]] += BF11[i];
    for (int i = 0; i < 4; ++i)
        A[i + 12] += BF12[i];
  }

};


class elastic3dp1p1_cell_integral_1_1: public ufc::cell_integral
{
public:

  elastic3dp1p1_cell_integral_1_1() : ufc::cell_integral()
  {

  }

  ~elastic3dp1p1_cell_integral_1_1() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 3
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 3
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           3
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights5[5] = { -0.1333333333333333, 0.075, 0.075, 0.075, 0.075 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE34_C0_D001_Q5[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE34_C0_Q5[1][5][4] =
        { { { 0.2500000000000001, 0.25, 0.25, 0.25 },
            { 0.1666666666666668, 0.5, 0.1666666666666667, 0.1666666666666667 },
            { 0.1666666666666668, 0.1666666666666666, 0.5, 0.1666666666666667 },
            { 0.1666666666666668, 0.1666666666666666, 0.1666666666666667, 0.5 },
            { 0.5, 0.1666666666666665, 0.1666666666666667, 0.1666666666666667 } } };
    // Unstructured piecewise computations
    double w2_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c0 += w[2][ic] * FE34_C0_D001_Q5[0][0][ic];
    const double J_c4 = coordinate_dofs[1] * FE34_C0_D001_Q5[0][0][0] + coordinate_dofs[7] * FE34_C0_D001_Q5[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE34_C0_D001_Q5[0][0][0] + coordinate_dofs[11] * FE34_C0_D001_Q5[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE34_C0_D001_Q5[0][0][0] + coordinate_dofs[10] * FE34_C0_D001_Q5[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE34_C0_D001_Q5[0][0][0] + coordinate_dofs[8] * FE34_C0_D001_Q5[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE34_C0_D001_Q5[0][0][0] + coordinate_dofs[3] * FE34_C0_D001_Q5[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE34_C0_D001_Q5[0][0][0] + coordinate_dofs[6] * FE34_C0_D001_Q5[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE34_C0_D001_Q5[0][0][0] + coordinate_dofs[5] * FE34_C0_D001_Q5[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE34_C0_D001_Q5[0][0][0] + coordinate_dofs[4] * FE34_C0_D001_Q5[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE34_C0_D001_Q5[0][0][0] + coordinate_dofs[9] * FE34_C0_D001_Q5[0][0][1];
    const double w2_d1_c0 = w[2][0] * FE34_C0_D001_Q5[0][0][0] + w[2][2] * FE34_C0_D001_Q5[0][0][1];
    const double w2_d2_c0 = w[2][0] * FE34_C0_D001_Q5[0][0][0] + w[2][3] * FE34_C0_D001_Q5[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE34_C0_D001_Q5[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE34_C0_D001_Q5[0][0][0] + w[0][2] * FE34_C0_D001_Q5[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE34_C0_D001_Q5[0][0][0] + w[0][3] * FE34_C0_D001_Q5[0][0][1];
    double w1_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c0 += w[1][ic] * FE34_C0_D001_Q5[0][0][ic];
    const double w1_d1_c0 = w[1][0] * FE34_C0_D001_Q5[0][0][0] + w[1][2] * FE34_C0_D001_Q5[0][0][1];
    const double w1_d2_c0 = w[1][0] * FE34_C0_D001_Q5[0][0][0] + w[1][3] * FE34_C0_D001_Q5[0][0][1];
    double w2_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c1 += w[2][ic + 4] * FE34_C0_D001_Q5[0][0][ic];
    const double w2_d1_c1 = w[2][4] * FE34_C0_D001_Q5[0][0][0] + w[2][6] * FE34_C0_D001_Q5[0][0][1];
    const double w2_d2_c1 = w[2][4] * FE34_C0_D001_Q5[0][0][0] + w[2][7] * FE34_C0_D001_Q5[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE34_C0_D001_Q5[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE34_C0_D001_Q5[0][0][0] + w[0][6] * FE34_C0_D001_Q5[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE34_C0_D001_Q5[0][0][0] + w[0][7] * FE34_C0_D001_Q5[0][0][1];
    double w1_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c1 += w[1][ic + 4] * FE34_C0_D001_Q5[0][0][ic];
    const double w1_d1_c1 = w[1][4] * FE34_C0_D001_Q5[0][0][0] + w[1][6] * FE34_C0_D001_Q5[0][0][1];
    const double w1_d2_c1 = w[1][4] * FE34_C0_D001_Q5[0][0][0] + w[1][7] * FE34_C0_D001_Q5[0][0][1];
    double w2_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c2 += w[2][ic + 8] * FE34_C0_D001_Q5[0][0][ic];
    const double w2_d1_c2 = w[2][8] * FE34_C0_D001_Q5[0][0][0] + w[2][10] * FE34_C0_D001_Q5[0][0][1];
    const double w2_d2_c2 = w[2][8] * FE34_C0_D001_Q5[0][0][0] + w[2][11] * FE34_C0_D001_Q5[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE34_C0_D001_Q5[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE34_C0_D001_Q5[0][0][0] + w[0][10] * FE34_C0_D001_Q5[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE34_C0_D001_Q5[0][0][0] + w[0][11] * FE34_C0_D001_Q5[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 8] * FE34_C0_D001_Q5[0][0][ic];
    const double w1_d1_c2 = w[1][8] * FE34_C0_D001_Q5[0][0][0] + w[1][10] * FE34_C0_D001_Q5[0][0][1];
    const double w1_d2_c2 = w[1][8] * FE34_C0_D001_Q5[0][0][0] + w[1][11] * FE34_C0_D001_Q5[0][0][1];
    alignas(32) double sp[495];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = w2_d0_c0 * sp[14];
    sp[16] = J_c3 * (-1 * J_c8);
    sp[17] = sp[4] + sp[16];
    sp[18] = sp[17] / sp[13];
    sp[19] = w2_d1_c0 * sp[18];
    sp[20] = sp[15] + sp[19];
    sp[21] = sp[11] / sp[13];
    sp[22] = w2_d2_c0 * sp[21];
    sp[23] = sp[20] + sp[22];
    sp[24] = w0_d0_c0 * sp[14];
    sp[25] = w0_d1_c0 * sp[18];
    sp[26] = sp[24] + sp[25];
    sp[27] = w0_d2_c0 * sp[21];
    sp[28] = sp[26] + sp[27];
    sp[29] = w1_d0_c0 * sp[14];
    sp[30] = w1_d1_c0 * sp[18];
    sp[31] = sp[29] + sp[30];
    sp[32] = w1_d2_c0 * sp[21];
    sp[33] = sp[31] + sp[32];
    sp[34] = sp[28] + sp[33];
    sp[35] = sp[34] * w[7][0];
    sp[36] = sp[23] + 0.5 * sp[35];
    sp[37] = (1 + sp[36]) * (1 + sp[36]);
    sp[38] = J_c2 * J_c7;
    sp[39] = J_c8 * (-1 * J_c1);
    sp[40] = sp[38] + sp[39];
    sp[41] = sp[40] / sp[13];
    sp[42] = w2_d0_c0 * sp[41];
    sp[43] = J_c0 * J_c8;
    sp[44] = J_c6 * (-1 * J_c2);
    sp[45] = sp[43] + sp[44];
    sp[46] = sp[45] / sp[13];
    sp[47] = w2_d1_c0 * sp[46];
    sp[48] = sp[42] + sp[47];
    sp[49] = J_c1 * J_c6;
    sp[50] = J_c0 * J_c7;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = w2_d2_c0 * sp[52];
    sp[54] = sp[48] + sp[53];
    sp[55] = w0_d0_c0 * sp[41];
    sp[56] = w0_d1_c0 * sp[46];
    sp[57] = sp[55] + sp[56];
    sp[58] = w0_d2_c0 * sp[52];
    sp[59] = sp[57] + sp[58];
    sp[60] = w1_d0_c0 * sp[41];
    sp[61] = w1_d1_c0 * sp[46];
    sp[62] = sp[60] + sp[61];
    sp[63] = w1_d2_c0 * sp[52];
    sp[64] = sp[62] + sp[63];
    sp[65] = sp[59] + sp[64];
    sp[66] = sp[65] * w[7][0];
    sp[67] = sp[54] + 0.5 * sp[66];
    sp[68] = sp[67] * sp[67];
    sp[69] = sp[37] + sp[68];
    sp[70] = J_c1 * J_c5;
    sp[71] = J_c2 * J_c4;
    sp[72] = sp[70] + -1 * sp[71];
    sp[73] = sp[72] / sp[13];
    sp[74] = w2_d0_c0 * sp[73];
    sp[75] = J_c2 * J_c3;
    sp[76] = J_c0 * J_c5;
    sp[77] = sp[75] + -1 * sp[76];
    sp[78] = sp[77] / sp[13];
    sp[79] = w2_d1_c0 * sp[78];
    sp[80] = sp[74] + sp[79];
    sp[81] = J_c0 * J_c4;
    sp[82] = J_c1 * J_c3;
    sp[83] = sp[81] + -1 * sp[82];
    sp[84] = sp[83] / sp[13];
    sp[85] = w2_d2_c0 * sp[84];
    sp[86] = sp[80] + sp[85];
    sp[87] = w0_d0_c0 * sp[73];
    sp[88] = w0_d1_c0 * sp[78];
    sp[89] = sp[87] + sp[88];
    sp[90] = w0_d2_c0 * sp[84];
    sp[91] = sp[89] + sp[90];
    sp[92] = w1_d0_c0 * sp[73];
    sp[93] = w1_d1_c0 * sp[78];
    sp[94] = sp[92] + sp[93];
    sp[95] = w1_d2_c0 * sp[84];
    sp[96] = sp[94] + sp[95];
    sp[97] = sp[91] + sp[96];
    sp[98] = sp[97] * w[7][0];
    sp[99] = sp[86] + 0.5 * sp[98];
    sp[100] = sp[99] * sp[99];
    sp[101] = sp[69] + sp[100];
    sp[102] = w2_d0_c1 * sp[41];
    sp[103] = w2_d1_c1 * sp[46];
    sp[104] = sp[102] + sp[103];
    sp[105] = w2_d2_c1 * sp[52];
    sp[106] = sp[104] + sp[105];
    sp[107] = w0_d0_c1 * sp[41];
    sp[108] = w0_d1_c1 * sp[46];
    sp[109] = sp[107] + sp[108];
    sp[110] = w0_d2_c1 * sp[52];
    sp[111] = sp[109] + sp[110];
    sp[112] = w1_d0_c1 * sp[41];
    sp[113] = w1_d1_c1 * sp[46];
    sp[114] = sp[112] + sp[113];
    sp[115] = w1_d2_c1 * sp[52];
    sp[116] = sp[114] + sp[115];
    sp[117] = sp[111] + sp[116];
    sp[118] = sp[117] * w[7][0];
    sp[119] = sp[106] + 0.5 * sp[118];
    sp[120] = (1 + sp[119]) * (1 + sp[119]);
    sp[121] = w2_d0_c1 * sp[14];
    sp[122] = w2_d1_c1 * sp[18];
    sp[123] = sp[121] + sp[122];
    sp[124] = w2_d2_c1 * sp[21];
    sp[125] = sp[123] + sp[124];
    sp[126] = w0_d0_c1 * sp[14];
    sp[127] = w0_d1_c1 * sp[18];
    sp[128] = sp[126] + sp[127];
    sp[129] = w0_d2_c1 * sp[21];
    sp[130] = sp[128] + sp[129];
    sp[131] = w1_d0_c1 * sp[14];
    sp[132] = w1_d1_c1 * sp[18];
    sp[133] = sp[131] + sp[132];
    sp[134] = w1_d2_c1 * sp[21];
    sp[135] = sp[133] + sp[134];
    sp[136] = sp[130] + sp[135];
    sp[137] = sp[136] * w[7][0];
    sp[138] = sp[125] + 0.5 * sp[137];
    sp[139] = sp[138] * sp[138];
    sp[140] = sp[120] + sp[139];
    sp[141] = w2_d0_c1 * sp[73];
    sp[142] = w2_d1_c1 * sp[78];
    sp[143] = sp[141] + sp[142];
    sp[144] = w2_d2_c1 * sp[84];
    sp[145] = sp[143] + sp[144];
    sp[146] = w0_d0_c1 * sp[73];
    sp[147] = w0_d1_c1 * sp[78];
    sp[148] = sp[146] + sp[147];
    sp[149] = w0_d2_c1 * sp[84];
    sp[150] = sp[148] + sp[149];
    sp[151] = w1_d0_c1 * sp[73];
    sp[152] = w1_d1_c1 * sp[78];
    sp[153] = sp[151] + sp[152];
    sp[154] = w1_d2_c1 * sp[84];
    sp[155] = sp[153] + sp[154];
    sp[156] = sp[150] + sp[155];
    sp[157] = sp[156] * w[7][0];
    sp[158] = sp[145] + 0.5 * sp[157];
    sp[159] = sp[158] * sp[158];
    sp[160] = sp[140] + sp[159];
    sp[161] = sp[101] + sp[160];
    sp[162] = w2_d0_c2 * sp[14];
    sp[163] = w2_d1_c2 * sp[18];
    sp[164] = sp[162] + sp[163];
    sp[165] = w2_d2_c2 * sp[21];
    sp[166] = sp[164] + sp[165];
    sp[167] = w0_d0_c2 * sp[14];
    sp[168] = w0_d1_c2 * sp[18];
    sp[169] = sp[167] + sp[168];
    sp[170] = w0_d2_c2 * sp[21];
    sp[171] = sp[169] + sp[170];
    sp[172] = w1_d0_c2 * sp[14];
    sp[173] = w1_d1_c2 * sp[18];
    sp[174] = sp[172] + sp[173];
    sp[175] = w1_d2_c2 * sp[21];
    sp[176] = sp[174] + sp[175];
    sp[177] = sp[171] + sp[176];
    sp[178] = sp[177] * w[7][0];
    sp[179] = sp[166] + 0.5 * sp[178];
    sp[180] = sp[179] * sp[179];
    sp[181] = w2_d0_c2 * sp[41];
    sp[182] = w2_d1_c2 * sp[46];
    sp[183] = sp[181] + sp[182];
    sp[184] = w2_d2_c2 * sp[52];
    sp[185] = sp[183] + sp[184];
    sp[186] = w0_d0_c2 * sp[41];
    sp[187] = w0_d1_c2 * sp[46];
    sp[188] = sp[186] + sp[187];
    sp[189] = w0_d2_c2 * sp[52];
    sp[190] = sp[188] + sp[189];
    sp[191] = w1_d0_c2 * sp[41];
    sp[192] = w1_d1_c2 * sp[46];
    sp[193] = sp[191] + sp[192];
    sp[194] = w1_d2_c2 * sp[52];
    sp[195] = sp[193] + sp[194];
    sp[196] = sp[190] + sp[195];
    sp[197] = sp[196] * w[7][0];
    sp[198] = sp[185] + 0.5 * sp[197];
    sp[199] = sp[198] * sp[198];
    sp[200] = sp[180] + sp[199];
    sp[201] = w2_d0_c2 * sp[73];
    sp[202] = w2_d1_c2 * sp[78];
    sp[203] = sp[201] + sp[202];
    sp[204] = w2_d2_c2 * sp[84];
    sp[205] = sp[203] + sp[204];
    sp[206] = w0_d0_c2 * sp[73];
    sp[207] = w0_d1_c2 * sp[78];
    sp[208] = sp[206] + sp[207];
    sp[209] = w0_d2_c2 * sp[84];
    sp[210] = sp[208] + sp[209];
    sp[211] = w1_d0_c2 * sp[73];
    sp[212] = w1_d1_c2 * sp[78];
    sp[213] = sp[211] + sp[212];
    sp[214] = w1_d2_c2 * sp[84];
    sp[215] = sp[213] + sp[214];
    sp[216] = sp[210] + sp[215];
    sp[217] = sp[216] * w[7][0];
    sp[218] = sp[205] + 0.5 * sp[217];
    sp[219] = (1 + sp[218]) * (1 + sp[218]);
    sp[220] = sp[200] + sp[219];
    sp[221] = sp[161] + sp[220];
    sp[222] = sp[73] * w[7][0];
    sp[223] = sp[78] * w[7][0];
    sp[224] = sp[84] * w[7][0];
    sp[225] = (1 + sp[119]) * (0.5 * sp[222]);
    sp[226] = (1 + sp[119]) * (0.5 * sp[223]);
    sp[227] = (1 + sp[119]) * (0.5 * sp[224]);
    sp[228] = sp[41] * w[7][0];
    sp[229] = sp[46] * w[7][0];
    sp[230] = sp[52] * w[7][0];
    sp[231] = (1 + sp[218]) * (0.5 * sp[228]);
    sp[232] = (1 + sp[218]) * (0.5 * sp[229]);
    sp[233] = (1 + sp[218]) * (0.5 * sp[230]);
    sp[234] = sp[198] * (0.5 * sp[222]);
    sp[235] = sp[198] * (0.5 * sp[223]);
    sp[236] = sp[198] * (0.5 * sp[224]);
    sp[237] = sp[158] * (0.5 * sp[228]);
    sp[238] = sp[158] * (0.5 * sp[229]);
    sp[239] = sp[158] * (0.5 * sp[230]);
    sp[240] = -1 * sp[237] + sp[225];
    sp[241] = -1 * sp[238] + sp[226];
    sp[242] = -1 * sp[239] + sp[227];
    sp[243] = -1 * sp[234] + sp[231];
    sp[244] = -1 * sp[235] + sp[232];
    sp[245] = -1 * sp[236] + sp[233];
    sp[246] = (1 + sp[36]) * sp[240];
    sp[247] = (1 + sp[36]) * sp[241];
    sp[248] = (1 + sp[36]) * sp[242];
    sp[249] = (1 + sp[36]) * sp[243];
    sp[250] = (1 + sp[36]) * sp[244];
    sp[251] = (1 + sp[36]) * sp[245];
    sp[252] = (1 + sp[218]) * (1 + sp[119]);
    sp[253] = sp[158] * sp[198];
    sp[254] = sp[252] + -1 * sp[253];
    sp[255] = sp[14] * w[7][0];
    sp[256] = sp[18] * w[7][0];
    sp[257] = sp[21] * w[7][0];
    sp[258] = sp[254] * (0.5 * sp[255]);
    sp[259] = sp[254] * (0.5 * sp[256]);
    sp[260] = sp[254] * (0.5 * sp[257]);
    sp[261] = sp[179] * (0.5 * sp[222]);
    sp[262] = sp[179] * (0.5 * sp[223]);
    sp[263] = sp[179] * (0.5 * sp[224]);
    sp[264] = sp[158] * (0.5 * sp[255]);
    sp[265] = sp[158] * (0.5 * sp[256]);
    sp[266] = sp[158] * (0.5 * sp[257]);
    sp[267] = sp[138] * (0.5 * sp[222]);
    sp[268] = sp[138] * (0.5 * sp[223]);
    sp[269] = sp[138] * (0.5 * sp[224]);
    sp[270] = (1 + sp[218]) * (0.5 * sp[255]);
    sp[271] = (1 + sp[218]) * (0.5 * sp[256]);
    sp[272] = (1 + sp[218]) * (0.5 * sp[257]);
    sp[273] = -1 * sp[267] + sp[264];
    sp[274] = -1 * sp[268] + sp[265];
    sp[275] = -1 * sp[269] + sp[266];
    sp[276] = -1 * sp[270] + sp[261];
    sp[277] = -1 * sp[271] + sp[262];
    sp[278] = -1 * sp[272] + sp[263];
    sp[279] = sp[273] * sp[67];
    sp[280] = sp[274] * sp[67];
    sp[281] = sp[275] * sp[67];
    sp[282] = sp[276] * sp[67];
    sp[283] = sp[277] * sp[67];
    sp[284] = sp[278] * sp[67];
    sp[285] = sp[158] * sp[179];
    sp[286] = (1 + sp[218]) * sp[138];
    sp[287] = sp[285] + -1 * sp[286];
    sp[288] = sp[287] * (0.5 * sp[228]);
    sp[289] = sp[287] * (0.5 * sp[229]);
    sp[290] = sp[287] * (0.5 * sp[230]);
    sp[291] = sp[246] + sp[279];
    sp[292] = sp[247] + sp[280];
    sp[293] = sp[248] + sp[281];
    sp[294] = sp[249] + sp[282];
    sp[295] = sp[250] + sp[283];
    sp[296] = sp[251] + sp[284];
    sp[297] = sp[288] + sp[258];
    sp[298] = sp[289] + sp[259];
    sp[299] = sp[260] + sp[290];
    sp[300] = sp[198] * (0.5 * sp[255]);
    sp[301] = sp[198] * (0.5 * sp[256]);
    sp[302] = sp[198] * (0.5 * sp[257]);
    sp[303] = sp[138] * (0.5 * sp[228]);
    sp[304] = sp[138] * (0.5 * sp[229]);
    sp[305] = sp[138] * (0.5 * sp[230]);
    sp[306] = (1 + sp[119]) * (0.5 * sp[255]);
    sp[307] = (1 + sp[119]) * (0.5 * sp[256]);
    sp[308] = (1 + sp[119]) * (0.5 * sp[257]);
    sp[309] = sp[179] * (0.5 * sp[228]);
    sp[310] = sp[179] * (0.5 * sp[229]);
    sp[311] = sp[179] * (0.5 * sp[230]);
    sp[312] = -1 * sp[306] + sp[303];
    sp[313] = -1 * sp[307] + sp[304];
    sp[314] = -1 * sp[308] + sp[305];
    sp[315] = -1 * sp[309] + sp[300];
    sp[316] = -1 * sp[310] + sp[301];
    sp[317] = -1 * sp[311] + sp[302];
    sp[318] = sp[312] * sp[99];
    sp[319] = sp[313] * sp[99];
    sp[320] = sp[314] * sp[99];
    sp[321] = sp[315] * sp[99];
    sp[322] = sp[316] * sp[99];
    sp[323] = sp[317] * sp[99];
    sp[324] = sp[138] * sp[198];
    sp[325] = (1 + sp[119]) * sp[179];
    sp[326] = sp[324] + -1 * sp[325];
    sp[327] = sp[326] * (0.5 * sp[222]);
    sp[328] = sp[326] * (0.5 * sp[223]);
    sp[329] = sp[326] * (0.5 * sp[224]);
    sp[330] = sp[291] + sp[318];
    sp[331] = sp[292] + sp[319];
    sp[332] = sp[293] + sp[320];
    sp[333] = sp[294] + sp[321];
    sp[334] = sp[295] + sp[322];
    sp[335] = sp[296] + sp[323];
    sp[336] = sp[297] + sp[327];
    sp[337] = sp[298] + sp[328];
    sp[338] = sp[299] + sp[329];
    sp[339] = (1 + sp[36]) * sp[254];
    sp[340] = sp[287] * sp[67];
    sp[341] = sp[339] + sp[340];
    sp[342] = sp[326] * sp[99];
    sp[343] = sp[341] + sp[342];
    sp[344] = (1 + sp[36]) * (0.5 * sp[255]);
    sp[345] = (1 + sp[36]) * (0.5 * sp[256]);
    sp[346] = (1 + sp[36]) * (0.5 * sp[257]);
    sp[347] = sp[344] + sp[344];
    sp[348] = sp[345] + sp[345];
    sp[349] = sp[346] + sp[346];
    sp[350] = sp[67] * (0.5 * sp[228]);
    sp[351] = sp[67] * (0.5 * sp[229]);
    sp[352] = sp[67] * (0.5 * sp[230]);
    sp[353] = sp[350] + sp[350];
    sp[354] = sp[351] + sp[351];
    sp[355] = sp[352] + sp[352];
    sp[356] = sp[353] + sp[347];
    sp[357] = sp[354] + sp[348];
    sp[358] = sp[349] + sp[355];
    sp[359] = sp[99] * (0.5 * sp[222]);
    sp[360] = sp[99] * (0.5 * sp[223]);
    sp[361] = sp[99] * (0.5 * sp[224]);
    sp[362] = sp[359] + sp[359];
    sp[363] = sp[360] + sp[360];
    sp[364] = sp[361] + sp[361];
    sp[365] = sp[356] + sp[362];
    sp[366] = sp[357] + sp[363];
    sp[367] = sp[358] + sp[364];
    sp[368] = sp[138] * (0.5 * sp[255]);
    sp[369] = sp[138] * (0.5 * sp[256]);
    sp[370] = sp[138] * (0.5 * sp[257]);
    sp[371] = sp[368] + sp[368];
    sp[372] = sp[369] + sp[369];
    sp[373] = sp[370] + sp[370];
    sp[374] = (1 + sp[119]) * (0.5 * sp[228]);
    sp[375] = (1 + sp[119]) * (0.5 * sp[229]);
    sp[376] = (1 + sp[119]) * (0.5 * sp[230]);
    sp[377] = sp[374] + sp[374];
    sp[378] = sp[375] + sp[375];
    sp[379] = sp[376] + sp[376];
    sp[380] = sp[377] + sp[371];
    sp[381] = sp[378] + sp[372];
    sp[382] = sp[373] + sp[379];
    sp[383] = sp[158] * (0.5 * sp[222]);
    sp[384] = sp[158] * (0.5 * sp[223]);
    sp[385] = sp[158] * (0.5 * sp[224]);
    sp[386] = sp[383] + sp[383];
    sp[387] = sp[384] + sp[384];
    sp[388] = sp[385] + sp[385];
    sp[389] = sp[380] + sp[386];
    sp[390] = sp[381] + sp[387];
    sp[391] = sp[382] + sp[388];
    sp[392] = sp[179] * (0.5 * sp[255]);
    sp[393] = sp[179] * (0.5 * sp[256]);
    sp[394] = sp[179] * (0.5 * sp[257]);
    sp[395] = sp[392] + sp[392];
    sp[396] = sp[393] + sp[393];
    sp[397] = sp[394] + sp[394];
    sp[398] = sp[198] * (0.5 * sp[228]);
    sp[399] = sp[198] * (0.5 * sp[229]);
    sp[400] = sp[198] * (0.5 * sp[230]);
    sp[401] = sp[398] + sp[398];
    sp[402] = sp[399] + sp[399];
    sp[403] = sp[400] + sp[400];
    sp[404] = sp[401] + sp[395];
    sp[405] = sp[402] + sp[396];
    sp[406] = sp[397] + sp[403];
    sp[407] = (1 + sp[218]) * (0.5 * sp[222]);
    sp[408] = (1 + sp[218]) * (0.5 * sp[223]);
    sp[409] = (1 + sp[218]) * (0.5 * sp[224]);
    sp[410] = sp[407] + sp[407];
    sp[411] = sp[408] + sp[408];
    sp[412] = sp[409] + sp[409];
    sp[413] = sp[404] + sp[410];
    sp[414] = sp[405] + sp[411];
    sp[415] = sp[406] + sp[412];
    sp[416] = sp[99] * (0.5 * sp[228]);
    sp[417] = sp[99] * (0.5 * sp[229]);
    sp[418] = sp[99] * (0.5 * sp[230]);
    sp[419] = sp[67] * (0.5 * sp[222]);
    sp[420] = sp[67] * (0.5 * sp[223]);
    sp[421] = sp[67] * (0.5 * sp[224]);
    sp[422] = -1 * sp[419] + sp[416];
    sp[423] = -1 * sp[420] + sp[417];
    sp[424] = -1 * sp[421] + sp[418];
    sp[425] = -1 * sp[231] + sp[234];
    sp[426] = -1 * sp[232] + sp[235];
    sp[427] = -1 * sp[233] + sp[236];
    sp[428] = -1 * sp[416] + sp[419];
    sp[429] = -1 * sp[417] + sp[420];
    sp[430] = -1 * sp[418] + sp[421];
    sp[431] = -1 * sp[225] + sp[237];
    sp[432] = -1 * sp[226] + sp[238];
    sp[433] = -1 * sp[227] + sp[239];
    sp[434] = (1 + sp[36]) * (0.5 * sp[222]);
    sp[435] = (1 + sp[36]) * (0.5 * sp[223]);
    sp[436] = (1 + sp[36]) * (0.5 * sp[224]);
    sp[437] = sp[99] * (0.5 * sp[255]);
    sp[438] = sp[99] * (0.5 * sp[256]);
    sp[439] = sp[99] * (0.5 * sp[257]);
    sp[440] = -1 * sp[437] + sp[434];
    sp[441] = -1 * sp[438] + sp[435];
    sp[442] = -1 * sp[439] + sp[436];
    sp[443] = -1 * sp[261] + sp[270];
    sp[444] = -1 * sp[262] + sp[271];
    sp[445] = -1 * sp[263] + sp[272];
    sp[446] = -1 * sp[434] + sp[437];
    sp[447] = -1 * sp[435] + sp[438];
    sp[448] = -1 * sp[436] + sp[439];
    sp[449] = -1 * sp[264] + sp[267];
    sp[450] = -1 * sp[265] + sp[268];
    sp[451] = -1 * sp[266] + sp[269];
    sp[452] = (1 + sp[119]) * (-1 * (0.5 * sp[255]));
    sp[453] = (1 + sp[119]) * (-1 * (0.5 * sp[256]));
    sp[454] = (1 + sp[119]) * (-1 * (0.5 * sp[257]));
    sp[455] = -1 * sp[179] * (0.5 * sp[228]);
    sp[456] = -1 * sp[179] * (0.5 * sp[229]);
    sp[457] = -1 * sp[179] * (0.5 * sp[230]);
    sp[458] = sp[452] + sp[303];
    sp[459] = sp[453] + sp[304];
    sp[460] = sp[454] + sp[305];
    sp[461] = sp[455] + sp[300];
    sp[462] = sp[456] + sp[301];
    sp[463] = sp[302] + sp[457];
    sp[464] = sp[67] * (0.5 * sp[255]);
    sp[465] = sp[67] * (0.5 * sp[256]);
    sp[466] = sp[67] * (0.5 * sp[257]);
    sp[467] = sp[198] * (-1 * (0.5 * sp[255]));
    sp[468] = sp[198] * (-1 * (0.5 * sp[256]));
    sp[469] = sp[198] * (-1 * (0.5 * sp[257]));
    sp[470] = -1 * (1 + sp[36]) * (0.5 * sp[228]);
    sp[471] = -1 * (1 + sp[36]) * (0.5 * sp[229]);
    sp[472] = -1 * (1 + sp[36]) * (0.5 * sp[230]);
    sp[473] = sp[470] + sp[464];
    sp[474] = sp[471] + sp[465];
    sp[475] = sp[466] + sp[472];
    sp[476] = sp[467] + sp[309];
    sp[477] = sp[468] + sp[310];
    sp[478] = sp[469] + sp[311];
    sp[479] = sp[67] * (-1 * (0.5 * sp[255]));
    sp[480] = sp[67] * (-1 * (0.5 * sp[256]));
    sp[481] = sp[67] * (-1 * (0.5 * sp[257]));
    sp[482] = -1 * sp[138] * (0.5 * sp[228]);
    sp[483] = -1 * sp[138] * (0.5 * sp[229]);
    sp[484] = -1 * sp[138] * (0.5 * sp[230]);
    sp[485] = (1 + sp[36]) * (0.5 * sp[228]);
    sp[486] = (1 + sp[36]) * (0.5 * sp[229]);
    sp[487] = (1 + sp[36]) * (0.5 * sp[230]);
    sp[488] = sp[479] + sp[485];
    sp[489] = sp[480] + sp[486];
    sp[490] = sp[481] + sp[487];
    sp[491] = sp[482] + sp[306];
    sp[492] = sp[483] + sp[307];
    sp[493] = sp[308] + sp[484];
    sp[494] = std::abs(sp[13]);
    alignas(32) double TP0[2] = {};
    alignas(32) double TP1[2] = {};
    alignas(32) double TP2[2] = {};
    alignas(32) double TP3[2] = {};
    alignas(32) double TP4[2] = {};
    alignas(32) double TP5[2] = {};
    alignas(32) double TP6[2] = {};
    alignas(32) double TP7[2] = {};
    alignas(32) double TP8[2] = {};
    alignas(32) double BF0[4][4] = {};
    alignas(32) double TP9[2] = {};
    alignas(32) double TP10[2] = {};
    alignas(32) double TP11[2] = {};
    alignas(32) double TP12[2] = {};
    alignas(32) double TP13[2] = {};
    alignas(32) double TP14[2] = {};
    alignas(32) double TP15[2] = {};
    alignas(32) double TP16[2] = {};
    alignas(32) double TP17[2] = {};
    alignas(32) double TP18[2] = {};
    alignas(32) double TP19[2] = {};
    alignas(32) double TP20[2] = {};
    alignas(32) double TP21[2] = {};
    alignas(32) double TP22[2] = {};
    alignas(32) double TP23[2] = {};
    alignas(32) double TP24[2] = {};
    alignas(32) double TP25[2] = {};
    alignas(32) double TP26[2] = {};
    alignas(32) double TP27[2] = {};
    alignas(32) double TP28[2] = {};
    alignas(32) double TP29[2] = {};
    alignas(32) double TP30[2] = {};
    alignas(32) double TP31[2] = {};
    alignas(32) double TP32[2] = {};
    alignas(32) double TP33[2] = {};
    alignas(32) double TP34[2] = {};
    alignas(32) double TP35[2] = {};
    alignas(32) double TP36[2] = {};
    alignas(32) double TP37[2] = {};
    alignas(32) double TP38[2] = {};
    alignas(32) double TP39[2] = {};
    alignas(32) double TP40[2] = {};
    alignas(32) double TP41[2] = {};
    alignas(32) double TP42[2] = {};
    alignas(32) double TP43[2] = {};
    alignas(32) double TP44[2] = {};
    alignas(32) double TP45[2] = {};
    alignas(32) double TP46[2] = {};
    alignas(32) double TP47[2] = {};
    alignas(32) double TP48[2] = {};
    alignas(32) double TP49[2] = {};
    alignas(32) double TP50[2] = {};
    alignas(32) double TP51[2] = {};
    alignas(32) double TP52[2] = {};
    alignas(32) double TP53[2] = {};
    alignas(32) double TP54[2] = {};
    alignas(32) double TP55[2] = {};
    alignas(32) double TP56[2] = {};
    alignas(32) double TP57[2] = {};
    alignas(32) double TP58[2] = {};
    alignas(32) double TP59[2] = {};
    alignas(32) double TP60[2] = {};
    alignas(32) double TP61[2] = {};
    alignas(32) double TP62[2] = {};
    alignas(32) double TP63[2] = {};
    alignas(32) double TP64[2] = {};
    alignas(32) double TP65[2] = {};
    alignas(32) double TP66[2] = {};
    alignas(32) double TP67[2] = {};
    alignas(32) double TP68[2] = {};
    alignas(32) double TP69[2] = {};
    alignas(32) double TP70[2] = {};
    alignas(32) double TP71[2] = {};
    alignas(32) double TP72[2] = {};
    alignas(32) double TP73[2] = {};
    alignas(32) double TP74[2] = {};
    alignas(32) double TP75[2] = {};
    alignas(32) double TP76[2] = {};
    alignas(32) double TP77[2] = {};
    alignas(32) double TP78[2] = {};
    alignas(32) double TP79[2] = {};
    alignas(32) double TP80[2] = {};
    for (int iq = 0; iq < 5; ++iq)
    {
        // Quadrature loop body setup (num_points=5)
        // Unstructured varying computations for num_points=5
        double w6 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w6 += w[6][ic] * FE34_C0_Q5[0][iq][ic];
        double w5 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w5 += w[5][ic] * FE34_C0_Q5[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w4 += w[4][ic] * FE34_C0_Q5[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w3 += w[3][ic] * FE34_C0_Q5[0][iq][ic];
        alignas(32) double sv5[752];
        sv5[0] = (-2 + sp[221]) * (2 * w6);
        sv5[1] = sv5[0] + w5;
        sv5[2] = sv5[1] * (2 * sp[330]);
        sv5[3] = sv5[1] * (2 * sp[331]);
        sv5[4] = sv5[1] * (2 * sp[332]);
        sv5[5] = sv5[1] * (2 * sp[333]);
        sv5[6] = sv5[1] * (2 * sp[334]);
        sv5[7] = sv5[1] * (2 * sp[335]);
        sv5[8] = sv5[1] * (2 * sp[336]);
        sv5[9] = sv5[1] * (2 * sp[337]);
        sv5[10] = sv5[1] * (2 * sp[338]);
        sv5[11] = sp[413] * (2 * w6);
        sv5[12] = sp[414] * (2 * w6);
        sv5[13] = sp[415] * (2 * w6);
        sv5[14] = sp[389] * (2 * w6);
        sv5[15] = sp[390] * (2 * w6);
        sv5[16] = sp[391] * (2 * w6);
        sv5[17] = sp[365] * (2 * w6);
        sv5[18] = sp[366] * (2 * w6);
        sv5[19] = sp[367] * (2 * w6);
        sv5[20] = 2 * sp[343] * sv5[11];
        sv5[21] = 2 * sp[343] * sv5[12];
        sv5[22] = 2 * sp[343] * sv5[13];
        sv5[23] = 2 * sp[343] * sv5[14];
        sv5[24] = 2 * sp[343] * sv5[15];
        sv5[25] = 2 * sp[343] * sv5[16];
        sv5[26] = 2 * sp[343] * sv5[17];
        sv5[27] = 2 * sp[343] * sv5[18];
        sv5[28] = 2 * sp[343] * sv5[19];
        sv5[29] = sv5[2] + sv5[20];
        sv5[30] = sv5[3] + sv5[21];
        sv5[31] = sv5[4] + sv5[22];
        sv5[32] = sv5[5] + sv5[23];
        sv5[33] = sv5[6] + sv5[24];
        sv5[34] = sv5[7] + sv5[25];
        sv5[35] = sv5[8] + sv5[26];
        sv5[36] = sv5[9] + sv5[27];
        sv5[37] = sv5[10] + sv5[28];
        sv5[38] = (1 + sp[36]) * sv5[29];
        sv5[39] = (1 + sp[36]) * sv5[30];
        sv5[40] = (1 + sp[36]) * sv5[31];
        sv5[41] = (1 + sp[36]) * sv5[32];
        sv5[42] = (1 + sp[36]) * sv5[33];
        sv5[43] = (1 + sp[36]) * sv5[34];
        sv5[44] = (1 + sp[36]) * sv5[35];
        sv5[45] = (1 + sp[36]) * sv5[36];
        sv5[46] = (1 + sp[36]) * sv5[37];
        sv5[47] = sv5[1] * (2 * sp[343]);
        sv5[48] = sv5[47] * (0.5 * sp[255]);
        sv5[49] = sv5[47] * (0.5 * sp[256]);
        sv5[50] = sv5[47] * (0.5 * sp[257]);
        sv5[51] = sv5[44] + sv5[48];
        sv5[52] = sv5[45] + sv5[49];
        sv5[53] = sv5[46] + sv5[50];
        sv5[54] = sp[240] * (-1 * w4);
        sv5[55] = sp[241] * (-1 * w4);
        sv5[56] = sp[242] * (-1 * w4);
        sv5[57] = sp[243] * (-1 * w4);
        sv5[58] = sp[244] * (-1 * w4);
        sv5[59] = sp[245] * (-1 * w4);
        sv5[60] = sv5[38] + sv5[54];
        sv5[61] = sv5[39] + sv5[55];
        sv5[62] = sv5[40] + sv5[56];
        sv5[63] = sv5[41] + sv5[57];
        sv5[64] = sv5[42] + sv5[58];
        sv5[65] = sv5[43] + sv5[59];
        sv5[66] = sv5[60] * sp[14];
        sv5[67] = sv5[60] * sp[18];
        sv5[68] = sv5[60] * sp[21];
        sv5[69] = sv5[61] * sp[14];
        sv5[70] = sv5[61] * sp[18];
        sv5[71] = sv5[61] * sp[21];
        sv5[72] = sv5[62] * sp[14];
        sv5[73] = sv5[62] * sp[18];
        sv5[74] = sv5[62] * sp[21];
        sv5[75] = sv5[63] * sp[14];
        sv5[76] = sv5[63] * sp[18];
        sv5[77] = sv5[63] * sp[21];
        sv5[78] = sv5[64] * sp[14];
        sv5[79] = sv5[64] * sp[18];
        sv5[80] = sv5[64] * sp[21];
        sv5[81] = sv5[65] * sp[14];
        sv5[82] = sv5[65] * sp[18];
        sv5[83] = sv5[65] * sp[21];
        sv5[84] = sv5[51] * sp[14];
        sv5[85] = sv5[51] * sp[18];
        sv5[86] = sv5[51] * sp[21];
        sv5[87] = sv5[52] * sp[14];
        sv5[88] = sv5[52] * sp[18];
        sv5[89] = sv5[52] * sp[21];
        sv5[90] = sv5[53] * sp[14];
        sv5[91] = sv5[53] * sp[18];
        sv5[92] = sv5[53] * sp[21];
        sv5[93] = sv5[29] * sp[138];
        sv5[94] = sv5[30] * sp[138];
        sv5[95] = sv5[31] * sp[138];
        sv5[96] = sv5[32] * sp[138];
        sv5[97] = sv5[33] * sp[138];
        sv5[98] = sv5[34] * sp[138];
        sv5[99] = sv5[35] * sp[138];
        sv5[100] = sv5[36] * sp[138];
        sv5[101] = sv5[37] * sp[138];
        sv5[102] = sv5[96] + sv5[48];
        sv5[103] = sv5[97] + sv5[49];
        sv5[104] = sv5[98] + sv5[50];
        sv5[105] = sp[422] * (-1 * w4);
        sv5[106] = sp[423] * (-1 * w4);
        sv5[107] = sp[424] * (-1 * w4);
        sv5[108] = sp[425] * (-1 * w4);
        sv5[109] = sp[426] * (-1 * w4);
        sv5[110] = sp[427] * (-1 * w4);
        sv5[111] = sv5[93] + sv5[105];
        sv5[112] = sv5[94] + sv5[106];
        sv5[113] = sv5[95] + sv5[107];
        sv5[114] = sv5[99] + sv5[108];
        sv5[115] = sv5[100] + sv5[109];
        sv5[116] = sv5[101] + sv5[110];
        sv5[117] = sv5[111] * sp[14];
        sv5[118] = sv5[111] * sp[18];
        sv5[119] = sv5[111] * sp[21];
        sv5[120] = sv5[112] * sp[14];
        sv5[121] = sv5[112] * sp[18];
        sv5[122] = sv5[112] * sp[21];
        sv5[123] = sv5[113] * sp[14];
        sv5[124] = sv5[113] * sp[18];
        sv5[125] = sv5[113] * sp[21];
        sv5[126] = sv5[102] * sp[14];
        sv5[127] = sv5[102] * sp[18];
        sv5[128] = sv5[102] * sp[21];
        sv5[129] = sv5[103] * sp[14];
        sv5[130] = sv5[103] * sp[18];
        sv5[131] = sv5[103] * sp[21];
        sv5[132] = sv5[104] * sp[14];
        sv5[133] = sv5[104] * sp[18];
        sv5[134] = sv5[104] * sp[21];
        sv5[135] = sv5[114] * sp[14];
        sv5[136] = sv5[114] * sp[18];
        sv5[137] = sv5[114] * sp[21];
        sv5[138] = sv5[115] * sp[14];
        sv5[139] = sv5[115] * sp[18];
        sv5[140] = sv5[115] * sp[21];
        sv5[141] = sv5[116] * sp[14];
        sv5[142] = sv5[116] * sp[18];
        sv5[143] = sv5[116] * sp[21];
        sv5[144] = sv5[29] * sp[179];
        sv5[145] = sv5[30] * sp[179];
        sv5[146] = sv5[31] * sp[179];
        sv5[147] = sv5[32] * sp[179];
        sv5[148] = sv5[33] * sp[179];
        sv5[149] = sv5[34] * sp[179];
        sv5[150] = sv5[35] * sp[179];
        sv5[151] = sv5[36] * sp[179];
        sv5[152] = sv5[37] * sp[179];
        sv5[153] = sv5[144] + sv5[48];
        sv5[154] = sv5[145] + sv5[49];
        sv5[155] = sv5[146] + sv5[50];
        sv5[156] = sp[428] * (-1 * w4);
        sv5[157] = sp[429] * (-1 * w4);
        sv5[158] = sp[430] * (-1 * w4);
        sv5[159] = sp[431] * (-1 * w4);
        sv5[160] = sp[432] * (-1 * w4);
        sv5[161] = sp[433] * (-1 * w4);
        sv5[162] = sv5[147] + sv5[156];
        sv5[163] = sv5[148] + sv5[157];
        sv5[164] = sv5[149] + sv5[158];
        sv5[165] = sv5[150] + sv5[159];
        sv5[166] = sv5[151] + sv5[160];
        sv5[167] = sv5[152] + sv5[161];
        sv5[168] = sv5[153] * sp[14];
        sv5[169] = sv5[153] * sp[18];
        sv5[170] = sv5[153] * sp[21];
        sv5[171] = sv5[154] * sp[14];
        sv5[172] = sv5[154] * sp[18];
        sv5[173] = sv5[154] * sp[21];
        sv5[174] = sv5[155] * sp[14];
        sv5[175] = sv5[155] * sp[18];
        sv5[176] = sv5[155] * sp[21];
        sv5[177] = sv5[162] * sp[14];
        sv5[178] = sv5[162] * sp[18];
        sv5[179] = sv5[162] * sp[21];
        sv5[180] = sv5[163] * sp[14];
        sv5[181] = sv5[163] * sp[18];
        sv5[182] = sv5[163] * sp[21];
        sv5[183] = sv5[164] * sp[14];
        sv5[184] = sv5[164] * sp[18];
        sv5[185] = sv5[164] * sp[21];
        sv5[186] = sv5[165] * sp[14];
        sv5[187] = sv5[165] * sp[18];
        sv5[188] = sv5[165] * sp[21];
        sv5[189] = sv5[166] * sp[14];
        sv5[190] = sv5[166] * sp[18];
        sv5[191] = sv5[166] * sp[21];
        sv5[192] = sv5[167] * sp[14];
        sv5[193] = sv5[167] * sp[18];
        sv5[194] = sv5[167] * sp[21];
        sv5[195] = sv5[29] * sp[67];
        sv5[196] = sv5[30] * sp[67];
        sv5[197] = sv5[31] * sp[67];
        sv5[198] = sv5[32] * sp[67];
        sv5[199] = sv5[33] * sp[67];
        sv5[200] = sv5[34] * sp[67];
        sv5[201] = sv5[35] * sp[67];
        sv5[202] = sv5[36] * sp[67];
        sv5[203] = sv5[37] * sp[67];
        sv5[204] = sv5[47] * (0.5 * sp[228]);
        sv5[205] = sv5[47] * (0.5 * sp[229]);
        sv5[206] = sv5[47] * (0.5 * sp[230]);
        sv5[207] = sv5[201] + sv5[204];
        sv5[208] = sv5[202] + sv5[205];
        sv5[209] = sv5[203] + sv5[206];
        sv5[210] = sp[273] * (-1 * w4);
        sv5[211] = sp[274] * (-1 * w4);
        sv5[212] = sp[275] * (-1 * w4);
        sv5[213] = sp[276] * (-1 * w4);
        sv5[214] = sp[277] * (-1 * w4);
        sv5[215] = sp[278] * (-1 * w4);
        sv5[216] = sv5[195] + sv5[210];
        sv5[217] = sv5[196] + sv5[211];
        sv5[218] = sv5[197] + sv5[212];
        sv5[219] = sv5[198] + sv5[213];
        sv5[220] = sv5[199] + sv5[214];
        sv5[221] = sv5[200] + sv5[215];
        sv5[222] = sv5[216] * sp[41];
        sv5[223] = sv5[216] * sp[46];
        sv5[224] = sv5[216] * sp[52];
        sv5[225] = sv5[217] * sp[41];
        sv5[226] = sv5[217] * sp[46];
        sv5[227] = sv5[217] * sp[52];
        sv5[228] = sv5[218] * sp[41];
        sv5[229] = sv5[218] * sp[46];
        sv5[230] = sv5[218] * sp[52];
        sv5[231] = sv5[219] * sp[41];
        sv5[232] = sv5[219] * sp[46];
        sv5[233] = sv5[219] * sp[52];
        sv5[234] = sv5[220] * sp[41];
        sv5[235] = sv5[220] * sp[46];
        sv5[236] = sv5[220] * sp[52];
        sv5[237] = sv5[221] * sp[41];
        sv5[238] = sv5[221] * sp[46];
        sv5[239] = sv5[221] * sp[52];
        sv5[240] = sv5[207] * sp[41];
        sv5[241] = sv5[207] * sp[46];
        sv5[242] = sv5[207] * sp[52];
        sv5[243] = sv5[208] * sp[41];
        sv5[244] = sv5[208] * sp[46];
        sv5[245] = sv5[208] * sp[52];
        sv5[246] = sv5[209] * sp[41];
        sv5[247] = sv5[209] * sp[46];
        sv5[248] = sv5[209] * sp[52];
        sv5[249] = (1 + sp[119]) * sv5[29];
        sv5[250] = (1 + sp[119]) * sv5[30];
        sv5[251] = (1 + sp[119]) * sv5[31];
        sv5[252] = (1 + sp[119]) * sv5[32];
        sv5[253] = (1 + sp[119]) * sv5[33];
        sv5[254] = (1 + sp[119]) * sv5[34];
        sv5[255] = (1 + sp[119]) * sv5[35];
        sv5[256] = (1 + sp[119]) * sv5[36];
        sv5[257] = (1 + sp[119]) * sv5[37];
        sv5[258] = sv5[252] + sv5[204];
        sv5[259] = sv5[253] + sv5[205];
        sv5[260] = sv5[254] + sv5[206];
        sv5[261] = sp[440] * (-1 * w4);
        sv5[262] = sp[441] * (-1 * w4);
        sv5[263] = sp[442] * (-1 * w4);
        sv5[264] = sp[443] * (-1 * w4);
        sv5[265] = sp[444] * (-1 * w4);
        sv5[266] = sp[445] * (-1 * w4);
        sv5[267] = sv5[249] + sv5[261];
        sv5[268] = sv5[250] + sv5[262];
        sv5[269] = sv5[251] + sv5[263];
        sv5[270] = sv5[255] + sv5[264];
        sv5[271] = sv5[256] + sv5[265];
        sv5[272] = sv5[257] + sv5[266];
        sv5[273] = sv5[267] * sp[41];
        sv5[274] = sv5[267] * sp[46];
        sv5[275] = sv5[267] * sp[52];
        sv5[276] = sv5[268] * sp[41];
        sv5[277] = sv5[268] * sp[46];
        sv5[278] = sv5[268] * sp[52];
        sv5[279] = sv5[269] * sp[41];
        sv5[280] = sv5[269] * sp[46];
        sv5[281] = sv5[269] * sp[52];
        sv5[282] = sv5[258] * sp[41];
        sv5[283] = sv5[258] * sp[46];
        sv5[284] = sv5[258] * sp[52];
        sv5[285] = sv5[259] * sp[41];
        sv5[286] = sv5[259] * sp[46];
        sv5[287] = sv5[259] * sp[52];
        sv5[288] = sv5[260] * sp[41];
        sv5[289] = sv5[260] * sp[46];
        sv5[290] = sv5[260] * sp[52];
        sv5[291] = sv5[270] * sp[41];
        sv5[292] = sv5[270] * sp[46];
        sv5[293] = sv5[270] * sp[52];
        sv5[294] = sv5[271] * sp[41];
        sv5[295] = sv5[271] * sp[46];
        sv5[296] = sv5[271] * sp[52];
        sv5[297] = sv5[272] * sp[41];
        sv5[298] = sv5[272] * sp[46];
        sv5[299] = sv5[272] * sp[52];
        sv5[300] = sv5[29] * sp[198];
        sv5[301] = sv5[30] * sp[198];
        sv5[302] = sv5[31] * sp[198];
        sv5[303] = sv5[32] * sp[198];
        sv5[304] = sv5[33] * sp[198];
        sv5[305] = sv5[34] * sp[198];
        sv5[306] = sv5[35] * sp[198];
        sv5[307] = sv5[36] * sp[198];
        sv5[308] = sv5[37] * sp[198];
        sv5[309] = sv5[300] + sv5[204];
        sv5[310] = sv5[301] + sv5[205];
        sv5[311] = sv5[302] + sv5[206];
        sv5[312] = sp[446] * (-1 * w4);
        sv5[313] = sp[447] * (-1 * w4);
        sv5[314] = sp[448] * (-1 * w4);
        sv5[315] = sp[449] * (-1 * w4);
        sv5[316] = sp[450] * (-1 * w4);
        sv5[317] = sp[451] * (-1 * w4);
        sv5[318] = sv5[303] + sv5[312];
        sv5[319] = sv5[304] + sv5[313];
        sv5[320] = sv5[305] + sv5[314];
        sv5[321] = sv5[306] + sv5[315];
        sv5[322] = sv5[307] + sv5[316];
        sv5[323] = sv5[308] + sv5[317];
        sv5[324] = sv5[309] * sp[41];
        sv5[325] = sv5[309] * sp[46];
        sv5[326] = sv5[309] * sp[52];
        sv5[327] = sv5[310] * sp[41];
        sv5[328] = sv5[310] * sp[46];
        sv5[329] = sv5[310] * sp[52];
        sv5[330] = sv5[311] * sp[41];
        sv5[331] = sv5[311] * sp[46];
        sv5[332] = sv5[311] * sp[52];
        sv5[333] = sv5[318] * sp[41];
        sv5[334] = sv5[318] * sp[46];
        sv5[335] = sv5[318] * sp[52];
        sv5[336] = sv5[319] * sp[41];
        sv5[337] = sv5[319] * sp[46];
        sv5[338] = sv5[319] * sp[52];
        sv5[339] = sv5[320] * sp[41];
        sv5[340] = sv5[320] * sp[46];
        sv5[341] = sv5[320] * sp[52];
        sv5[342] = sv5[321] * sp[41];
        sv5[343] = sv5[321] * sp[46];
        sv5[344] = sv5[321] * sp[52];
        sv5[345] = sv5[322] * sp[41];
        sv5[346] = sv5[322] * sp[46];
        sv5[347] = sv5[322] * sp[52];
        sv5[348] = sv5[323] * sp[41];
        sv5[349] = sv5[323] * sp[46];
        sv5[350] = sv5[323] * sp[52];
        sv5[351] = sv5[222] + sv5[66];
        sv5[352] = sv5[223] + sv5[67];
        sv5[353] = sv5[68] + sv5[224];
        sv5[354] = sv5[273] + sv5[117];
        sv5[355] = sv5[274] + sv5[118];
        sv5[356] = sv5[119] + sv5[275];
        sv5[357] = sv5[324] + sv5[168];
        sv5[358] = sv5[325] + sv5[169];
        sv5[359] = sv5[170] + sv5[326];
        sv5[360] = sv5[225] + sv5[69];
        sv5[361] = sv5[226] + sv5[70];
        sv5[362] = sv5[71] + sv5[227];
        sv5[363] = sv5[276] + sv5[120];
        sv5[364] = sv5[277] + sv5[121];
        sv5[365] = sv5[122] + sv5[278];
        sv5[366] = sv5[327] + sv5[171];
        sv5[367] = sv5[328] + sv5[172];
        sv5[368] = sv5[173] + sv5[329];
        sv5[369] = sv5[228] + sv5[72];
        sv5[370] = sv5[229] + sv5[73];
        sv5[371] = sv5[74] + sv5[230];
        sv5[372] = sv5[279] + sv5[123];
        sv5[373] = sv5[280] + sv5[124];
        sv5[374] = sv5[125] + sv5[281];
        sv5[375] = sv5[330] + sv5[174];
        sv5[376] = sv5[331] + sv5[175];
        sv5[377] = sv5[176] + sv5[332];
        sv5[378] = sv5[231] + sv5[75];
        sv5[379] = sv5[232] + sv5[76];
        sv5[380] = sv5[77] + sv5[233];
        sv5[381] = sv5[282] + sv5[126];
        sv5[382] = sv5[283] + sv5[127];
        sv5[383] = sv5[128] + sv5[284];
        sv5[384] = sv5[333] + sv5[177];
        sv5[385] = sv5[334] + sv5[178];
        sv5[386] = sv5[179] + sv5[335];
        sv5[387] = sv5[234] + sv5[78];
        sv5[388] = sv5[235] + sv5[79];
        sv5[389] = sv5[80] + sv5[236];
        sv5[390] = sv5[285] + sv5[129];
        sv5[391] = sv5[286] + sv5[130];
        sv5[392] = sv5[131] + sv5[287];
        sv5[393] = sv5[336] + sv5[180];
        sv5[394] = sv5[337] + sv5[181];
        sv5[395] = sv5[182] + sv5[338];
        sv5[396] = sv5[237] + sv5[81];
        sv5[397] = sv5[238] + sv5[82];
        sv5[398] = sv5[83] + sv5[239];
        sv5[399] = sv5[288] + sv5[132];
        sv5[400] = sv5[289] + sv5[133];
        sv5[401] = sv5[134] + sv5[290];
        sv5[402] = sv5[339] + sv5[183];
        sv5[403] = sv5[340] + sv5[184];
        sv5[404] = sv5[185] + sv5[341];
        sv5[405] = sv5[240] + sv5[84];
        sv5[406] = sv5[241] + sv5[85];
        sv5[407] = sv5[86] + sv5[242];
        sv5[408] = sv5[291] + sv5[135];
        sv5[409] = sv5[292] + sv5[136];
        sv5[410] = sv5[137] + sv5[293];
        sv5[411] = sv5[342] + sv5[186];
        sv5[412] = sv5[343] + sv5[187];
        sv5[413] = sv5[188] + sv5[344];
        sv5[414] = sv5[243] + sv5[87];
        sv5[415] = sv5[244] + sv5[88];
        sv5[416] = sv5[89] + sv5[245];
        sv5[417] = sv5[294] + sv5[138];
        sv5[418] = sv5[295] + sv5[139];
        sv5[419] = sv5[140] + sv5[296];
        sv5[420] = sv5[345] + sv5[189];
        sv5[421] = sv5[346] + sv5[190];
        sv5[422] = sv5[191] + sv5[347];
        sv5[423] = sv5[246] + sv5[90];
        sv5[424] = sv5[247] + sv5[91];
        sv5[425] = sv5[92] + sv5[248];
        sv5[426] = sv5[297] + sv5[141];
        sv5[427] = sv5[298] + sv5[142];
        sv5[428] = sv5[143] + sv5[299];
        sv5[429] = sv5[348] + sv5[192];
        sv5[430] = sv5[349] + sv5[193];
        sv5[431] = sv5[194] + sv5[350];
        sv5[432] = sv5[29] * sp[99];
        sv5[433] = sv5[30] * sp[99];
        sv5[434] = sv5[31] * sp[99];
        sv5[435] = sv5[32] * sp[99];
        sv5[436] = sv5[33] * sp[99];
        sv5[437] = sv5[34] * sp[99];
        sv5[438] = sv5[35] * sp[99];
        sv5[439] = sv5[36] * sp[99];
        sv5[440] = sv5[37] * sp[99];
        sv5[441] = sv5[47] * (0.5 * sp[222]);
        sv5[442] = sv5[47] * (0.5 * sp[223]);
        sv5[443] = sv5[47] * (0.5 * sp[224]);
        sv5[444] = sv5[438] + sv5[441];
        sv5[445] = sv5[439] + sv5[442];
        sv5[446] = sv5[440] + sv5[443];
        sv5[447] = sp[458] * (-1 * w4);
        sv5[448] = sp[459] * (-1 * w4);
        sv5[449] = sp[460] * (-1 * w4);
        sv5[450] = sp[461] * (-1 * w4);
        sv5[451] = sp[462] * (-1 * w4);
        sv5[452] = sp[463] * (-1 * w4);
        sv5[453] = sv5[432] + sv5[447];
        sv5[454] = sv5[433] + sv5[448];
        sv5[455] = sv5[434] + sv5[449];
        sv5[456] = sv5[435] + sv5[450];
        sv5[457] = sv5[436] + sv5[451];
        sv5[458] = sv5[437] + sv5[452];
        sv5[459] = sv5[453] * sp[73];
        sv5[460] = sv5[453] * sp[78];
        sv5[461] = sv5[453] * sp[84];
        sv5[462] = sv5[454] * sp[73];
        sv5[463] = sv5[454] * sp[78];
        sv5[464] = sv5[454] * sp[84];
        sv5[465] = sv5[455] * sp[73];
        sv5[466] = sv5[455] * sp[78];
        sv5[467] = sv5[455] * sp[84];
        sv5[468] = sv5[456] * sp[73];
        sv5[469] = sv5[456] * sp[78];
        sv5[470] = sv5[456] * sp[84];
        sv5[471] = sv5[457] * sp[73];
        sv5[472] = sv5[457] * sp[78];
        sv5[473] = sv5[457] * sp[84];
        sv5[474] = sv5[458] * sp[73];
        sv5[475] = sv5[458] * sp[78];
        sv5[476] = sv5[458] * sp[84];
        sv5[477] = sv5[444] * sp[73];
        sv5[478] = sv5[444] * sp[78];
        sv5[479] = sv5[444] * sp[84];
        sv5[480] = sv5[445] * sp[73];
        sv5[481] = sv5[445] * sp[78];
        sv5[482] = sv5[445] * sp[84];
        sv5[483] = sv5[446] * sp[73];
        sv5[484] = sv5[446] * sp[78];
        sv5[485] = sv5[446] * sp[84];
        sv5[486] = sv5[29] * sp[158];
        sv5[487] = sv5[30] * sp[158];
        sv5[488] = sv5[31] * sp[158];
        sv5[489] = sv5[32] * sp[158];
        sv5[490] = sv5[33] * sp[158];
        sv5[491] = sv5[34] * sp[158];
        sv5[492] = sv5[35] * sp[158];
        sv5[493] = sv5[36] * sp[158];
        sv5[494] = sv5[37] * sp[158];
        sv5[495] = sv5[489] + sv5[441];
        sv5[496] = sv5[490] + sv5[442];
        sv5[497] = sv5[491] + sv5[443];
        sv5[498] = sp[473] * (-1 * w4);
        sv5[499] = sp[474] * (-1 * w4);
        sv5[500] = sp[475] * (-1 * w4);
        sv5[501] = sp[476] * (-1 * w4);
        sv5[502] = sp[477] * (-1 * w4);
        sv5[503] = sp[478] * (-1 * w4);
        sv5[504] = sv5[486] + sv5[498];
        sv5[505] = sv5[487] + sv5[499];
        sv5[506] = sv5[488] + sv5[500];
        sv5[507] = sv5[492] + sv5[501];
        sv5[508] = sv5[493] + sv5[502];
        sv5[509] = sv5[494] + sv5[503];
        sv5[510] = sv5[504] * sp[73];
        sv5[511] = sv5[504] * sp[78];
        sv5[512] = sv5[504] * sp[84];
        sv5[513] = sv5[505] * sp[73];
        sv5[514] = sv5[505] * sp[78];
        sv5[515] = sv5[505] * sp[84];
        sv5[516] = sv5[506] * sp[73];
        sv5[517] = sv5[506] * sp[78];
        sv5[518] = sv5[506] * sp[84];
        sv5[519] = sv5[495] * sp[73];
        sv5[520] = sv5[495] * sp[78];
        sv5[521] = sv5[495] * sp[84];
        sv5[522] = sv5[496] * sp[73];
        sv5[523] = sv5[496] * sp[78];
        sv5[524] = sv5[496] * sp[84];
        sv5[525] = sv5[497] * sp[73];
        sv5[526] = sv5[497] * sp[78];
        sv5[527] = sv5[497] * sp[84];
        sv5[528] = sv5[507] * sp[73];
        sv5[529] = sv5[507] * sp[78];
        sv5[530] = sv5[507] * sp[84];
        sv5[531] = sv5[508] * sp[73];
        sv5[532] = sv5[508] * sp[78];
        sv5[533] = sv5[508] * sp[84];
        sv5[534] = sv5[509] * sp[73];
        sv5[535] = sv5[509] * sp[78];
        sv5[536] = sv5[509] * sp[84];
        sv5[537] = (1 + sp[218]) * sv5[29];
        sv5[538] = (1 + sp[218]) * sv5[30];
        sv5[539] = (1 + sp[218]) * sv5[31];
        sv5[540] = (1 + sp[218]) * sv5[32];
        sv5[541] = (1 + sp[218]) * sv5[33];
        sv5[542] = (1 + sp[218]) * sv5[34];
        sv5[543] = (1 + sp[218]) * sv5[35];
        sv5[544] = (1 + sp[218]) * sv5[36];
        sv5[545] = (1 + sp[218]) * sv5[37];
        sv5[546] = sv5[537] + sv5[441];
        sv5[547] = sv5[538] + sv5[442];
        sv5[548] = sv5[539] + sv5[443];
        sv5[549] = sp[488] * (-1 * w4);
        sv5[550] = sp[489] * (-1 * w4);
        sv5[551] = sp[490] * (-1 * w4);
        sv5[552] = sp[491] * (-1 * w4);
        sv5[553] = sp[492] * (-1 * w4);
        sv5[554] = sp[493] * (-1 * w4);
        sv5[555] = sv5[540] + sv5[549];
        sv5[556] = sv5[541] + sv5[550];
        sv5[557] = sv5[542] + sv5[551];
        sv5[558] = sv5[543] + sv5[552];
        sv5[559] = sv5[544] + sv5[553];
        sv5[560] = sv5[545] + sv5[554];
        sv5[561] = sv5[546] * sp[73];
        sv5[562] = sv5[546] * sp[78];
        sv5[563] = sv5[546] * sp[84];
        sv5[564] = sv5[547] * sp[73];
        sv5[565] = sv5[547] * sp[78];
        sv5[566] = sv5[547] * sp[84];
        sv5[567] = sv5[548] * sp[73];
        sv5[568] = sv5[548] * sp[78];
        sv5[569] = sv5[548] * sp[84];
        sv5[570] = sv5[555] * sp[73];
        sv5[571] = sv5[555] * sp[78];
        sv5[572] = sv5[555] * sp[84];
        sv5[573] = sv5[556] * sp[73];
        sv5[574] = sv5[556] * sp[78];
        sv5[575] = sv5[556] * sp[84];
        sv5[576] = sv5[557] * sp[73];
        sv5[577] = sv5[557] * sp[78];
        sv5[578] = sv5[557] * sp[84];
        sv5[579] = sv5[558] * sp[73];
        sv5[580] = sv5[558] * sp[78];
        sv5[581] = sv5[558] * sp[84];
        sv5[582] = sv5[559] * sp[73];
        sv5[583] = sv5[559] * sp[78];
        sv5[584] = sv5[559] * sp[84];
        sv5[585] = sv5[560] * sp[73];
        sv5[586] = sv5[560] * sp[78];
        sv5[587] = sv5[560] * sp[84];
        sv5[588] = sv5[351] + sv5[459];
        sv5[589] = sv5[352] + sv5[460];
        sv5[590] = sv5[353] + sv5[461];
        sv5[591] = sv5[354] + sv5[510];
        sv5[592] = sv5[355] + sv5[511];
        sv5[593] = sv5[356] + sv5[512];
        sv5[594] = sv5[357] + sv5[561];
        sv5[595] = sv5[358] + sv5[562];
        sv5[596] = sv5[359] + sv5[563];
        sv5[597] = sv5[360] + sv5[462];
        sv5[598] = sv5[361] + sv5[463];
        sv5[599] = sv5[362] + sv5[464];
        sv5[600] = sv5[363] + sv5[513];
        sv5[601] = sv5[364] + sv5[514];
        sv5[602] = sv5[365] + sv5[515];
        sv5[603] = sv5[366] + sv5[564];
        sv5[604] = sv5[367] + sv5[565];
        sv5[605] = sv5[368] + sv5[566];
        sv5[606] = sv5[369] + sv5[465];
        sv5[607] = sv5[370] + sv5[466];
        sv5[608] = sv5[371] + sv5[467];
        sv5[609] = sv5[372] + sv5[516];
        sv5[610] = sv5[373] + sv5[517];
        sv5[611] = sv5[374] + sv5[518];
        sv5[612] = sv5[375] + sv5[567];
        sv5[613] = sv5[376] + sv5[568];
        sv5[614] = sv5[377] + sv5[569];
        sv5[615] = sv5[378] + sv5[468];
        sv5[616] = sv5[379] + sv5[469];
        sv5[617] = sv5[380] + sv5[470];
        sv5[618] = sv5[381] + sv5[519];
        sv5[619] = sv5[382] + sv5[520];
        sv5[620] = sv5[383] + sv5[521];
        sv5[621] = sv5[384] + sv5[570];
        sv5[622] = sv5[385] + sv5[571];
        sv5[623] = sv5[386] + sv5[572];
        sv5[624] = sv5[387] + sv5[471];
        sv5[625] = sv5[388] + sv5[472];
        sv5[626] = sv5[389] + sv5[473];
        sv5[627] = sv5[390] + sv5[522];
        sv5[628] = sv5[391] + sv5[523];
        sv5[629] = sv5[392] + sv5[524];
        sv5[630] = sv5[393] + sv5[573];
        sv5[631] = sv5[394] + sv5[574];
        sv5[632] = sv5[395] + sv5[575];
        sv5[633] = sv5[396] + sv5[474];
        sv5[634] = sv5[397] + sv5[475];
        sv5[635] = sv5[398] + sv5[476];
        sv5[636] = sv5[399] + sv5[525];
        sv5[637] = sv5[400] + sv5[526];
        sv5[638] = sv5[401] + sv5[527];
        sv5[639] = sv5[402] + sv5[576];
        sv5[640] = sv5[403] + sv5[577];
        sv5[641] = sv5[404] + sv5[578];
        sv5[642] = sv5[405] + sv5[477];
        sv5[643] = sv5[406] + sv5[478];
        sv5[644] = sv5[407] + sv5[479];
        sv5[645] = sv5[408] + sv5[528];
        sv5[646] = sv5[409] + sv5[529];
        sv5[647] = sv5[410] + sv5[530];
        sv5[648] = sv5[411] + sv5[579];
        sv5[649] = sv5[412] + sv5[580];
        sv5[650] = sv5[413] + sv5[581];
        sv5[651] = sv5[414] + sv5[480];
        sv5[652] = sv5[415] + sv5[481];
        sv5[653] = sv5[416] + sv5[482];
        sv5[654] = sv5[417] + sv5[531];
        sv5[655] = sv5[418] + sv5[532];
        sv5[656] = sv5[419] + sv5[533];
        sv5[657] = sv5[420] + sv5[582];
        sv5[658] = sv5[421] + sv5[583];
        sv5[659] = sv5[422] + sv5[584];
        sv5[660] = sv5[423] + sv5[483];
        sv5[661] = sv5[424] + sv5[484];
        sv5[662] = sv5[425] + sv5[485];
        sv5[663] = sv5[426] + sv5[534];
        sv5[664] = sv5[427] + sv5[535];
        sv5[665] = sv5[428] + sv5[536];
        sv5[666] = sv5[429] + sv5[585];
        sv5[667] = sv5[430] + sv5[586];
        sv5[668] = sv5[431] + sv5[587];
        sv5[669] = 1.0 / w[7][0] * w3;
        sv5[670] = sv5[588] * sp[494];
        sv5[671] = sv5[589] * sp[494];
        sv5[672] = sv5[590] * sp[494];
        sv5[673] = sv5[591] * sp[494];
        sv5[674] = sv5[592] * sp[494];
        sv5[675] = sv5[593] * sp[494];
        sv5[676] = sv5[594] * sp[494];
        sv5[677] = sv5[595] * sp[494];
        sv5[678] = sv5[596] * sp[494];
        sv5[679] = sv5[597] * sp[494];
        sv5[680] = sv5[598] * sp[494];
        sv5[681] = sv5[599] * sp[494];
        sv5[682] = sv5[600] * sp[494];
        sv5[683] = sv5[601] * sp[494];
        sv5[684] = sv5[602] * sp[494];
        sv5[685] = sv5[603] * sp[494];
        sv5[686] = sv5[604] * sp[494];
        sv5[687] = sv5[605] * sp[494];
        sv5[688] = sv5[606] * sp[494];
        sv5[689] = sv5[607] * sp[494];
        sv5[690] = sv5[608] * sp[494];
        sv5[691] = sv5[609] * sp[494];
        sv5[692] = sv5[610] * sp[494];
        sv5[693] = sv5[611] * sp[494];
        sv5[694] = sv5[612] * sp[494];
        sv5[695] = sv5[613] * sp[494];
        sv5[696] = sv5[614] * sp[494];
        sv5[697] = sv5[615] * sp[494];
        sv5[698] = sv5[616] * sp[494];
        sv5[699] = sv5[617] * sp[494];
        sv5[700] = sv5[618] * sp[494];
        sv5[701] = sv5[619] * sp[494];
        sv5[702] = sv5[620] * sp[494];
        sv5[703] = sv5[621] * sp[494];
        sv5[704] = sv5[622] * sp[494];
        sv5[705] = sv5[623] * sp[494];
        sv5[706] = sv5[624] * sp[494];
        sv5[707] = sv5[625] * sp[494];
        sv5[708] = sv5[626] * sp[494];
        sv5[709] = sv5[627] * sp[494];
        sv5[710] = sv5[628] * sp[494];
        sv5[711] = sv5[629] * sp[494];
        sv5[712] = sv5[630] * sp[494];
        sv5[713] = sv5[631] * sp[494];
        sv5[714] = sv5[632] * sp[494];
        sv5[715] = sv5[633] * sp[494];
        sv5[716] = sv5[634] * sp[494];
        sv5[717] = sv5[635] * sp[494];
        sv5[718] = sv5[636] * sp[494];
        sv5[719] = sv5[637] * sp[494];
        sv5[720] = sv5[638] * sp[494];
        sv5[721] = sv5[639] * sp[494];
        sv5[722] = sv5[640] * sp[494];
        sv5[723] = sv5[641] * sp[494];
        sv5[724] = sv5[642] * sp[494];
        sv5[725] = sv5[643] * sp[494];
        sv5[726] = sv5[644] * sp[494];
        sv5[727] = sv5[645] * sp[494];
        sv5[728] = sv5[646] * sp[494];
        sv5[729] = sv5[647] * sp[494];
        sv5[730] = sv5[648] * sp[494];
        sv5[731] = sv5[649] * sp[494];
        sv5[732] = sv5[650] * sp[494];
        sv5[733] = sv5[651] * sp[494];
        sv5[734] = sv5[652] * sp[494];
        sv5[735] = sv5[653] * sp[494];
        sv5[736] = sv5[654] * sp[494];
        sv5[737] = sv5[655] * sp[494];
        sv5[738] = sv5[656] * sp[494];
        sv5[739] = sv5[657] * sp[494];
        sv5[740] = sv5[658] * sp[494];
        sv5[741] = sv5[659] * sp[494];
        sv5[742] = sv5[660] * sp[494];
        sv5[743] = sv5[661] * sp[494];
        sv5[744] = sv5[662] * sp[494];
        sv5[745] = sv5[663] * sp[494];
        sv5[746] = sv5[664] * sp[494];
        sv5[747] = sv5[665] * sp[494];
        sv5[748] = sv5[666] * sp[494];
        sv5[749] = sv5[667] * sp[494];
        sv5[750] = sv5[668] * sp[494];
        sv5[751] = sv5[669] * sp[494];
        const double fw0 = sv5[724] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP0[j] += fw0 * FE34_C0_D001_Q5[0][0][j];
        const double fw1 = sv5[733] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP1[j] += fw1 * FE34_C0_D001_Q5[0][0][j];
        const double fw2 = sv5[742] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP2[j] += fw2 * FE34_C0_D001_Q5[0][0][j];
        const double fw3 = sv5[697] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP3[j] += fw3 * FE34_C0_D001_Q5[0][0][j];
        const double fw4 = sv5[706] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP4[j] += fw4 * FE34_C0_D001_Q5[0][0][j];
        const double fw5 = sv5[715] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP5[j] += fw5 * FE34_C0_D001_Q5[0][0][j];
        const double fw6 = sv5[670] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP6[j] += fw6 * FE34_C0_D001_Q5[0][0][j];
        const double fw7 = sv5[679] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP7[j] += fw7 * FE34_C0_D001_Q5[0][0][j];
        const double fw8 = sv5[688] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP8[j] += fw8 * FE34_C0_D001_Q5[0][0][j];
        const double fw9 = sv5[751] * weights5[iq];
        alignas(32) double TF0[4];
        for (int i = 0; i < 4; ++i)
            TF0[i] = fw9 * FE34_C0_Q5[0][iq][i];
        for (int i = 0; i < 4; ++i)
            for (int j = 0; j < 4; ++j)
                BF0[i][j] += TF0[i] * FE34_C0_Q5[0][iq][j];
        const double fw10 = sv5[725] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP9[j] += fw10 * FE34_C0_D001_Q5[0][0][j];
        const double fw11 = sv5[734] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP10[j] += fw11 * FE34_C0_D001_Q5[0][0][j];
        const double fw12 = sv5[743] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP11[j] += fw12 * FE34_C0_D001_Q5[0][0][j];
        const double fw13 = sv5[698] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP12[j] += fw13 * FE34_C0_D001_Q5[0][0][j];
        const double fw14 = sv5[707] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP13[j] += fw14 * FE34_C0_D001_Q5[0][0][j];
        const double fw15 = sv5[716] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP14[j] += fw15 * FE34_C0_D001_Q5[0][0][j];
        const double fw16 = sv5[671] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP15[j] += fw16 * FE34_C0_D001_Q5[0][0][j];
        const double fw17 = sv5[680] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP16[j] += fw17 * FE34_C0_D001_Q5[0][0][j];
        const double fw18 = sv5[689] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP17[j] += fw18 * FE34_C0_D001_Q5[0][0][j];
        const double fw19 = sv5[726] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP18[j] += fw19 * FE34_C0_D001_Q5[0][0][j];
        const double fw20 = sv5[735] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP19[j] += fw20 * FE34_C0_D001_Q5[0][0][j];
        const double fw21 = sv5[744] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP20[j] += fw21 * FE34_C0_D001_Q5[0][0][j];
        const double fw22 = sv5[699] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP21[j] += fw22 * FE34_C0_D001_Q5[0][0][j];
        const double fw23 = sv5[708] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP22[j] += fw23 * FE34_C0_D001_Q5[0][0][j];
        const double fw24 = sv5[717] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP23[j] += fw24 * FE34_C0_D001_Q5[0][0][j];
        const double fw25 = sv5[672] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP24[j] += fw25 * FE34_C0_D001_Q5[0][0][j];
        const double fw26 = sv5[681] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP25[j] += fw26 * FE34_C0_D001_Q5[0][0][j];
        const double fw27 = sv5[690] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP26[j] += fw27 * FE34_C0_D001_Q5[0][0][j];
        const double fw28 = sv5[727] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP27[j] += fw28 * FE34_C0_D001_Q5[0][0][j];
        const double fw29 = sv5[736] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP28[j] += fw29 * FE34_C0_D001_Q5[0][0][j];
        const double fw30 = sv5[745] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP29[j] += fw30 * FE34_C0_D001_Q5[0][0][j];
        const double fw31 = sv5[700] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP30[j] += fw31 * FE34_C0_D001_Q5[0][0][j];
        const double fw32 = sv5[709] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP31[j] += fw32 * FE34_C0_D001_Q5[0][0][j];
        const double fw33 = sv5[718] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP32[j] += fw33 * FE34_C0_D001_Q5[0][0][j];
        const double fw34 = sv5[673] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP33[j] += fw34 * FE34_C0_D001_Q5[0][0][j];
        const double fw35 = sv5[682] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP34[j] += fw35 * FE34_C0_D001_Q5[0][0][j];
        const double fw36 = sv5[691] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP35[j] += fw36 * FE34_C0_D001_Q5[0][0][j];
        const double fw37 = sv5[728] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP36[j] += fw37 * FE34_C0_D001_Q5[0][0][j];
        const double fw38 = sv5[737] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP37[j] += fw38 * FE34_C0_D001_Q5[0][0][j];
        const double fw39 = sv5[746] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP38[j] += fw39 * FE34_C0_D001_Q5[0][0][j];
        const double fw40 = sv5[701] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP39[j] += fw40 * FE34_C0_D001_Q5[0][0][j];
        const double fw41 = sv5[710] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP40[j] += fw41 * FE34_C0_D001_Q5[0][0][j];
        const double fw42 = sv5[719] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP41[j] += fw42 * FE34_C0_D001_Q5[0][0][j];
        const double fw43 = sv5[674] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP42[j] += fw43 * FE34_C0_D001_Q5[0][0][j];
        const double fw44 = sv5[683] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP43[j] += fw44 * FE34_C0_D001_Q5[0][0][j];
        const double fw45 = sv5[692] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP44[j] += fw45 * FE34_C0_D001_Q5[0][0][j];
        const double fw46 = sv5[729] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP45[j] += fw46 * FE34_C0_D001_Q5[0][0][j];
        const double fw47 = sv5[738] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP46[j] += fw47 * FE34_C0_D001_Q5[0][0][j];
        const double fw48 = sv5[747] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP47[j] += fw48 * FE34_C0_D001_Q5[0][0][j];
        const double fw49 = sv5[702] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP48[j] += fw49 * FE34_C0_D001_Q5[0][0][j];
        const double fw50 = sv5[711] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP49[j] += fw50 * FE34_C0_D001_Q5[0][0][j];
        const double fw51 = sv5[720] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP50[j] += fw51 * FE34_C0_D001_Q5[0][0][j];
        const double fw52 = sv5[675] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP51[j] += fw52 * FE34_C0_D001_Q5[0][0][j];
        const double fw53 = sv5[684] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP52[j] += fw53 * FE34_C0_D001_Q5[0][0][j];
        const double fw54 = sv5[693] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP53[j] += fw54 * FE34_C0_D001_Q5[0][0][j];
        const double fw55 = sv5[730] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP54[j] += fw55 * FE34_C0_D001_Q5[0][0][j];
        const double fw56 = sv5[739] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP55[j] += fw56 * FE34_C0_D001_Q5[0][0][j];
        const double fw57 = sv5[748] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP56[j] += fw57 * FE34_C0_D001_Q5[0][0][j];
        const double fw58 = sv5[703] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP57[j] += fw58 * FE34_C0_D001_Q5[0][0][j];
        const double fw59 = sv5[712] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP58[j] += fw59 * FE34_C0_D001_Q5[0][0][j];
        const double fw60 = sv5[721] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP59[j] += fw60 * FE34_C0_D001_Q5[0][0][j];
        const double fw61 = sv5[676] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP60[j] += fw61 * FE34_C0_D001_Q5[0][0][j];
        const double fw62 = sv5[685] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP61[j] += fw62 * FE34_C0_D001_Q5[0][0][j];
        const double fw63 = sv5[694] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP62[j] += fw63 * FE34_C0_D001_Q5[0][0][j];
        const double fw64 = sv5[731] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP63[j] += fw64 * FE34_C0_D001_Q5[0][0][j];
        const double fw65 = sv5[740] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP64[j] += fw65 * FE34_C0_D001_Q5[0][0][j];
        const double fw66 = sv5[749] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP65[j] += fw66 * FE34_C0_D001_Q5[0][0][j];
        const double fw67 = sv5[704] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP66[j] += fw67 * FE34_C0_D001_Q5[0][0][j];
        const double fw68 = sv5[713] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP67[j] += fw68 * FE34_C0_D001_Q5[0][0][j];
        const double fw69 = sv5[722] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP68[j] += fw69 * FE34_C0_D001_Q5[0][0][j];
        const double fw70 = sv5[677] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP69[j] += fw70 * FE34_C0_D001_Q5[0][0][j];
        const double fw71 = sv5[686] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP70[j] += fw71 * FE34_C0_D001_Q5[0][0][j];
        const double fw72 = sv5[695] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP71[j] += fw72 * FE34_C0_D001_Q5[0][0][j];
        const double fw73 = sv5[732] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP72[j] += fw73 * FE34_C0_D001_Q5[0][0][j];
        const double fw74 = sv5[741] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP73[j] += fw74 * FE34_C0_D001_Q5[0][0][j];
        const double fw75 = sv5[750] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP74[j] += fw75 * FE34_C0_D001_Q5[0][0][j];
        const double fw76 = sv5[705] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP75[j] += fw76 * FE34_C0_D001_Q5[0][0][j];
        const double fw77 = sv5[714] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP76[j] += fw77 * FE34_C0_D001_Q5[0][0][j];
        const double fw78 = sv5[723] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP77[j] += fw78 * FE34_C0_D001_Q5[0][0][j];
        const double fw79 = sv5[678] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP78[j] += fw79 * FE34_C0_D001_Q5[0][0][j];
        const double fw80 = sv5[687] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP79[j] += fw80 * FE34_C0_D001_Q5[0][0][j];
        const double fw81 = sv5[696] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP80[j] += fw81 * FE34_C0_D001_Q5[0][0][j];
    }
    std::fill(&A[0], &A[204], 0.0);
    A[204] = 0.01666666666666667 * (1e-12 * sp[494]);
    A[205] = 0.008333333333333335 * (1e-12 * sp[494]);
    A[206] = 0.008333333333333338 * (1e-12 * sp[494]);
    A[207] = 0.008333333333333338 * (1e-12 * sp[494]);
    std::fill(&A[208], &A[220], 0.0);
    A[220] = 0.008333333333333335 * (1e-12 * sp[494]);
    A[221] = 0.01666666666666666 * (1e-12 * sp[494]);
    A[222] = 0.008333333333333331 * (1e-12 * sp[494]);
    A[223] = 0.00833333333333333 * (1e-12 * sp[494]);
    std::fill(&A[224], &A[236], 0.0);
    A[236] = 0.008333333333333338 * (1e-12 * sp[494]);
    A[237] = 0.008333333333333331 * (1e-12 * sp[494]);
    A[238] = 0.01666666666666667 * (1e-12 * sp[494]);
    A[239] = 0.008333333333333331 * (1e-12 * sp[494]);
    std::fill(&A[240], &A[252], 0.0);
    A[252] = 0.008333333333333338 * (1e-12 * sp[494]);
    A[253] = 0.00833333333333333 * (1e-12 * sp[494]);
    A[254] = 0.008333333333333331 * (1e-12 * sp[494]);
    A[255] = 0.01666666666666667 * (1e-12 * sp[494]);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 4, 6 };
    static const int DM3[2] = { 4, 7 };
    static const int DM4[2] = { 8, 10 };
    static const int DM5[2] = { 8, 11 };
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + j] += FE34_C0_D001_Q5[0][0][i] * TP0[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM0[j]] += FE34_C0_D001_Q5[0][0][i] * TP1[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM1[j]] += FE34_C0_D001_Q5[0][0][i] * TP2[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + (j + 4)] += FE34_C0_D001_Q5[0][0][i] * TP3[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM2[j]] += FE34_C0_D001_Q5[0][0][i] * TP4[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM3[j]] += FE34_C0_D001_Q5[0][0][i] * TP5[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + (j + 8)] += FE34_C0_D001_Q5[0][0][i] * TP6[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM4[j]] += FE34_C0_D001_Q5[0][0][i] * TP7[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM5[j]] += FE34_C0_D001_Q5[0][0][i] * TP8[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * i + j] += BF0[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + j] += FE34_C0_D001_Q5[0][0][i] * TP9[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM0[j]] += FE34_C0_D001_Q5[0][0][i] * TP10[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM1[j]] += FE34_C0_D001_Q5[0][0][i] * TP11[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + (j + 4)] += FE34_C0_D001_Q5[0][0][i] * TP12[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM2[j]] += FE34_C0_D001_Q5[0][0][i] * TP13[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM3[j]] += FE34_C0_D001_Q5[0][0][i] * TP14[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + (j + 8)] += FE34_C0_D001_Q5[0][0][i] * TP15[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM4[j]] += FE34_C0_D001_Q5[0][0][i] * TP16[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM5[j]] += FE34_C0_D001_Q5[0][0][i] * TP17[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + j] += FE34_C0_D001_Q5[0][0][i] * TP18[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM0[j]] += FE34_C0_D001_Q5[0][0][i] * TP19[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM1[j]] += FE34_C0_D001_Q5[0][0][i] * TP20[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + (j + 4)] += FE34_C0_D001_Q5[0][0][i] * TP21[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM2[j]] += FE34_C0_D001_Q5[0][0][i] * TP22[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM3[j]] += FE34_C0_D001_Q5[0][0][i] * TP23[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + (j + 8)] += FE34_C0_D001_Q5[0][0][i] * TP24[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM4[j]] += FE34_C0_D001_Q5[0][0][i] * TP25[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM5[j]] += FE34_C0_D001_Q5[0][0][i] * TP26[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + j] += FE34_C0_D001_Q5[0][0][i] * TP27[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM0[j]] += FE34_C0_D001_Q5[0][0][i] * TP28[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM1[j]] += FE34_C0_D001_Q5[0][0][i] * TP29[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + (j + 4)] += FE34_C0_D001_Q5[0][0][i] * TP30[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM2[j]] += FE34_C0_D001_Q5[0][0][i] * TP31[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM3[j]] += FE34_C0_D001_Q5[0][0][i] * TP32[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + (j + 8)] += FE34_C0_D001_Q5[0][0][i] * TP33[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM4[j]] += FE34_C0_D001_Q5[0][0][i] * TP34[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM5[j]] += FE34_C0_D001_Q5[0][0][i] * TP35[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * (i + 4) + (j + 4)] += BF0[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + j] += FE34_C0_D001_Q5[0][0][i] * TP36[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM0[j]] += FE34_C0_D001_Q5[0][0][i] * TP37[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM1[j]] += FE34_C0_D001_Q5[0][0][i] * TP38[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + (j + 4)] += FE34_C0_D001_Q5[0][0][i] * TP39[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM2[j]] += FE34_C0_D001_Q5[0][0][i] * TP40[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM3[j]] += FE34_C0_D001_Q5[0][0][i] * TP41[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + (j + 8)] += FE34_C0_D001_Q5[0][0][i] * TP42[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM4[j]] += FE34_C0_D001_Q5[0][0][i] * TP43[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM5[j]] += FE34_C0_D001_Q5[0][0][i] * TP44[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + j] += FE34_C0_D001_Q5[0][0][i] * TP45[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM0[j]] += FE34_C0_D001_Q5[0][0][i] * TP46[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM1[j]] += FE34_C0_D001_Q5[0][0][i] * TP47[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + (j + 4)] += FE34_C0_D001_Q5[0][0][i] * TP48[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM2[j]] += FE34_C0_D001_Q5[0][0][i] * TP49[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM3[j]] += FE34_C0_D001_Q5[0][0][i] * TP50[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + (j + 8)] += FE34_C0_D001_Q5[0][0][i] * TP51[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM4[j]] += FE34_C0_D001_Q5[0][0][i] * TP52[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM5[j]] += FE34_C0_D001_Q5[0][0][i] * TP53[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + j] += FE34_C0_D001_Q5[0][0][i] * TP54[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM0[j]] += FE34_C0_D001_Q5[0][0][i] * TP55[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM1[j]] += FE34_C0_D001_Q5[0][0][i] * TP56[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + (j + 4)] += FE34_C0_D001_Q5[0][0][i] * TP57[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM2[j]] += FE34_C0_D001_Q5[0][0][i] * TP58[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM3[j]] += FE34_C0_D001_Q5[0][0][i] * TP59[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + (j + 8)] += FE34_C0_D001_Q5[0][0][i] * TP60[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM4[j]] += FE34_C0_D001_Q5[0][0][i] * TP61[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM5[j]] += FE34_C0_D001_Q5[0][0][i] * TP62[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * (i + 8) + (j + 8)] += BF0[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + j] += FE34_C0_D001_Q5[0][0][i] * TP63[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM0[j]] += FE34_C0_D001_Q5[0][0][i] * TP64[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM1[j]] += FE34_C0_D001_Q5[0][0][i] * TP65[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + (j + 4)] += FE34_C0_D001_Q5[0][0][i] * TP66[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM2[j]] += FE34_C0_D001_Q5[0][0][i] * TP67[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM3[j]] += FE34_C0_D001_Q5[0][0][i] * TP68[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + (j + 8)] += FE34_C0_D001_Q5[0][0][i] * TP69[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM4[j]] += FE34_C0_D001_Q5[0][0][i] * TP70[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM5[j]] += FE34_C0_D001_Q5[0][0][i] * TP71[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + j] += FE34_C0_D001_Q5[0][0][i] * TP72[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM0[j]] += FE34_C0_D001_Q5[0][0][i] * TP73[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM1[j]] += FE34_C0_D001_Q5[0][0][i] * TP74[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + (j + 4)] += FE34_C0_D001_Q5[0][0][i] * TP75[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM2[j]] += FE34_C0_D001_Q5[0][0][i] * TP76[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM3[j]] += FE34_C0_D001_Q5[0][0][i] * TP77[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + (j + 8)] += FE34_C0_D001_Q5[0][0][i] * TP78[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM4[j]] += FE34_C0_D001_Q5[0][0][i] * TP79[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM5[j]] += FE34_C0_D001_Q5[0][0][i] * TP80[j];
  }

};


class elastic3dp1p1_cell_integral_1_2: public ufc::cell_integral
{
public:

  elastic3dp1p1_cell_integral_1_2() : ufc::cell_integral()
  {

  }

  ~elastic3dp1p1_cell_integral_1_2() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 3
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 3
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           3
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights5[5] = { -0.1333333333333333, 0.075, 0.075, 0.075, 0.075 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE34_C0_D001_Q5[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE34_C0_Q5[1][5][4] =
        { { { 0.2500000000000001, 0.25, 0.25, 0.25 },
            { 0.1666666666666668, 0.5, 0.1666666666666667, 0.1666666666666667 },
            { 0.1666666666666668, 0.1666666666666666, 0.5, 0.1666666666666667 },
            { 0.1666666666666668, 0.1666666666666666, 0.1666666666666667, 0.5 },
            { 0.5, 0.1666666666666665, 0.1666666666666667, 0.1666666666666667 } } };
    // Unstructured piecewise computations
    double w2_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c0 += w[2][ic] * FE34_C0_D001_Q5[0][0][ic];
    const double J_c4 = coordinate_dofs[1] * FE34_C0_D001_Q5[0][0][0] + coordinate_dofs[7] * FE34_C0_D001_Q5[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE34_C0_D001_Q5[0][0][0] + coordinate_dofs[11] * FE34_C0_D001_Q5[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE34_C0_D001_Q5[0][0][0] + coordinate_dofs[10] * FE34_C0_D001_Q5[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE34_C0_D001_Q5[0][0][0] + coordinate_dofs[8] * FE34_C0_D001_Q5[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE34_C0_D001_Q5[0][0][0] + coordinate_dofs[3] * FE34_C0_D001_Q5[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE34_C0_D001_Q5[0][0][0] + coordinate_dofs[6] * FE34_C0_D001_Q5[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE34_C0_D001_Q5[0][0][0] + coordinate_dofs[5] * FE34_C0_D001_Q5[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE34_C0_D001_Q5[0][0][0] + coordinate_dofs[4] * FE34_C0_D001_Q5[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE34_C0_D001_Q5[0][0][0] + coordinate_dofs[9] * FE34_C0_D001_Q5[0][0][1];
    const double w2_d1_c0 = w[2][0] * FE34_C0_D001_Q5[0][0][0] + w[2][2] * FE34_C0_D001_Q5[0][0][1];
    const double w2_d2_c0 = w[2][0] * FE34_C0_D001_Q5[0][0][0] + w[2][3] * FE34_C0_D001_Q5[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE34_C0_D001_Q5[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE34_C0_D001_Q5[0][0][0] + w[0][2] * FE34_C0_D001_Q5[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE34_C0_D001_Q5[0][0][0] + w[0][3] * FE34_C0_D001_Q5[0][0][1];
    double w1_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c0 += w[1][ic] * FE34_C0_D001_Q5[0][0][ic];
    const double w1_d1_c0 = w[1][0] * FE34_C0_D001_Q5[0][0][0] + w[1][2] * FE34_C0_D001_Q5[0][0][1];
    const double w1_d2_c0 = w[1][0] * FE34_C0_D001_Q5[0][0][0] + w[1][3] * FE34_C0_D001_Q5[0][0][1];
    double w2_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c1 += w[2][ic + 4] * FE34_C0_D001_Q5[0][0][ic];
    const double w2_d1_c1 = w[2][4] * FE34_C0_D001_Q5[0][0][0] + w[2][6] * FE34_C0_D001_Q5[0][0][1];
    const double w2_d2_c1 = w[2][4] * FE34_C0_D001_Q5[0][0][0] + w[2][7] * FE34_C0_D001_Q5[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE34_C0_D001_Q5[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE34_C0_D001_Q5[0][0][0] + w[0][6] * FE34_C0_D001_Q5[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE34_C0_D001_Q5[0][0][0] + w[0][7] * FE34_C0_D001_Q5[0][0][1];
    double w1_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c1 += w[1][ic + 4] * FE34_C0_D001_Q5[0][0][ic];
    const double w1_d1_c1 = w[1][4] * FE34_C0_D001_Q5[0][0][0] + w[1][6] * FE34_C0_D001_Q5[0][0][1];
    const double w1_d2_c1 = w[1][4] * FE34_C0_D001_Q5[0][0][0] + w[1][7] * FE34_C0_D001_Q5[0][0][1];
    double w2_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c2 += w[2][ic + 8] * FE34_C0_D001_Q5[0][0][ic];
    const double w2_d1_c2 = w[2][8] * FE34_C0_D001_Q5[0][0][0] + w[2][10] * FE34_C0_D001_Q5[0][0][1];
    const double w2_d2_c2 = w[2][8] * FE34_C0_D001_Q5[0][0][0] + w[2][11] * FE34_C0_D001_Q5[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE34_C0_D001_Q5[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE34_C0_D001_Q5[0][0][0] + w[0][10] * FE34_C0_D001_Q5[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE34_C0_D001_Q5[0][0][0] + w[0][11] * FE34_C0_D001_Q5[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 8] * FE34_C0_D001_Q5[0][0][ic];
    const double w1_d1_c2 = w[1][8] * FE34_C0_D001_Q5[0][0][0] + w[1][10] * FE34_C0_D001_Q5[0][0][1];
    const double w1_d2_c2 = w[1][8] * FE34_C0_D001_Q5[0][0][0] + w[1][11] * FE34_C0_D001_Q5[0][0][1];
    alignas(32) double sp[495];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = w2_d0_c0 * sp[14];
    sp[16] = J_c3 * (-1 * J_c8);
    sp[17] = sp[4] + sp[16];
    sp[18] = sp[17] / sp[13];
    sp[19] = w2_d1_c0 * sp[18];
    sp[20] = sp[15] + sp[19];
    sp[21] = sp[11] / sp[13];
    sp[22] = w2_d2_c0 * sp[21];
    sp[23] = sp[20] + sp[22];
    sp[24] = w0_d0_c0 * sp[14];
    sp[25] = w0_d1_c0 * sp[18];
    sp[26] = sp[24] + sp[25];
    sp[27] = w0_d2_c0 * sp[21];
    sp[28] = sp[26] + sp[27];
    sp[29] = w1_d0_c0 * sp[14];
    sp[30] = w1_d1_c0 * sp[18];
    sp[31] = sp[29] + sp[30];
    sp[32] = w1_d2_c0 * sp[21];
    sp[33] = sp[31] + sp[32];
    sp[34] = sp[28] + sp[33];
    sp[35] = sp[34] * w[7][0];
    sp[36] = sp[23] + 0.5 * sp[35];
    sp[37] = (1 + sp[36]) * (1 + sp[36]);
    sp[38] = J_c2 * J_c7;
    sp[39] = J_c8 * (-1 * J_c1);
    sp[40] = sp[38] + sp[39];
    sp[41] = sp[40] / sp[13];
    sp[42] = w2_d0_c0 * sp[41];
    sp[43] = J_c0 * J_c8;
    sp[44] = J_c6 * (-1 * J_c2);
    sp[45] = sp[43] + sp[44];
    sp[46] = sp[45] / sp[13];
    sp[47] = w2_d1_c0 * sp[46];
    sp[48] = sp[42] + sp[47];
    sp[49] = J_c1 * J_c6;
    sp[50] = J_c0 * J_c7;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = w2_d2_c0 * sp[52];
    sp[54] = sp[48] + sp[53];
    sp[55] = w0_d0_c0 * sp[41];
    sp[56] = w0_d1_c0 * sp[46];
    sp[57] = sp[55] + sp[56];
    sp[58] = w0_d2_c0 * sp[52];
    sp[59] = sp[57] + sp[58];
    sp[60] = w1_d0_c0 * sp[41];
    sp[61] = w1_d1_c0 * sp[46];
    sp[62] = sp[60] + sp[61];
    sp[63] = w1_d2_c0 * sp[52];
    sp[64] = sp[62] + sp[63];
    sp[65] = sp[59] + sp[64];
    sp[66] = sp[65] * w[7][0];
    sp[67] = sp[54] + 0.5 * sp[66];
    sp[68] = sp[67] * sp[67];
    sp[69] = sp[37] + sp[68];
    sp[70] = J_c1 * J_c5;
    sp[71] = J_c2 * J_c4;
    sp[72] = sp[70] + -1 * sp[71];
    sp[73] = sp[72] / sp[13];
    sp[74] = w2_d0_c0 * sp[73];
    sp[75] = J_c2 * J_c3;
    sp[76] = J_c0 * J_c5;
    sp[77] = sp[75] + -1 * sp[76];
    sp[78] = sp[77] / sp[13];
    sp[79] = w2_d1_c0 * sp[78];
    sp[80] = sp[74] + sp[79];
    sp[81] = J_c0 * J_c4;
    sp[82] = J_c1 * J_c3;
    sp[83] = sp[81] + -1 * sp[82];
    sp[84] = sp[83] / sp[13];
    sp[85] = w2_d2_c0 * sp[84];
    sp[86] = sp[80] + sp[85];
    sp[87] = w0_d0_c0 * sp[73];
    sp[88] = w0_d1_c0 * sp[78];
    sp[89] = sp[87] + sp[88];
    sp[90] = w0_d2_c0 * sp[84];
    sp[91] = sp[89] + sp[90];
    sp[92] = w1_d0_c0 * sp[73];
    sp[93] = w1_d1_c0 * sp[78];
    sp[94] = sp[92] + sp[93];
    sp[95] = w1_d2_c0 * sp[84];
    sp[96] = sp[94] + sp[95];
    sp[97] = sp[91] + sp[96];
    sp[98] = sp[97] * w[7][0];
    sp[99] = sp[86] + 0.5 * sp[98];
    sp[100] = sp[99] * sp[99];
    sp[101] = sp[69] + sp[100];
    sp[102] = w2_d0_c1 * sp[41];
    sp[103] = w2_d1_c1 * sp[46];
    sp[104] = sp[102] + sp[103];
    sp[105] = w2_d2_c1 * sp[52];
    sp[106] = sp[104] + sp[105];
    sp[107] = w0_d0_c1 * sp[41];
    sp[108] = w0_d1_c1 * sp[46];
    sp[109] = sp[107] + sp[108];
    sp[110] = w0_d2_c1 * sp[52];
    sp[111] = sp[109] + sp[110];
    sp[112] = w1_d0_c1 * sp[41];
    sp[113] = w1_d1_c1 * sp[46];
    sp[114] = sp[112] + sp[113];
    sp[115] = w1_d2_c1 * sp[52];
    sp[116] = sp[114] + sp[115];
    sp[117] = sp[111] + sp[116];
    sp[118] = sp[117] * w[7][0];
    sp[119] = sp[106] + 0.5 * sp[118];
    sp[120] = (1 + sp[119]) * (1 + sp[119]);
    sp[121] = w2_d0_c1 * sp[14];
    sp[122] = w2_d1_c1 * sp[18];
    sp[123] = sp[121] + sp[122];
    sp[124] = w2_d2_c1 * sp[21];
    sp[125] = sp[123] + sp[124];
    sp[126] = w0_d0_c1 * sp[14];
    sp[127] = w0_d1_c1 * sp[18];
    sp[128] = sp[126] + sp[127];
    sp[129] = w0_d2_c1 * sp[21];
    sp[130] = sp[128] + sp[129];
    sp[131] = w1_d0_c1 * sp[14];
    sp[132] = w1_d1_c1 * sp[18];
    sp[133] = sp[131] + sp[132];
    sp[134] = w1_d2_c1 * sp[21];
    sp[135] = sp[133] + sp[134];
    sp[136] = sp[130] + sp[135];
    sp[137] = sp[136] * w[7][0];
    sp[138] = sp[125] + 0.5 * sp[137];
    sp[139] = sp[138] * sp[138];
    sp[140] = sp[120] + sp[139];
    sp[141] = w2_d0_c1 * sp[73];
    sp[142] = w2_d1_c1 * sp[78];
    sp[143] = sp[141] + sp[142];
    sp[144] = w2_d2_c1 * sp[84];
    sp[145] = sp[143] + sp[144];
    sp[146] = w0_d0_c1 * sp[73];
    sp[147] = w0_d1_c1 * sp[78];
    sp[148] = sp[146] + sp[147];
    sp[149] = w0_d2_c1 * sp[84];
    sp[150] = sp[148] + sp[149];
    sp[151] = w1_d0_c1 * sp[73];
    sp[152] = w1_d1_c1 * sp[78];
    sp[153] = sp[151] + sp[152];
    sp[154] = w1_d2_c1 * sp[84];
    sp[155] = sp[153] + sp[154];
    sp[156] = sp[150] + sp[155];
    sp[157] = sp[156] * w[7][0];
    sp[158] = sp[145] + 0.5 * sp[157];
    sp[159] = sp[158] * sp[158];
    sp[160] = sp[140] + sp[159];
    sp[161] = sp[101] + sp[160];
    sp[162] = w2_d0_c2 * sp[14];
    sp[163] = w2_d1_c2 * sp[18];
    sp[164] = sp[162] + sp[163];
    sp[165] = w2_d2_c2 * sp[21];
    sp[166] = sp[164] + sp[165];
    sp[167] = w0_d0_c2 * sp[14];
    sp[168] = w0_d1_c2 * sp[18];
    sp[169] = sp[167] + sp[168];
    sp[170] = w0_d2_c2 * sp[21];
    sp[171] = sp[169] + sp[170];
    sp[172] = w1_d0_c2 * sp[14];
    sp[173] = w1_d1_c2 * sp[18];
    sp[174] = sp[172] + sp[173];
    sp[175] = w1_d2_c2 * sp[21];
    sp[176] = sp[174] + sp[175];
    sp[177] = sp[171] + sp[176];
    sp[178] = sp[177] * w[7][0];
    sp[179] = sp[166] + 0.5 * sp[178];
    sp[180] = sp[179] * sp[179];
    sp[181] = w2_d0_c2 * sp[41];
    sp[182] = w2_d1_c2 * sp[46];
    sp[183] = sp[181] + sp[182];
    sp[184] = w2_d2_c2 * sp[52];
    sp[185] = sp[183] + sp[184];
    sp[186] = w0_d0_c2 * sp[41];
    sp[187] = w0_d1_c2 * sp[46];
    sp[188] = sp[186] + sp[187];
    sp[189] = w0_d2_c2 * sp[52];
    sp[190] = sp[188] + sp[189];
    sp[191] = w1_d0_c2 * sp[41];
    sp[192] = w1_d1_c2 * sp[46];
    sp[193] = sp[191] + sp[192];
    sp[194] = w1_d2_c2 * sp[52];
    sp[195] = sp[193] + sp[194];
    sp[196] = sp[190] + sp[195];
    sp[197] = sp[196] * w[7][0];
    sp[198] = sp[185] + 0.5 * sp[197];
    sp[199] = sp[198] * sp[198];
    sp[200] = sp[180] + sp[199];
    sp[201] = w2_d0_c2 * sp[73];
    sp[202] = w2_d1_c2 * sp[78];
    sp[203] = sp[201] + sp[202];
    sp[204] = w2_d2_c2 * sp[84];
    sp[205] = sp[203] + sp[204];
    sp[206] = w0_d0_c2 * sp[73];
    sp[207] = w0_d1_c2 * sp[78];
    sp[208] = sp[206] + sp[207];
    sp[209] = w0_d2_c2 * sp[84];
    sp[210] = sp[208] + sp[209];
    sp[211] = w1_d0_c2 * sp[73];
    sp[212] = w1_d1_c2 * sp[78];
    sp[213] = sp[211] + sp[212];
    sp[214] = w1_d2_c2 * sp[84];
    sp[215] = sp[213] + sp[214];
    sp[216] = sp[210] + sp[215];
    sp[217] = sp[216] * w[7][0];
    sp[218] = sp[205] + 0.5 * sp[217];
    sp[219] = (1 + sp[218]) * (1 + sp[218]);
    sp[220] = sp[200] + sp[219];
    sp[221] = sp[161] + sp[220];
    sp[222] = sp[73] * w[7][0];
    sp[223] = sp[78] * w[7][0];
    sp[224] = sp[84] * w[7][0];
    sp[225] = (1 + sp[119]) * (0.5 * sp[222]);
    sp[226] = (1 + sp[119]) * (0.5 * sp[223]);
    sp[227] = (1 + sp[119]) * (0.5 * sp[224]);
    sp[228] = sp[41] * w[7][0];
    sp[229] = sp[46] * w[7][0];
    sp[230] = sp[52] * w[7][0];
    sp[231] = (1 + sp[218]) * (0.5 * sp[228]);
    sp[232] = (1 + sp[218]) * (0.5 * sp[229]);
    sp[233] = (1 + sp[218]) * (0.5 * sp[230]);
    sp[234] = sp[198] * (0.5 * sp[222]);
    sp[235] = sp[198] * (0.5 * sp[223]);
    sp[236] = sp[198] * (0.5 * sp[224]);
    sp[237] = sp[158] * (0.5 * sp[228]);
    sp[238] = sp[158] * (0.5 * sp[229]);
    sp[239] = sp[158] * (0.5 * sp[230]);
    sp[240] = -1 * sp[237] + sp[225];
    sp[241] = -1 * sp[238] + sp[226];
    sp[242] = -1 * sp[239] + sp[227];
    sp[243] = -1 * sp[234] + sp[231];
    sp[244] = -1 * sp[235] + sp[232];
    sp[245] = -1 * sp[236] + sp[233];
    sp[246] = (1 + sp[36]) * sp[240];
    sp[247] = (1 + sp[36]) * sp[241];
    sp[248] = (1 + sp[36]) * sp[242];
    sp[249] = (1 + sp[36]) * sp[243];
    sp[250] = (1 + sp[36]) * sp[244];
    sp[251] = (1 + sp[36]) * sp[245];
    sp[252] = (1 + sp[218]) * (1 + sp[119]);
    sp[253] = sp[158] * sp[198];
    sp[254] = sp[252] + -1 * sp[253];
    sp[255] = sp[14] * w[7][0];
    sp[256] = sp[18] * w[7][0];
    sp[257] = sp[21] * w[7][0];
    sp[258] = sp[254] * (0.5 * sp[255]);
    sp[259] = sp[254] * (0.5 * sp[256]);
    sp[260] = sp[254] * (0.5 * sp[257]);
    sp[261] = sp[179] * (0.5 * sp[222]);
    sp[262] = sp[179] * (0.5 * sp[223]);
    sp[263] = sp[179] * (0.5 * sp[224]);
    sp[264] = sp[158] * (0.5 * sp[255]);
    sp[265] = sp[158] * (0.5 * sp[256]);
    sp[266] = sp[158] * (0.5 * sp[257]);
    sp[267] = sp[138] * (0.5 * sp[222]);
    sp[268] = sp[138] * (0.5 * sp[223]);
    sp[269] = sp[138] * (0.5 * sp[224]);
    sp[270] = (1 + sp[218]) * (0.5 * sp[255]);
    sp[271] = (1 + sp[218]) * (0.5 * sp[256]);
    sp[272] = (1 + sp[218]) * (0.5 * sp[257]);
    sp[273] = -1 * sp[267] + sp[264];
    sp[274] = -1 * sp[268] + sp[265];
    sp[275] = -1 * sp[269] + sp[266];
    sp[276] = -1 * sp[270] + sp[261];
    sp[277] = -1 * sp[271] + sp[262];
    sp[278] = -1 * sp[272] + sp[263];
    sp[279] = sp[273] * sp[67];
    sp[280] = sp[274] * sp[67];
    sp[281] = sp[275] * sp[67];
    sp[282] = sp[276] * sp[67];
    sp[283] = sp[277] * sp[67];
    sp[284] = sp[278] * sp[67];
    sp[285] = sp[158] * sp[179];
    sp[286] = (1 + sp[218]) * sp[138];
    sp[287] = sp[285] + -1 * sp[286];
    sp[288] = sp[287] * (0.5 * sp[228]);
    sp[289] = sp[287] * (0.5 * sp[229]);
    sp[290] = sp[287] * (0.5 * sp[230]);
    sp[291] = sp[246] + sp[279];
    sp[292] = sp[247] + sp[280];
    sp[293] = sp[248] + sp[281];
    sp[294] = sp[249] + sp[282];
    sp[295] = sp[250] + sp[283];
    sp[296] = sp[251] + sp[284];
    sp[297] = sp[288] + sp[258];
    sp[298] = sp[289] + sp[259];
    sp[299] = sp[260] + sp[290];
    sp[300] = sp[198] * (0.5 * sp[255]);
    sp[301] = sp[198] * (0.5 * sp[256]);
    sp[302] = sp[198] * (0.5 * sp[257]);
    sp[303] = sp[138] * (0.5 * sp[228]);
    sp[304] = sp[138] * (0.5 * sp[229]);
    sp[305] = sp[138] * (0.5 * sp[230]);
    sp[306] = (1 + sp[119]) * (0.5 * sp[255]);
    sp[307] = (1 + sp[119]) * (0.5 * sp[256]);
    sp[308] = (1 + sp[119]) * (0.5 * sp[257]);
    sp[309] = sp[179] * (0.5 * sp[228]);
    sp[310] = sp[179] * (0.5 * sp[229]);
    sp[311] = sp[179] * (0.5 * sp[230]);
    sp[312] = -1 * sp[306] + sp[303];
    sp[313] = -1 * sp[307] + sp[304];
    sp[314] = -1 * sp[308] + sp[305];
    sp[315] = -1 * sp[309] + sp[300];
    sp[316] = -1 * sp[310] + sp[301];
    sp[317] = -1 * sp[311] + sp[302];
    sp[318] = sp[312] * sp[99];
    sp[319] = sp[313] * sp[99];
    sp[320] = sp[314] * sp[99];
    sp[321] = sp[315] * sp[99];
    sp[322] = sp[316] * sp[99];
    sp[323] = sp[317] * sp[99];
    sp[324] = sp[138] * sp[198];
    sp[325] = (1 + sp[119]) * sp[179];
    sp[326] = sp[324] + -1 * sp[325];
    sp[327] = sp[326] * (0.5 * sp[222]);
    sp[328] = sp[326] * (0.5 * sp[223]);
    sp[329] = sp[326] * (0.5 * sp[224]);
    sp[330] = sp[291] + sp[318];
    sp[331] = sp[292] + sp[319];
    sp[332] = sp[293] + sp[320];
    sp[333] = sp[294] + sp[321];
    sp[334] = sp[295] + sp[322];
    sp[335] = sp[296] + sp[323];
    sp[336] = sp[297] + sp[327];
    sp[337] = sp[298] + sp[328];
    sp[338] = sp[299] + sp[329];
    sp[339] = (1 + sp[36]) * sp[254];
    sp[340] = sp[287] * sp[67];
    sp[341] = sp[339] + sp[340];
    sp[342] = sp[326] * sp[99];
    sp[343] = sp[341] + sp[342];
    sp[344] = (1 + sp[36]) * (0.5 * sp[255]);
    sp[345] = (1 + sp[36]) * (0.5 * sp[256]);
    sp[346] = (1 + sp[36]) * (0.5 * sp[257]);
    sp[347] = sp[344] + sp[344];
    sp[348] = sp[345] + sp[345];
    sp[349] = sp[346] + sp[346];
    sp[350] = sp[67] * (0.5 * sp[228]);
    sp[351] = sp[67] * (0.5 * sp[229]);
    sp[352] = sp[67] * (0.5 * sp[230]);
    sp[353] = sp[350] + sp[350];
    sp[354] = sp[351] + sp[351];
    sp[355] = sp[352] + sp[352];
    sp[356] = sp[353] + sp[347];
    sp[357] = sp[354] + sp[348];
    sp[358] = sp[349] + sp[355];
    sp[359] = sp[99] * (0.5 * sp[222]);
    sp[360] = sp[99] * (0.5 * sp[223]);
    sp[361] = sp[99] * (0.5 * sp[224]);
    sp[362] = sp[359] + sp[359];
    sp[363] = sp[360] + sp[360];
    sp[364] = sp[361] + sp[361];
    sp[365] = sp[356] + sp[362];
    sp[366] = sp[357] + sp[363];
    sp[367] = sp[358] + sp[364];
    sp[368] = sp[138] * (0.5 * sp[255]);
    sp[369] = sp[138] * (0.5 * sp[256]);
    sp[370] = sp[138] * (0.5 * sp[257]);
    sp[371] = sp[368] + sp[368];
    sp[372] = sp[369] + sp[369];
    sp[373] = sp[370] + sp[370];
    sp[374] = (1 + sp[119]) * (0.5 * sp[228]);
    sp[375] = (1 + sp[119]) * (0.5 * sp[229]);
    sp[376] = (1 + sp[119]) * (0.5 * sp[230]);
    sp[377] = sp[374] + sp[374];
    sp[378] = sp[375] + sp[375];
    sp[379] = sp[376] + sp[376];
    sp[380] = sp[377] + sp[371];
    sp[381] = sp[378] + sp[372];
    sp[382] = sp[373] + sp[379];
    sp[383] = sp[158] * (0.5 * sp[222]);
    sp[384] = sp[158] * (0.5 * sp[223]);
    sp[385] = sp[158] * (0.5 * sp[224]);
    sp[386] = sp[383] + sp[383];
    sp[387] = sp[384] + sp[384];
    sp[388] = sp[385] + sp[385];
    sp[389] = sp[380] + sp[386];
    sp[390] = sp[381] + sp[387];
    sp[391] = sp[382] + sp[388];
    sp[392] = sp[179] * (0.5 * sp[255]);
    sp[393] = sp[179] * (0.5 * sp[256]);
    sp[394] = sp[179] * (0.5 * sp[257]);
    sp[395] = sp[392] + sp[392];
    sp[396] = sp[393] + sp[393];
    sp[397] = sp[394] + sp[394];
    sp[398] = sp[198] * (0.5 * sp[228]);
    sp[399] = sp[198] * (0.5 * sp[229]);
    sp[400] = sp[198] * (0.5 * sp[230]);
    sp[401] = sp[398] + sp[398];
    sp[402] = sp[399] + sp[399];
    sp[403] = sp[400] + sp[400];
    sp[404] = sp[401] + sp[395];
    sp[405] = sp[402] + sp[396];
    sp[406] = sp[397] + sp[403];
    sp[407] = (1 + sp[218]) * (0.5 * sp[222]);
    sp[408] = (1 + sp[218]) * (0.5 * sp[223]);
    sp[409] = (1 + sp[218]) * (0.5 * sp[224]);
    sp[410] = sp[407] + sp[407];
    sp[411] = sp[408] + sp[408];
    sp[412] = sp[409] + sp[409];
    sp[413] = sp[404] + sp[410];
    sp[414] = sp[405] + sp[411];
    sp[415] = sp[406] + sp[412];
    sp[416] = sp[99] * (0.5 * sp[228]);
    sp[417] = sp[99] * (0.5 * sp[229]);
    sp[418] = sp[99] * (0.5 * sp[230]);
    sp[419] = sp[67] * (0.5 * sp[222]);
    sp[420] = sp[67] * (0.5 * sp[223]);
    sp[421] = sp[67] * (0.5 * sp[224]);
    sp[422] = -1 * sp[419] + sp[416];
    sp[423] = -1 * sp[420] + sp[417];
    sp[424] = -1 * sp[421] + sp[418];
    sp[425] = -1 * sp[231] + sp[234];
    sp[426] = -1 * sp[232] + sp[235];
    sp[427] = -1 * sp[233] + sp[236];
    sp[428] = -1 * sp[416] + sp[419];
    sp[429] = -1 * sp[417] + sp[420];
    sp[430] = -1 * sp[418] + sp[421];
    sp[431] = -1 * sp[225] + sp[237];
    sp[432] = -1 * sp[226] + sp[238];
    sp[433] = -1 * sp[227] + sp[239];
    sp[434] = (1 + sp[36]) * (0.5 * sp[222]);
    sp[435] = (1 + sp[36]) * (0.5 * sp[223]);
    sp[436] = (1 + sp[36]) * (0.5 * sp[224]);
    sp[437] = sp[99] * (0.5 * sp[255]);
    sp[438] = sp[99] * (0.5 * sp[256]);
    sp[439] = sp[99] * (0.5 * sp[257]);
    sp[440] = -1 * sp[437] + sp[434];
    sp[441] = -1 * sp[438] + sp[435];
    sp[442] = -1 * sp[439] + sp[436];
    sp[443] = -1 * sp[261] + sp[270];
    sp[444] = -1 * sp[262] + sp[271];
    sp[445] = -1 * sp[263] + sp[272];
    sp[446] = -1 * sp[434] + sp[437];
    sp[447] = -1 * sp[435] + sp[438];
    sp[448] = -1 * sp[436] + sp[439];
    sp[449] = -1 * sp[264] + sp[267];
    sp[450] = -1 * sp[265] + sp[268];
    sp[451] = -1 * sp[266] + sp[269];
    sp[452] = (1 + sp[119]) * (-1 * (0.5 * sp[255]));
    sp[453] = (1 + sp[119]) * (-1 * (0.5 * sp[256]));
    sp[454] = (1 + sp[119]) * (-1 * (0.5 * sp[257]));
    sp[455] = -1 * sp[179] * (0.5 * sp[228]);
    sp[456] = -1 * sp[179] * (0.5 * sp[229]);
    sp[457] = -1 * sp[179] * (0.5 * sp[230]);
    sp[458] = sp[452] + sp[303];
    sp[459] = sp[453] + sp[304];
    sp[460] = sp[454] + sp[305];
    sp[461] = sp[455] + sp[300];
    sp[462] = sp[456] + sp[301];
    sp[463] = sp[302] + sp[457];
    sp[464] = sp[67] * (0.5 * sp[255]);
    sp[465] = sp[67] * (0.5 * sp[256]);
    sp[466] = sp[67] * (0.5 * sp[257]);
    sp[467] = sp[198] * (-1 * (0.5 * sp[255]));
    sp[468] = sp[198] * (-1 * (0.5 * sp[256]));
    sp[469] = sp[198] * (-1 * (0.5 * sp[257]));
    sp[470] = -1 * (1 + sp[36]) * (0.5 * sp[228]);
    sp[471] = -1 * (1 + sp[36]) * (0.5 * sp[229]);
    sp[472] = -1 * (1 + sp[36]) * (0.5 * sp[230]);
    sp[473] = sp[470] + sp[464];
    sp[474] = sp[471] + sp[465];
    sp[475] = sp[466] + sp[472];
    sp[476] = sp[467] + sp[309];
    sp[477] = sp[468] + sp[310];
    sp[478] = sp[469] + sp[311];
    sp[479] = sp[67] * (-1 * (0.5 * sp[255]));
    sp[480] = sp[67] * (-1 * (0.5 * sp[256]));
    sp[481] = sp[67] * (-1 * (0.5 * sp[257]));
    sp[482] = -1 * sp[138] * (0.5 * sp[228]);
    sp[483] = -1 * sp[138] * (0.5 * sp[229]);
    sp[484] = -1 * sp[138] * (0.5 * sp[230]);
    sp[485] = (1 + sp[36]) * (0.5 * sp[228]);
    sp[486] = (1 + sp[36]) * (0.5 * sp[229]);
    sp[487] = (1 + sp[36]) * (0.5 * sp[230]);
    sp[488] = sp[479] + sp[485];
    sp[489] = sp[480] + sp[486];
    sp[490] = sp[481] + sp[487];
    sp[491] = sp[482] + sp[306];
    sp[492] = sp[483] + sp[307];
    sp[493] = sp[308] + sp[484];
    sp[494] = std::abs(sp[13]);
    alignas(32) double TP0[2] = {};
    alignas(32) double TP1[2] = {};
    alignas(32) double TP2[2] = {};
    alignas(32) double TP3[2] = {};
    alignas(32) double TP4[2] = {};
    alignas(32) double TP5[2] = {};
    alignas(32) double TP6[2] = {};
    alignas(32) double TP7[2] = {};
    alignas(32) double TP8[2] = {};
    alignas(32) double BF0[4][4] = {};
    alignas(32) double TP9[2] = {};
    alignas(32) double TP10[2] = {};
    alignas(32) double TP11[2] = {};
    alignas(32) double TP12[2] = {};
    alignas(32) double TP13[2] = {};
    alignas(32) double TP14[2] = {};
    alignas(32) double TP15[2] = {};
    alignas(32) double TP16[2] = {};
    alignas(32) double TP17[2] = {};
    alignas(32) double TP18[2] = {};
    alignas(32) double TP19[2] = {};
    alignas(32) double TP20[2] = {};
    alignas(32) double TP21[2] = {};
    alignas(32) double TP22[2] = {};
    alignas(32) double TP23[2] = {};
    alignas(32) double TP24[2] = {};
    alignas(32) double TP25[2] = {};
    alignas(32) double TP26[2] = {};
    alignas(32) double TP27[2] = {};
    alignas(32) double TP28[2] = {};
    alignas(32) double TP29[2] = {};
    alignas(32) double TP30[2] = {};
    alignas(32) double TP31[2] = {};
    alignas(32) double TP32[2] = {};
    alignas(32) double TP33[2] = {};
    alignas(32) double TP34[2] = {};
    alignas(32) double TP35[2] = {};
    alignas(32) double TP36[2] = {};
    alignas(32) double TP37[2] = {};
    alignas(32) double TP38[2] = {};
    alignas(32) double TP39[2] = {};
    alignas(32) double TP40[2] = {};
    alignas(32) double TP41[2] = {};
    alignas(32) double TP42[2] = {};
    alignas(32) double TP43[2] = {};
    alignas(32) double TP44[2] = {};
    alignas(32) double TP45[2] = {};
    alignas(32) double TP46[2] = {};
    alignas(32) double TP47[2] = {};
    alignas(32) double TP48[2] = {};
    alignas(32) double TP49[2] = {};
    alignas(32) double TP50[2] = {};
    alignas(32) double TP51[2] = {};
    alignas(32) double TP52[2] = {};
    alignas(32) double TP53[2] = {};
    alignas(32) double TP54[2] = {};
    alignas(32) double TP55[2] = {};
    alignas(32) double TP56[2] = {};
    alignas(32) double TP57[2] = {};
    alignas(32) double TP58[2] = {};
    alignas(32) double TP59[2] = {};
    alignas(32) double TP60[2] = {};
    alignas(32) double TP61[2] = {};
    alignas(32) double TP62[2] = {};
    alignas(32) double TP63[2] = {};
    alignas(32) double TP64[2] = {};
    alignas(32) double TP65[2] = {};
    alignas(32) double TP66[2] = {};
    alignas(32) double TP67[2] = {};
    alignas(32) double TP68[2] = {};
    alignas(32) double TP69[2] = {};
    alignas(32) double TP70[2] = {};
    alignas(32) double TP71[2] = {};
    alignas(32) double TP72[2] = {};
    alignas(32) double TP73[2] = {};
    alignas(32) double TP74[2] = {};
    alignas(32) double TP75[2] = {};
    alignas(32) double TP76[2] = {};
    alignas(32) double TP77[2] = {};
    alignas(32) double TP78[2] = {};
    alignas(32) double TP79[2] = {};
    alignas(32) double TP80[2] = {};
    for (int iq = 0; iq < 5; ++iq)
    {
        // Quadrature loop body setup (num_points=5)
        // Unstructured varying computations for num_points=5
        double w6 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w6 += w[6][ic] * FE34_C0_Q5[0][iq][ic];
        double w5 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w5 += w[5][ic] * FE34_C0_Q5[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w4 += w[4][ic] * FE34_C0_Q5[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w3 += w[3][ic] * FE34_C0_Q5[0][iq][ic];
        alignas(32) double sv5[752];
        sv5[0] = (-2 + sp[221]) * (2 * w6);
        sv5[1] = sv5[0] + w5;
        sv5[2] = sv5[1] * (2 * sp[330]);
        sv5[3] = sv5[1] * (2 * sp[331]);
        sv5[4] = sv5[1] * (2 * sp[332]);
        sv5[5] = sv5[1] * (2 * sp[333]);
        sv5[6] = sv5[1] * (2 * sp[334]);
        sv5[7] = sv5[1] * (2 * sp[335]);
        sv5[8] = sv5[1] * (2 * sp[336]);
        sv5[9] = sv5[1] * (2 * sp[337]);
        sv5[10] = sv5[1] * (2 * sp[338]);
        sv5[11] = sp[413] * (2 * w6);
        sv5[12] = sp[414] * (2 * w6);
        sv5[13] = sp[415] * (2 * w6);
        sv5[14] = sp[389] * (2 * w6);
        sv5[15] = sp[390] * (2 * w6);
        sv5[16] = sp[391] * (2 * w6);
        sv5[17] = sp[365] * (2 * w6);
        sv5[18] = sp[366] * (2 * w6);
        sv5[19] = sp[367] * (2 * w6);
        sv5[20] = 2 * sp[343] * sv5[11];
        sv5[21] = 2 * sp[343] * sv5[12];
        sv5[22] = 2 * sp[343] * sv5[13];
        sv5[23] = 2 * sp[343] * sv5[14];
        sv5[24] = 2 * sp[343] * sv5[15];
        sv5[25] = 2 * sp[343] * sv5[16];
        sv5[26] = 2 * sp[343] * sv5[17];
        sv5[27] = 2 * sp[343] * sv5[18];
        sv5[28] = 2 * sp[343] * sv5[19];
        sv5[29] = sv5[2] + sv5[20];
        sv5[30] = sv5[3] + sv5[21];
        sv5[31] = sv5[4] + sv5[22];
        sv5[32] = sv5[5] + sv5[23];
        sv5[33] = sv5[6] + sv5[24];
        sv5[34] = sv5[7] + sv5[25];
        sv5[35] = sv5[8] + sv5[26];
        sv5[36] = sv5[9] + sv5[27];
        sv5[37] = sv5[10] + sv5[28];
        sv5[38] = (1 + sp[36]) * sv5[29];
        sv5[39] = (1 + sp[36]) * sv5[30];
        sv5[40] = (1 + sp[36]) * sv5[31];
        sv5[41] = (1 + sp[36]) * sv5[32];
        sv5[42] = (1 + sp[36]) * sv5[33];
        sv5[43] = (1 + sp[36]) * sv5[34];
        sv5[44] = (1 + sp[36]) * sv5[35];
        sv5[45] = (1 + sp[36]) * sv5[36];
        sv5[46] = (1 + sp[36]) * sv5[37];
        sv5[47] = sv5[1] * (2 * sp[343]);
        sv5[48] = sv5[47] * (0.5 * sp[255]);
        sv5[49] = sv5[47] * (0.5 * sp[256]);
        sv5[50] = sv5[47] * (0.5 * sp[257]);
        sv5[51] = sv5[44] + sv5[48];
        sv5[52] = sv5[45] + sv5[49];
        sv5[53] = sv5[46] + sv5[50];
        sv5[54] = sp[240] * (-1 * w4);
        sv5[55] = sp[241] * (-1 * w4);
        sv5[56] = sp[242] * (-1 * w4);
        sv5[57] = sp[243] * (-1 * w4);
        sv5[58] = sp[244] * (-1 * w4);
        sv5[59] = sp[245] * (-1 * w4);
        sv5[60] = sv5[38] + sv5[54];
        sv5[61] = sv5[39] + sv5[55];
        sv5[62] = sv5[40] + sv5[56];
        sv5[63] = sv5[41] + sv5[57];
        sv5[64] = sv5[42] + sv5[58];
        sv5[65] = sv5[43] + sv5[59];
        sv5[66] = sv5[60] * sp[14];
        sv5[67] = sv5[60] * sp[18];
        sv5[68] = sv5[60] * sp[21];
        sv5[69] = sv5[61] * sp[14];
        sv5[70] = sv5[61] * sp[18];
        sv5[71] = sv5[61] * sp[21];
        sv5[72] = sv5[62] * sp[14];
        sv5[73] = sv5[62] * sp[18];
        sv5[74] = sv5[62] * sp[21];
        sv5[75] = sv5[63] * sp[14];
        sv5[76] = sv5[63] * sp[18];
        sv5[77] = sv5[63] * sp[21];
        sv5[78] = sv5[64] * sp[14];
        sv5[79] = sv5[64] * sp[18];
        sv5[80] = sv5[64] * sp[21];
        sv5[81] = sv5[65] * sp[14];
        sv5[82] = sv5[65] * sp[18];
        sv5[83] = sv5[65] * sp[21];
        sv5[84] = sv5[51] * sp[14];
        sv5[85] = sv5[51] * sp[18];
        sv5[86] = sv5[51] * sp[21];
        sv5[87] = sv5[52] * sp[14];
        sv5[88] = sv5[52] * sp[18];
        sv5[89] = sv5[52] * sp[21];
        sv5[90] = sv5[53] * sp[14];
        sv5[91] = sv5[53] * sp[18];
        sv5[92] = sv5[53] * sp[21];
        sv5[93] = sv5[29] * sp[138];
        sv5[94] = sv5[30] * sp[138];
        sv5[95] = sv5[31] * sp[138];
        sv5[96] = sv5[32] * sp[138];
        sv5[97] = sv5[33] * sp[138];
        sv5[98] = sv5[34] * sp[138];
        sv5[99] = sv5[35] * sp[138];
        sv5[100] = sv5[36] * sp[138];
        sv5[101] = sv5[37] * sp[138];
        sv5[102] = sv5[96] + sv5[48];
        sv5[103] = sv5[97] + sv5[49];
        sv5[104] = sv5[98] + sv5[50];
        sv5[105] = sp[422] * (-1 * w4);
        sv5[106] = sp[423] * (-1 * w4);
        sv5[107] = sp[424] * (-1 * w4);
        sv5[108] = sp[425] * (-1 * w4);
        sv5[109] = sp[426] * (-1 * w4);
        sv5[110] = sp[427] * (-1 * w4);
        sv5[111] = sv5[93] + sv5[105];
        sv5[112] = sv5[94] + sv5[106];
        sv5[113] = sv5[95] + sv5[107];
        sv5[114] = sv5[99] + sv5[108];
        sv5[115] = sv5[100] + sv5[109];
        sv5[116] = sv5[101] + sv5[110];
        sv5[117] = sv5[111] * sp[14];
        sv5[118] = sv5[111] * sp[18];
        sv5[119] = sv5[111] * sp[21];
        sv5[120] = sv5[112] * sp[14];
        sv5[121] = sv5[112] * sp[18];
        sv5[122] = sv5[112] * sp[21];
        sv5[123] = sv5[113] * sp[14];
        sv5[124] = sv5[113] * sp[18];
        sv5[125] = sv5[113] * sp[21];
        sv5[126] = sv5[102] * sp[14];
        sv5[127] = sv5[102] * sp[18];
        sv5[128] = sv5[102] * sp[21];
        sv5[129] = sv5[103] * sp[14];
        sv5[130] = sv5[103] * sp[18];
        sv5[131] = sv5[103] * sp[21];
        sv5[132] = sv5[104] * sp[14];
        sv5[133] = sv5[104] * sp[18];
        sv5[134] = sv5[104] * sp[21];
        sv5[135] = sv5[114] * sp[14];
        sv5[136] = sv5[114] * sp[18];
        sv5[137] = sv5[114] * sp[21];
        sv5[138] = sv5[115] * sp[14];
        sv5[139] = sv5[115] * sp[18];
        sv5[140] = sv5[115] * sp[21];
        sv5[141] = sv5[116] * sp[14];
        sv5[142] = sv5[116] * sp[18];
        sv5[143] = sv5[116] * sp[21];
        sv5[144] = sv5[29] * sp[179];
        sv5[145] = sv5[30] * sp[179];
        sv5[146] = sv5[31] * sp[179];
        sv5[147] = sv5[32] * sp[179];
        sv5[148] = sv5[33] * sp[179];
        sv5[149] = sv5[34] * sp[179];
        sv5[150] = sv5[35] * sp[179];
        sv5[151] = sv5[36] * sp[179];
        sv5[152] = sv5[37] * sp[179];
        sv5[153] = sv5[144] + sv5[48];
        sv5[154] = sv5[145] + sv5[49];
        sv5[155] = sv5[146] + sv5[50];
        sv5[156] = sp[428] * (-1 * w4);
        sv5[157] = sp[429] * (-1 * w4);
        sv5[158] = sp[430] * (-1 * w4);
        sv5[159] = sp[431] * (-1 * w4);
        sv5[160] = sp[432] * (-1 * w4);
        sv5[161] = sp[433] * (-1 * w4);
        sv5[162] = sv5[147] + sv5[156];
        sv5[163] = sv5[148] + sv5[157];
        sv5[164] = sv5[149] + sv5[158];
        sv5[165] = sv5[150] + sv5[159];
        sv5[166] = sv5[151] + sv5[160];
        sv5[167] = sv5[152] + sv5[161];
        sv5[168] = sv5[153] * sp[14];
        sv5[169] = sv5[153] * sp[18];
        sv5[170] = sv5[153] * sp[21];
        sv5[171] = sv5[154] * sp[14];
        sv5[172] = sv5[154] * sp[18];
        sv5[173] = sv5[154] * sp[21];
        sv5[174] = sv5[155] * sp[14];
        sv5[175] = sv5[155] * sp[18];
        sv5[176] = sv5[155] * sp[21];
        sv5[177] = sv5[162] * sp[14];
        sv5[178] = sv5[162] * sp[18];
        sv5[179] = sv5[162] * sp[21];
        sv5[180] = sv5[163] * sp[14];
        sv5[181] = sv5[163] * sp[18];
        sv5[182] = sv5[163] * sp[21];
        sv5[183] = sv5[164] * sp[14];
        sv5[184] = sv5[164] * sp[18];
        sv5[185] = sv5[164] * sp[21];
        sv5[186] = sv5[165] * sp[14];
        sv5[187] = sv5[165] * sp[18];
        sv5[188] = sv5[165] * sp[21];
        sv5[189] = sv5[166] * sp[14];
        sv5[190] = sv5[166] * sp[18];
        sv5[191] = sv5[166] * sp[21];
        sv5[192] = sv5[167] * sp[14];
        sv5[193] = sv5[167] * sp[18];
        sv5[194] = sv5[167] * sp[21];
        sv5[195] = sv5[29] * sp[67];
        sv5[196] = sv5[30] * sp[67];
        sv5[197] = sv5[31] * sp[67];
        sv5[198] = sv5[32] * sp[67];
        sv5[199] = sv5[33] * sp[67];
        sv5[200] = sv5[34] * sp[67];
        sv5[201] = sv5[35] * sp[67];
        sv5[202] = sv5[36] * sp[67];
        sv5[203] = sv5[37] * sp[67];
        sv5[204] = sv5[47] * (0.5 * sp[228]);
        sv5[205] = sv5[47] * (0.5 * sp[229]);
        sv5[206] = sv5[47] * (0.5 * sp[230]);
        sv5[207] = sv5[201] + sv5[204];
        sv5[208] = sv5[202] + sv5[205];
        sv5[209] = sv5[203] + sv5[206];
        sv5[210] = sp[273] * (-1 * w4);
        sv5[211] = sp[274] * (-1 * w4);
        sv5[212] = sp[275] * (-1 * w4);
        sv5[213] = sp[276] * (-1 * w4);
        sv5[214] = sp[277] * (-1 * w4);
        sv5[215] = sp[278] * (-1 * w4);
        sv5[216] = sv5[195] + sv5[210];
        sv5[217] = sv5[196] + sv5[211];
        sv5[218] = sv5[197] + sv5[212];
        sv5[219] = sv5[198] + sv5[213];
        sv5[220] = sv5[199] + sv5[214];
        sv5[221] = sv5[200] + sv5[215];
        sv5[222] = sv5[216] * sp[41];
        sv5[223] = sv5[216] * sp[46];
        sv5[224] = sv5[216] * sp[52];
        sv5[225] = sv5[217] * sp[41];
        sv5[226] = sv5[217] * sp[46];
        sv5[227] = sv5[217] * sp[52];
        sv5[228] = sv5[218] * sp[41];
        sv5[229] = sv5[218] * sp[46];
        sv5[230] = sv5[218] * sp[52];
        sv5[231] = sv5[219] * sp[41];
        sv5[232] = sv5[219] * sp[46];
        sv5[233] = sv5[219] * sp[52];
        sv5[234] = sv5[220] * sp[41];
        sv5[235] = sv5[220] * sp[46];
        sv5[236] = sv5[220] * sp[52];
        sv5[237] = sv5[221] * sp[41];
        sv5[238] = sv5[221] * sp[46];
        sv5[239] = sv5[221] * sp[52];
        sv5[240] = sv5[207] * sp[41];
        sv5[241] = sv5[207] * sp[46];
        sv5[242] = sv5[207] * sp[52];
        sv5[243] = sv5[208] * sp[41];
        sv5[244] = sv5[208] * sp[46];
        sv5[245] = sv5[208] * sp[52];
        sv5[246] = sv5[209] * sp[41];
        sv5[247] = sv5[209] * sp[46];
        sv5[248] = sv5[209] * sp[52];
        sv5[249] = (1 + sp[119]) * sv5[29];
        sv5[250] = (1 + sp[119]) * sv5[30];
        sv5[251] = (1 + sp[119]) * sv5[31];
        sv5[252] = (1 + sp[119]) * sv5[32];
        sv5[253] = (1 + sp[119]) * sv5[33];
        sv5[254] = (1 + sp[119]) * sv5[34];
        sv5[255] = (1 + sp[119]) * sv5[35];
        sv5[256] = (1 + sp[119]) * sv5[36];
        sv5[257] = (1 + sp[119]) * sv5[37];
        sv5[258] = sv5[252] + sv5[204];
        sv5[259] = sv5[253] + sv5[205];
        sv5[260] = sv5[254] + sv5[206];
        sv5[261] = sp[440] * (-1 * w4);
        sv5[262] = sp[441] * (-1 * w4);
        sv5[263] = sp[442] * (-1 * w4);
        sv5[264] = sp[443] * (-1 * w4);
        sv5[265] = sp[444] * (-1 * w4);
        sv5[266] = sp[445] * (-1 * w4);
        sv5[267] = sv5[249] + sv5[261];
        sv5[268] = sv5[250] + sv5[262];
        sv5[269] = sv5[251] + sv5[263];
        sv5[270] = sv5[255] + sv5[264];
        sv5[271] = sv5[256] + sv5[265];
        sv5[272] = sv5[257] + sv5[266];
        sv5[273] = sv5[267] * sp[41];
        sv5[274] = sv5[267] * sp[46];
        sv5[275] = sv5[267] * sp[52];
        sv5[276] = sv5[268] * sp[41];
        sv5[277] = sv5[268] * sp[46];
        sv5[278] = sv5[268] * sp[52];
        sv5[279] = sv5[269] * sp[41];
        sv5[280] = sv5[269] * sp[46];
        sv5[281] = sv5[269] * sp[52];
        sv5[282] = sv5[258] * sp[41];
        sv5[283] = sv5[258] * sp[46];
        sv5[284] = sv5[258] * sp[52];
        sv5[285] = sv5[259] * sp[41];
        sv5[286] = sv5[259] * sp[46];
        sv5[287] = sv5[259] * sp[52];
        sv5[288] = sv5[260] * sp[41];
        sv5[289] = sv5[260] * sp[46];
        sv5[290] = sv5[260] * sp[52];
        sv5[291] = sv5[270] * sp[41];
        sv5[292] = sv5[270] * sp[46];
        sv5[293] = sv5[270] * sp[52];
        sv5[294] = sv5[271] * sp[41];
        sv5[295] = sv5[271] * sp[46];
        sv5[296] = sv5[271] * sp[52];
        sv5[297] = sv5[272] * sp[41];
        sv5[298] = sv5[272] * sp[46];
        sv5[299] = sv5[272] * sp[52];
        sv5[300] = sv5[29] * sp[198];
        sv5[301] = sv5[30] * sp[198];
        sv5[302] = sv5[31] * sp[198];
        sv5[303] = sv5[32] * sp[198];
        sv5[304] = sv5[33] * sp[198];
        sv5[305] = sv5[34] * sp[198];
        sv5[306] = sv5[35] * sp[198];
        sv5[307] = sv5[36] * sp[198];
        sv5[308] = sv5[37] * sp[198];
        sv5[309] = sv5[300] + sv5[204];
        sv5[310] = sv5[301] + sv5[205];
        sv5[311] = sv5[302] + sv5[206];
        sv5[312] = sp[446] * (-1 * w4);
        sv5[313] = sp[447] * (-1 * w4);
        sv5[314] = sp[448] * (-1 * w4);
        sv5[315] = sp[449] * (-1 * w4);
        sv5[316] = sp[450] * (-1 * w4);
        sv5[317] = sp[451] * (-1 * w4);
        sv5[318] = sv5[303] + sv5[312];
        sv5[319] = sv5[304] + sv5[313];
        sv5[320] = sv5[305] + sv5[314];
        sv5[321] = sv5[306] + sv5[315];
        sv5[322] = sv5[307] + sv5[316];
        sv5[323] = sv5[308] + sv5[317];
        sv5[324] = sv5[309] * sp[41];
        sv5[325] = sv5[309] * sp[46];
        sv5[326] = sv5[309] * sp[52];
        sv5[327] = sv5[310] * sp[41];
        sv5[328] = sv5[310] * sp[46];
        sv5[329] = sv5[310] * sp[52];
        sv5[330] = sv5[311] * sp[41];
        sv5[331] = sv5[311] * sp[46];
        sv5[332] = sv5[311] * sp[52];
        sv5[333] = sv5[318] * sp[41];
        sv5[334] = sv5[318] * sp[46];
        sv5[335] = sv5[318] * sp[52];
        sv5[336] = sv5[319] * sp[41];
        sv5[337] = sv5[319] * sp[46];
        sv5[338] = sv5[319] * sp[52];
        sv5[339] = sv5[320] * sp[41];
        sv5[340] = sv5[320] * sp[46];
        sv5[341] = sv5[320] * sp[52];
        sv5[342] = sv5[321] * sp[41];
        sv5[343] = sv5[321] * sp[46];
        sv5[344] = sv5[321] * sp[52];
        sv5[345] = sv5[322] * sp[41];
        sv5[346] = sv5[322] * sp[46];
        sv5[347] = sv5[322] * sp[52];
        sv5[348] = sv5[323] * sp[41];
        sv5[349] = sv5[323] * sp[46];
        sv5[350] = sv5[323] * sp[52];
        sv5[351] = sv5[222] + sv5[66];
        sv5[352] = sv5[223] + sv5[67];
        sv5[353] = sv5[68] + sv5[224];
        sv5[354] = sv5[273] + sv5[117];
        sv5[355] = sv5[274] + sv5[118];
        sv5[356] = sv5[119] + sv5[275];
        sv5[357] = sv5[324] + sv5[168];
        sv5[358] = sv5[325] + sv5[169];
        sv5[359] = sv5[170] + sv5[326];
        sv5[360] = sv5[225] + sv5[69];
        sv5[361] = sv5[226] + sv5[70];
        sv5[362] = sv5[71] + sv5[227];
        sv5[363] = sv5[276] + sv5[120];
        sv5[364] = sv5[277] + sv5[121];
        sv5[365] = sv5[122] + sv5[278];
        sv5[366] = sv5[327] + sv5[171];
        sv5[367] = sv5[328] + sv5[172];
        sv5[368] = sv5[173] + sv5[329];
        sv5[369] = sv5[228] + sv5[72];
        sv5[370] = sv5[229] + sv5[73];
        sv5[371] = sv5[74] + sv5[230];
        sv5[372] = sv5[279] + sv5[123];
        sv5[373] = sv5[280] + sv5[124];
        sv5[374] = sv5[125] + sv5[281];
        sv5[375] = sv5[330] + sv5[174];
        sv5[376] = sv5[331] + sv5[175];
        sv5[377] = sv5[176] + sv5[332];
        sv5[378] = sv5[231] + sv5[75];
        sv5[379] = sv5[232] + sv5[76];
        sv5[380] = sv5[77] + sv5[233];
        sv5[381] = sv5[282] + sv5[126];
        sv5[382] = sv5[283] + sv5[127];
        sv5[383] = sv5[128] + sv5[284];
        sv5[384] = sv5[333] + sv5[177];
        sv5[385] = sv5[334] + sv5[178];
        sv5[386] = sv5[179] + sv5[335];
        sv5[387] = sv5[234] + sv5[78];
        sv5[388] = sv5[235] + sv5[79];
        sv5[389] = sv5[80] + sv5[236];
        sv5[390] = sv5[285] + sv5[129];
        sv5[391] = sv5[286] + sv5[130];
        sv5[392] = sv5[131] + sv5[287];
        sv5[393] = sv5[336] + sv5[180];
        sv5[394] = sv5[337] + sv5[181];
        sv5[395] = sv5[182] + sv5[338];
        sv5[396] = sv5[237] + sv5[81];
        sv5[397] = sv5[238] + sv5[82];
        sv5[398] = sv5[83] + sv5[239];
        sv5[399] = sv5[288] + sv5[132];
        sv5[400] = sv5[289] + sv5[133];
        sv5[401] = sv5[134] + sv5[290];
        sv5[402] = sv5[339] + sv5[183];
        sv5[403] = sv5[340] + sv5[184];
        sv5[404] = sv5[185] + sv5[341];
        sv5[405] = sv5[240] + sv5[84];
        sv5[406] = sv5[241] + sv5[85];
        sv5[407] = sv5[86] + sv5[242];
        sv5[408] = sv5[291] + sv5[135];
        sv5[409] = sv5[292] + sv5[136];
        sv5[410] = sv5[137] + sv5[293];
        sv5[411] = sv5[342] + sv5[186];
        sv5[412] = sv5[343] + sv5[187];
        sv5[413] = sv5[188] + sv5[344];
        sv5[414] = sv5[243] + sv5[87];
        sv5[415] = sv5[244] + sv5[88];
        sv5[416] = sv5[89] + sv5[245];
        sv5[417] = sv5[294] + sv5[138];
        sv5[418] = sv5[295] + sv5[139];
        sv5[419] = sv5[140] + sv5[296];
        sv5[420] = sv5[345] + sv5[189];
        sv5[421] = sv5[346] + sv5[190];
        sv5[422] = sv5[191] + sv5[347];
        sv5[423] = sv5[246] + sv5[90];
        sv5[424] = sv5[247] + sv5[91];
        sv5[425] = sv5[92] + sv5[248];
        sv5[426] = sv5[297] + sv5[141];
        sv5[427] = sv5[298] + sv5[142];
        sv5[428] = sv5[143] + sv5[299];
        sv5[429] = sv5[348] + sv5[192];
        sv5[430] = sv5[349] + sv5[193];
        sv5[431] = sv5[194] + sv5[350];
        sv5[432] = sv5[29] * sp[99];
        sv5[433] = sv5[30] * sp[99];
        sv5[434] = sv5[31] * sp[99];
        sv5[435] = sv5[32] * sp[99];
        sv5[436] = sv5[33] * sp[99];
        sv5[437] = sv5[34] * sp[99];
        sv5[438] = sv5[35] * sp[99];
        sv5[439] = sv5[36] * sp[99];
        sv5[440] = sv5[37] * sp[99];
        sv5[441] = sv5[47] * (0.5 * sp[222]);
        sv5[442] = sv5[47] * (0.5 * sp[223]);
        sv5[443] = sv5[47] * (0.5 * sp[224]);
        sv5[444] = sv5[438] + sv5[441];
        sv5[445] = sv5[439] + sv5[442];
        sv5[446] = sv5[440] + sv5[443];
        sv5[447] = sp[458] * (-1 * w4);
        sv5[448] = sp[459] * (-1 * w4);
        sv5[449] = sp[460] * (-1 * w4);
        sv5[450] = sp[461] * (-1 * w4);
        sv5[451] = sp[462] * (-1 * w4);
        sv5[452] = sp[463] * (-1 * w4);
        sv5[453] = sv5[432] + sv5[447];
        sv5[454] = sv5[433] + sv5[448];
        sv5[455] = sv5[434] + sv5[449];
        sv5[456] = sv5[435] + sv5[450];
        sv5[457] = sv5[436] + sv5[451];
        sv5[458] = sv5[437] + sv5[452];
        sv5[459] = sv5[453] * sp[73];
        sv5[460] = sv5[453] * sp[78];
        sv5[461] = sv5[453] * sp[84];
        sv5[462] = sv5[454] * sp[73];
        sv5[463] = sv5[454] * sp[78];
        sv5[464] = sv5[454] * sp[84];
        sv5[465] = sv5[455] * sp[73];
        sv5[466] = sv5[455] * sp[78];
        sv5[467] = sv5[455] * sp[84];
        sv5[468] = sv5[456] * sp[73];
        sv5[469] = sv5[456] * sp[78];
        sv5[470] = sv5[456] * sp[84];
        sv5[471] = sv5[457] * sp[73];
        sv5[472] = sv5[457] * sp[78];
        sv5[473] = sv5[457] * sp[84];
        sv5[474] = sv5[458] * sp[73];
        sv5[475] = sv5[458] * sp[78];
        sv5[476] = sv5[458] * sp[84];
        sv5[477] = sv5[444] * sp[73];
        sv5[478] = sv5[444] * sp[78];
        sv5[479] = sv5[444] * sp[84];
        sv5[480] = sv5[445] * sp[73];
        sv5[481] = sv5[445] * sp[78];
        sv5[482] = sv5[445] * sp[84];
        sv5[483] = sv5[446] * sp[73];
        sv5[484] = sv5[446] * sp[78];
        sv5[485] = sv5[446] * sp[84];
        sv5[486] = sv5[29] * sp[158];
        sv5[487] = sv5[30] * sp[158];
        sv5[488] = sv5[31] * sp[158];
        sv5[489] = sv5[32] * sp[158];
        sv5[490] = sv5[33] * sp[158];
        sv5[491] = sv5[34] * sp[158];
        sv5[492] = sv5[35] * sp[158];
        sv5[493] = sv5[36] * sp[158];
        sv5[494] = sv5[37] * sp[158];
        sv5[495] = sv5[489] + sv5[441];
        sv5[496] = sv5[490] + sv5[442];
        sv5[497] = sv5[491] + sv5[443];
        sv5[498] = sp[473] * (-1 * w4);
        sv5[499] = sp[474] * (-1 * w4);
        sv5[500] = sp[475] * (-1 * w4);
        sv5[501] = sp[476] * (-1 * w4);
        sv5[502] = sp[477] * (-1 * w4);
        sv5[503] = sp[478] * (-1 * w4);
        sv5[504] = sv5[486] + sv5[498];
        sv5[505] = sv5[487] + sv5[499];
        sv5[506] = sv5[488] + sv5[500];
        sv5[507] = sv5[492] + sv5[501];
        sv5[508] = sv5[493] + sv5[502];
        sv5[509] = sv5[494] + sv5[503];
        sv5[510] = sv5[504] * sp[73];
        sv5[511] = sv5[504] * sp[78];
        sv5[512] = sv5[504] * sp[84];
        sv5[513] = sv5[505] * sp[73];
        sv5[514] = sv5[505] * sp[78];
        sv5[515] = sv5[505] * sp[84];
        sv5[516] = sv5[506] * sp[73];
        sv5[517] = sv5[506] * sp[78];
        sv5[518] = sv5[506] * sp[84];
        sv5[519] = sv5[495] * sp[73];
        sv5[520] = sv5[495] * sp[78];
        sv5[521] = sv5[495] * sp[84];
        sv5[522] = sv5[496] * sp[73];
        sv5[523] = sv5[496] * sp[78];
        sv5[524] = sv5[496] * sp[84];
        sv5[525] = sv5[497] * sp[73];
        sv5[526] = sv5[497] * sp[78];
        sv5[527] = sv5[497] * sp[84];
        sv5[528] = sv5[507] * sp[73];
        sv5[529] = sv5[507] * sp[78];
        sv5[530] = sv5[507] * sp[84];
        sv5[531] = sv5[508] * sp[73];
        sv5[532] = sv5[508] * sp[78];
        sv5[533] = sv5[508] * sp[84];
        sv5[534] = sv5[509] * sp[73];
        sv5[535] = sv5[509] * sp[78];
        sv5[536] = sv5[509] * sp[84];
        sv5[537] = (1 + sp[218]) * sv5[29];
        sv5[538] = (1 + sp[218]) * sv5[30];
        sv5[539] = (1 + sp[218]) * sv5[31];
        sv5[540] = (1 + sp[218]) * sv5[32];
        sv5[541] = (1 + sp[218]) * sv5[33];
        sv5[542] = (1 + sp[218]) * sv5[34];
        sv5[543] = (1 + sp[218]) * sv5[35];
        sv5[544] = (1 + sp[218]) * sv5[36];
        sv5[545] = (1 + sp[218]) * sv5[37];
        sv5[546] = sv5[537] + sv5[441];
        sv5[547] = sv5[538] + sv5[442];
        sv5[548] = sv5[539] + sv5[443];
        sv5[549] = sp[488] * (-1 * w4);
        sv5[550] = sp[489] * (-1 * w4);
        sv5[551] = sp[490] * (-1 * w4);
        sv5[552] = sp[491] * (-1 * w4);
        sv5[553] = sp[492] * (-1 * w4);
        sv5[554] = sp[493] * (-1 * w4);
        sv5[555] = sv5[540] + sv5[549];
        sv5[556] = sv5[541] + sv5[550];
        sv5[557] = sv5[542] + sv5[551];
        sv5[558] = sv5[543] + sv5[552];
        sv5[559] = sv5[544] + sv5[553];
        sv5[560] = sv5[545] + sv5[554];
        sv5[561] = sv5[546] * sp[73];
        sv5[562] = sv5[546] * sp[78];
        sv5[563] = sv5[546] * sp[84];
        sv5[564] = sv5[547] * sp[73];
        sv5[565] = sv5[547] * sp[78];
        sv5[566] = sv5[547] * sp[84];
        sv5[567] = sv5[548] * sp[73];
        sv5[568] = sv5[548] * sp[78];
        sv5[569] = sv5[548] * sp[84];
        sv5[570] = sv5[555] * sp[73];
        sv5[571] = sv5[555] * sp[78];
        sv5[572] = sv5[555] * sp[84];
        sv5[573] = sv5[556] * sp[73];
        sv5[574] = sv5[556] * sp[78];
        sv5[575] = sv5[556] * sp[84];
        sv5[576] = sv5[557] * sp[73];
        sv5[577] = sv5[557] * sp[78];
        sv5[578] = sv5[557] * sp[84];
        sv5[579] = sv5[558] * sp[73];
        sv5[580] = sv5[558] * sp[78];
        sv5[581] = sv5[558] * sp[84];
        sv5[582] = sv5[559] * sp[73];
        sv5[583] = sv5[559] * sp[78];
        sv5[584] = sv5[559] * sp[84];
        sv5[585] = sv5[560] * sp[73];
        sv5[586] = sv5[560] * sp[78];
        sv5[587] = sv5[560] * sp[84];
        sv5[588] = sv5[351] + sv5[459];
        sv5[589] = sv5[352] + sv5[460];
        sv5[590] = sv5[353] + sv5[461];
        sv5[591] = sv5[354] + sv5[510];
        sv5[592] = sv5[355] + sv5[511];
        sv5[593] = sv5[356] + sv5[512];
        sv5[594] = sv5[357] + sv5[561];
        sv5[595] = sv5[358] + sv5[562];
        sv5[596] = sv5[359] + sv5[563];
        sv5[597] = sv5[360] + sv5[462];
        sv5[598] = sv5[361] + sv5[463];
        sv5[599] = sv5[362] + sv5[464];
        sv5[600] = sv5[363] + sv5[513];
        sv5[601] = sv5[364] + sv5[514];
        sv5[602] = sv5[365] + sv5[515];
        sv5[603] = sv5[366] + sv5[564];
        sv5[604] = sv5[367] + sv5[565];
        sv5[605] = sv5[368] + sv5[566];
        sv5[606] = sv5[369] + sv5[465];
        sv5[607] = sv5[370] + sv5[466];
        sv5[608] = sv5[371] + sv5[467];
        sv5[609] = sv5[372] + sv5[516];
        sv5[610] = sv5[373] + sv5[517];
        sv5[611] = sv5[374] + sv5[518];
        sv5[612] = sv5[375] + sv5[567];
        sv5[613] = sv5[376] + sv5[568];
        sv5[614] = sv5[377] + sv5[569];
        sv5[615] = sv5[378] + sv5[468];
        sv5[616] = sv5[379] + sv5[469];
        sv5[617] = sv5[380] + sv5[470];
        sv5[618] = sv5[381] + sv5[519];
        sv5[619] = sv5[382] + sv5[520];
        sv5[620] = sv5[383] + sv5[521];
        sv5[621] = sv5[384] + sv5[570];
        sv5[622] = sv5[385] + sv5[571];
        sv5[623] = sv5[386] + sv5[572];
        sv5[624] = sv5[387] + sv5[471];
        sv5[625] = sv5[388] + sv5[472];
        sv5[626] = sv5[389] + sv5[473];
        sv5[627] = sv5[390] + sv5[522];
        sv5[628] = sv5[391] + sv5[523];
        sv5[629] = sv5[392] + sv5[524];
        sv5[630] = sv5[393] + sv5[573];
        sv5[631] = sv5[394] + sv5[574];
        sv5[632] = sv5[395] + sv5[575];
        sv5[633] = sv5[396] + sv5[474];
        sv5[634] = sv5[397] + sv5[475];
        sv5[635] = sv5[398] + sv5[476];
        sv5[636] = sv5[399] + sv5[525];
        sv5[637] = sv5[400] + sv5[526];
        sv5[638] = sv5[401] + sv5[527];
        sv5[639] = sv5[402] + sv5[576];
        sv5[640] = sv5[403] + sv5[577];
        sv5[641] = sv5[404] + sv5[578];
        sv5[642] = sv5[405] + sv5[477];
        sv5[643] = sv5[406] + sv5[478];
        sv5[644] = sv5[407] + sv5[479];
        sv5[645] = sv5[408] + sv5[528];
        sv5[646] = sv5[409] + sv5[529];
        sv5[647] = sv5[410] + sv5[530];
        sv5[648] = sv5[411] + sv5[579];
        sv5[649] = sv5[412] + sv5[580];
        sv5[650] = sv5[413] + sv5[581];
        sv5[651] = sv5[414] + sv5[480];
        sv5[652] = sv5[415] + sv5[481];
        sv5[653] = sv5[416] + sv5[482];
        sv5[654] = sv5[417] + sv5[531];
        sv5[655] = sv5[418] + sv5[532];
        sv5[656] = sv5[419] + sv5[533];
        sv5[657] = sv5[420] + sv5[582];
        sv5[658] = sv5[421] + sv5[583];
        sv5[659] = sv5[422] + sv5[584];
        sv5[660] = sv5[423] + sv5[483];
        sv5[661] = sv5[424] + sv5[484];
        sv5[662] = sv5[425] + sv5[485];
        sv5[663] = sv5[426] + sv5[534];
        sv5[664] = sv5[427] + sv5[535];
        sv5[665] = sv5[428] + sv5[536];
        sv5[666] = sv5[429] + sv5[585];
        sv5[667] = sv5[430] + sv5[586];
        sv5[668] = sv5[431] + sv5[587];
        sv5[669] = 1.0 / w[7][0] * w3;
        sv5[670] = sv5[588] * sp[494];
        sv5[671] = sv5[589] * sp[494];
        sv5[672] = sv5[590] * sp[494];
        sv5[673] = sv5[591] * sp[494];
        sv5[674] = sv5[592] * sp[494];
        sv5[675] = sv5[593] * sp[494];
        sv5[676] = sv5[594] * sp[494];
        sv5[677] = sv5[595] * sp[494];
        sv5[678] = sv5[596] * sp[494];
        sv5[679] = sv5[597] * sp[494];
        sv5[680] = sv5[598] * sp[494];
        sv5[681] = sv5[599] * sp[494];
        sv5[682] = sv5[600] * sp[494];
        sv5[683] = sv5[601] * sp[494];
        sv5[684] = sv5[602] * sp[494];
        sv5[685] = sv5[603] * sp[494];
        sv5[686] = sv5[604] * sp[494];
        sv5[687] = sv5[605] * sp[494];
        sv5[688] = sv5[606] * sp[494];
        sv5[689] = sv5[607] * sp[494];
        sv5[690] = sv5[608] * sp[494];
        sv5[691] = sv5[609] * sp[494];
        sv5[692] = sv5[610] * sp[494];
        sv5[693] = sv5[611] * sp[494];
        sv5[694] = sv5[612] * sp[494];
        sv5[695] = sv5[613] * sp[494];
        sv5[696] = sv5[614] * sp[494];
        sv5[697] = sv5[615] * sp[494];
        sv5[698] = sv5[616] * sp[494];
        sv5[699] = sv5[617] * sp[494];
        sv5[700] = sv5[618] * sp[494];
        sv5[701] = sv5[619] * sp[494];
        sv5[702] = sv5[620] * sp[494];
        sv5[703] = sv5[621] * sp[494];
        sv5[704] = sv5[622] * sp[494];
        sv5[705] = sv5[623] * sp[494];
        sv5[706] = sv5[624] * sp[494];
        sv5[707] = sv5[625] * sp[494];
        sv5[708] = sv5[626] * sp[494];
        sv5[709] = sv5[627] * sp[494];
        sv5[710] = sv5[628] * sp[494];
        sv5[711] = sv5[629] * sp[494];
        sv5[712] = sv5[630] * sp[494];
        sv5[713] = sv5[631] * sp[494];
        sv5[714] = sv5[632] * sp[494];
        sv5[715] = sv5[633] * sp[494];
        sv5[716] = sv5[634] * sp[494];
        sv5[717] = sv5[635] * sp[494];
        sv5[718] = sv5[636] * sp[494];
        sv5[719] = sv5[637] * sp[494];
        sv5[720] = sv5[638] * sp[494];
        sv5[721] = sv5[639] * sp[494];
        sv5[722] = sv5[640] * sp[494];
        sv5[723] = sv5[641] * sp[494];
        sv5[724] = sv5[642] * sp[494];
        sv5[725] = sv5[643] * sp[494];
        sv5[726] = sv5[644] * sp[494];
        sv5[727] = sv5[645] * sp[494];
        sv5[728] = sv5[646] * sp[494];
        sv5[729] = sv5[647] * sp[494];
        sv5[730] = sv5[648] * sp[494];
        sv5[731] = sv5[649] * sp[494];
        sv5[732] = sv5[650] * sp[494];
        sv5[733] = sv5[651] * sp[494];
        sv5[734] = sv5[652] * sp[494];
        sv5[735] = sv5[653] * sp[494];
        sv5[736] = sv5[654] * sp[494];
        sv5[737] = sv5[655] * sp[494];
        sv5[738] = sv5[656] * sp[494];
        sv5[739] = sv5[657] * sp[494];
        sv5[740] = sv5[658] * sp[494];
        sv5[741] = sv5[659] * sp[494];
        sv5[742] = sv5[660] * sp[494];
        sv5[743] = sv5[661] * sp[494];
        sv5[744] = sv5[662] * sp[494];
        sv5[745] = sv5[663] * sp[494];
        sv5[746] = sv5[664] * sp[494];
        sv5[747] = sv5[665] * sp[494];
        sv5[748] = sv5[666] * sp[494];
        sv5[749] = sv5[667] * sp[494];
        sv5[750] = sv5[668] * sp[494];
        sv5[751] = sv5[669] * sp[494];
        const double fw0 = sv5[724] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP0[j] += fw0 * FE34_C0_D001_Q5[0][0][j];
        const double fw1 = sv5[733] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP1[j] += fw1 * FE34_C0_D001_Q5[0][0][j];
        const double fw2 = sv5[742] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP2[j] += fw2 * FE34_C0_D001_Q5[0][0][j];
        const double fw3 = sv5[697] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP3[j] += fw3 * FE34_C0_D001_Q5[0][0][j];
        const double fw4 = sv5[706] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP4[j] += fw4 * FE34_C0_D001_Q5[0][0][j];
        const double fw5 = sv5[715] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP5[j] += fw5 * FE34_C0_D001_Q5[0][0][j];
        const double fw6 = sv5[670] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP6[j] += fw6 * FE34_C0_D001_Q5[0][0][j];
        const double fw7 = sv5[679] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP7[j] += fw7 * FE34_C0_D001_Q5[0][0][j];
        const double fw8 = sv5[688] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP8[j] += fw8 * FE34_C0_D001_Q5[0][0][j];
        const double fw9 = sv5[751] * weights5[iq];
        alignas(32) double TF0[4];
        for (int i = 0; i < 4; ++i)
            TF0[i] = fw9 * FE34_C0_Q5[0][iq][i];
        for (int i = 0; i < 4; ++i)
            for (int j = 0; j < 4; ++j)
                BF0[i][j] += TF0[i] * FE34_C0_Q5[0][iq][j];
        const double fw10 = sv5[725] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP9[j] += fw10 * FE34_C0_D001_Q5[0][0][j];
        const double fw11 = sv5[734] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP10[j] += fw11 * FE34_C0_D001_Q5[0][0][j];
        const double fw12 = sv5[743] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP11[j] += fw12 * FE34_C0_D001_Q5[0][0][j];
        const double fw13 = sv5[698] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP12[j] += fw13 * FE34_C0_D001_Q5[0][0][j];
        const double fw14 = sv5[707] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP13[j] += fw14 * FE34_C0_D001_Q5[0][0][j];
        const double fw15 = sv5[716] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP14[j] += fw15 * FE34_C0_D001_Q5[0][0][j];
        const double fw16 = sv5[671] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP15[j] += fw16 * FE34_C0_D001_Q5[0][0][j];
        const double fw17 = sv5[680] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP16[j] += fw17 * FE34_C0_D001_Q5[0][0][j];
        const double fw18 = sv5[689] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP17[j] += fw18 * FE34_C0_D001_Q5[0][0][j];
        const double fw19 = sv5[726] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP18[j] += fw19 * FE34_C0_D001_Q5[0][0][j];
        const double fw20 = sv5[735] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP19[j] += fw20 * FE34_C0_D001_Q5[0][0][j];
        const double fw21 = sv5[744] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP20[j] += fw21 * FE34_C0_D001_Q5[0][0][j];
        const double fw22 = sv5[699] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP21[j] += fw22 * FE34_C0_D001_Q5[0][0][j];
        const double fw23 = sv5[708] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP22[j] += fw23 * FE34_C0_D001_Q5[0][0][j];
        const double fw24 = sv5[717] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP23[j] += fw24 * FE34_C0_D001_Q5[0][0][j];
        const double fw25 = sv5[672] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP24[j] += fw25 * FE34_C0_D001_Q5[0][0][j];
        const double fw26 = sv5[681] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP25[j] += fw26 * FE34_C0_D001_Q5[0][0][j];
        const double fw27 = sv5[690] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP26[j] += fw27 * FE34_C0_D001_Q5[0][0][j];
        const double fw28 = sv5[727] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP27[j] += fw28 * FE34_C0_D001_Q5[0][0][j];
        const double fw29 = sv5[736] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP28[j] += fw29 * FE34_C0_D001_Q5[0][0][j];
        const double fw30 = sv5[745] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP29[j] += fw30 * FE34_C0_D001_Q5[0][0][j];
        const double fw31 = sv5[700] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP30[j] += fw31 * FE34_C0_D001_Q5[0][0][j];
        const double fw32 = sv5[709] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP31[j] += fw32 * FE34_C0_D001_Q5[0][0][j];
        const double fw33 = sv5[718] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP32[j] += fw33 * FE34_C0_D001_Q5[0][0][j];
        const double fw34 = sv5[673] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP33[j] += fw34 * FE34_C0_D001_Q5[0][0][j];
        const double fw35 = sv5[682] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP34[j] += fw35 * FE34_C0_D001_Q5[0][0][j];
        const double fw36 = sv5[691] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP35[j] += fw36 * FE34_C0_D001_Q5[0][0][j];
        const double fw37 = sv5[728] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP36[j] += fw37 * FE34_C0_D001_Q5[0][0][j];
        const double fw38 = sv5[737] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP37[j] += fw38 * FE34_C0_D001_Q5[0][0][j];
        const double fw39 = sv5[746] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP38[j] += fw39 * FE34_C0_D001_Q5[0][0][j];
        const double fw40 = sv5[701] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP39[j] += fw40 * FE34_C0_D001_Q5[0][0][j];
        const double fw41 = sv5[710] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP40[j] += fw41 * FE34_C0_D001_Q5[0][0][j];
        const double fw42 = sv5[719] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP41[j] += fw42 * FE34_C0_D001_Q5[0][0][j];
        const double fw43 = sv5[674] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP42[j] += fw43 * FE34_C0_D001_Q5[0][0][j];
        const double fw44 = sv5[683] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP43[j] += fw44 * FE34_C0_D001_Q5[0][0][j];
        const double fw45 = sv5[692] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP44[j] += fw45 * FE34_C0_D001_Q5[0][0][j];
        const double fw46 = sv5[729] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP45[j] += fw46 * FE34_C0_D001_Q5[0][0][j];
        const double fw47 = sv5[738] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP46[j] += fw47 * FE34_C0_D001_Q5[0][0][j];
        const double fw48 = sv5[747] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP47[j] += fw48 * FE34_C0_D001_Q5[0][0][j];
        const double fw49 = sv5[702] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP48[j] += fw49 * FE34_C0_D001_Q5[0][0][j];
        const double fw50 = sv5[711] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP49[j] += fw50 * FE34_C0_D001_Q5[0][0][j];
        const double fw51 = sv5[720] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP50[j] += fw51 * FE34_C0_D001_Q5[0][0][j];
        const double fw52 = sv5[675] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP51[j] += fw52 * FE34_C0_D001_Q5[0][0][j];
        const double fw53 = sv5[684] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP52[j] += fw53 * FE34_C0_D001_Q5[0][0][j];
        const double fw54 = sv5[693] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP53[j] += fw54 * FE34_C0_D001_Q5[0][0][j];
        const double fw55 = sv5[730] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP54[j] += fw55 * FE34_C0_D001_Q5[0][0][j];
        const double fw56 = sv5[739] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP55[j] += fw56 * FE34_C0_D001_Q5[0][0][j];
        const double fw57 = sv5[748] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP56[j] += fw57 * FE34_C0_D001_Q5[0][0][j];
        const double fw58 = sv5[703] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP57[j] += fw58 * FE34_C0_D001_Q5[0][0][j];
        const double fw59 = sv5[712] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP58[j] += fw59 * FE34_C0_D001_Q5[0][0][j];
        const double fw60 = sv5[721] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP59[j] += fw60 * FE34_C0_D001_Q5[0][0][j];
        const double fw61 = sv5[676] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP60[j] += fw61 * FE34_C0_D001_Q5[0][0][j];
        const double fw62 = sv5[685] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP61[j] += fw62 * FE34_C0_D001_Q5[0][0][j];
        const double fw63 = sv5[694] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP62[j] += fw63 * FE34_C0_D001_Q5[0][0][j];
        const double fw64 = sv5[731] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP63[j] += fw64 * FE34_C0_D001_Q5[0][0][j];
        const double fw65 = sv5[740] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP64[j] += fw65 * FE34_C0_D001_Q5[0][0][j];
        const double fw66 = sv5[749] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP65[j] += fw66 * FE34_C0_D001_Q5[0][0][j];
        const double fw67 = sv5[704] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP66[j] += fw67 * FE34_C0_D001_Q5[0][0][j];
        const double fw68 = sv5[713] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP67[j] += fw68 * FE34_C0_D001_Q5[0][0][j];
        const double fw69 = sv5[722] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP68[j] += fw69 * FE34_C0_D001_Q5[0][0][j];
        const double fw70 = sv5[677] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP69[j] += fw70 * FE34_C0_D001_Q5[0][0][j];
        const double fw71 = sv5[686] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP70[j] += fw71 * FE34_C0_D001_Q5[0][0][j];
        const double fw72 = sv5[695] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP71[j] += fw72 * FE34_C0_D001_Q5[0][0][j];
        const double fw73 = sv5[732] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP72[j] += fw73 * FE34_C0_D001_Q5[0][0][j];
        const double fw74 = sv5[741] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP73[j] += fw74 * FE34_C0_D001_Q5[0][0][j];
        const double fw75 = sv5[750] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP74[j] += fw75 * FE34_C0_D001_Q5[0][0][j];
        const double fw76 = sv5[705] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP75[j] += fw76 * FE34_C0_D001_Q5[0][0][j];
        const double fw77 = sv5[714] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP76[j] += fw77 * FE34_C0_D001_Q5[0][0][j];
        const double fw78 = sv5[723] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP77[j] += fw78 * FE34_C0_D001_Q5[0][0][j];
        const double fw79 = sv5[678] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP78[j] += fw79 * FE34_C0_D001_Q5[0][0][j];
        const double fw80 = sv5[687] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP79[j] += fw80 * FE34_C0_D001_Q5[0][0][j];
        const double fw81 = sv5[696] * weights5[iq];
        for (int j = 0; j < 2; ++j)
            TP80[j] += fw81 * FE34_C0_D001_Q5[0][0][j];
    }
    std::fill(&A[0], &A[204], 0.0);
    A[204] = 0.01666666666666667 * (1e-12 * sp[494]);
    A[205] = 0.008333333333333335 * (1e-12 * sp[494]);
    A[206] = 0.008333333333333338 * (1e-12 * sp[494]);
    A[207] = 0.008333333333333338 * (1e-12 * sp[494]);
    std::fill(&A[208], &A[220], 0.0);
    A[220] = 0.008333333333333335 * (1e-12 * sp[494]);
    A[221] = 0.01666666666666666 * (1e-12 * sp[494]);
    A[222] = 0.008333333333333331 * (1e-12 * sp[494]);
    A[223] = 0.00833333333333333 * (1e-12 * sp[494]);
    std::fill(&A[224], &A[236], 0.0);
    A[236] = 0.008333333333333338 * (1e-12 * sp[494]);
    A[237] = 0.008333333333333331 * (1e-12 * sp[494]);
    A[238] = 0.01666666666666667 * (1e-12 * sp[494]);
    A[239] = 0.008333333333333331 * (1e-12 * sp[494]);
    std::fill(&A[240], &A[252], 0.0);
    A[252] = 0.008333333333333338 * (1e-12 * sp[494]);
    A[253] = 0.00833333333333333 * (1e-12 * sp[494]);
    A[254] = 0.008333333333333331 * (1e-12 * sp[494]);
    A[255] = 0.01666666666666667 * (1e-12 * sp[494]);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 4, 6 };
    static const int DM3[2] = { 4, 7 };
    static const int DM4[2] = { 8, 10 };
    static const int DM5[2] = { 8, 11 };
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + j] += FE34_C0_D001_Q5[0][0][i] * TP0[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM0[j]] += FE34_C0_D001_Q5[0][0][i] * TP1[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM1[j]] += FE34_C0_D001_Q5[0][0][i] * TP2[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + (j + 4)] += FE34_C0_D001_Q5[0][0][i] * TP3[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM2[j]] += FE34_C0_D001_Q5[0][0][i] * TP4[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM3[j]] += FE34_C0_D001_Q5[0][0][i] * TP5[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + (j + 8)] += FE34_C0_D001_Q5[0][0][i] * TP6[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM4[j]] += FE34_C0_D001_Q5[0][0][i] * TP7[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM5[j]] += FE34_C0_D001_Q5[0][0][i] * TP8[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * i + j] += BF0[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + j] += FE34_C0_D001_Q5[0][0][i] * TP9[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM0[j]] += FE34_C0_D001_Q5[0][0][i] * TP10[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM1[j]] += FE34_C0_D001_Q5[0][0][i] * TP11[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + (j + 4)] += FE34_C0_D001_Q5[0][0][i] * TP12[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM2[j]] += FE34_C0_D001_Q5[0][0][i] * TP13[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM3[j]] += FE34_C0_D001_Q5[0][0][i] * TP14[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + (j + 8)] += FE34_C0_D001_Q5[0][0][i] * TP15[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM4[j]] += FE34_C0_D001_Q5[0][0][i] * TP16[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM5[j]] += FE34_C0_D001_Q5[0][0][i] * TP17[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + j] += FE34_C0_D001_Q5[0][0][i] * TP18[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM0[j]] += FE34_C0_D001_Q5[0][0][i] * TP19[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM1[j]] += FE34_C0_D001_Q5[0][0][i] * TP20[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + (j + 4)] += FE34_C0_D001_Q5[0][0][i] * TP21[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM2[j]] += FE34_C0_D001_Q5[0][0][i] * TP22[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM3[j]] += FE34_C0_D001_Q5[0][0][i] * TP23[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + (j + 8)] += FE34_C0_D001_Q5[0][0][i] * TP24[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM4[j]] += FE34_C0_D001_Q5[0][0][i] * TP25[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM5[j]] += FE34_C0_D001_Q5[0][0][i] * TP26[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + j] += FE34_C0_D001_Q5[0][0][i] * TP27[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM0[j]] += FE34_C0_D001_Q5[0][0][i] * TP28[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM1[j]] += FE34_C0_D001_Q5[0][0][i] * TP29[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + (j + 4)] += FE34_C0_D001_Q5[0][0][i] * TP30[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM2[j]] += FE34_C0_D001_Q5[0][0][i] * TP31[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM3[j]] += FE34_C0_D001_Q5[0][0][i] * TP32[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + (j + 8)] += FE34_C0_D001_Q5[0][0][i] * TP33[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM4[j]] += FE34_C0_D001_Q5[0][0][i] * TP34[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM5[j]] += FE34_C0_D001_Q5[0][0][i] * TP35[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * (i + 4) + (j + 4)] += BF0[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + j] += FE34_C0_D001_Q5[0][0][i] * TP36[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM0[j]] += FE34_C0_D001_Q5[0][0][i] * TP37[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM1[j]] += FE34_C0_D001_Q5[0][0][i] * TP38[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + (j + 4)] += FE34_C0_D001_Q5[0][0][i] * TP39[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM2[j]] += FE34_C0_D001_Q5[0][0][i] * TP40[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM3[j]] += FE34_C0_D001_Q5[0][0][i] * TP41[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + (j + 8)] += FE34_C0_D001_Q5[0][0][i] * TP42[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM4[j]] += FE34_C0_D001_Q5[0][0][i] * TP43[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM5[j]] += FE34_C0_D001_Q5[0][0][i] * TP44[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + j] += FE34_C0_D001_Q5[0][0][i] * TP45[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM0[j]] += FE34_C0_D001_Q5[0][0][i] * TP46[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM1[j]] += FE34_C0_D001_Q5[0][0][i] * TP47[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + (j + 4)] += FE34_C0_D001_Q5[0][0][i] * TP48[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM2[j]] += FE34_C0_D001_Q5[0][0][i] * TP49[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM3[j]] += FE34_C0_D001_Q5[0][0][i] * TP50[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + (j + 8)] += FE34_C0_D001_Q5[0][0][i] * TP51[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM4[j]] += FE34_C0_D001_Q5[0][0][i] * TP52[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM5[j]] += FE34_C0_D001_Q5[0][0][i] * TP53[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + j] += FE34_C0_D001_Q5[0][0][i] * TP54[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM0[j]] += FE34_C0_D001_Q5[0][0][i] * TP55[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM1[j]] += FE34_C0_D001_Q5[0][0][i] * TP56[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + (j + 4)] += FE34_C0_D001_Q5[0][0][i] * TP57[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM2[j]] += FE34_C0_D001_Q5[0][0][i] * TP58[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM3[j]] += FE34_C0_D001_Q5[0][0][i] * TP59[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + (j + 8)] += FE34_C0_D001_Q5[0][0][i] * TP60[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM4[j]] += FE34_C0_D001_Q5[0][0][i] * TP61[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM5[j]] += FE34_C0_D001_Q5[0][0][i] * TP62[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * (i + 8) + (j + 8)] += BF0[i][j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + j] += FE34_C0_D001_Q5[0][0][i] * TP63[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM0[j]] += FE34_C0_D001_Q5[0][0][i] * TP64[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM1[j]] += FE34_C0_D001_Q5[0][0][i] * TP65[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + (j + 4)] += FE34_C0_D001_Q5[0][0][i] * TP66[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM2[j]] += FE34_C0_D001_Q5[0][0][i] * TP67[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM3[j]] += FE34_C0_D001_Q5[0][0][i] * TP68[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + (j + 8)] += FE34_C0_D001_Q5[0][0][i] * TP69[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM4[j]] += FE34_C0_D001_Q5[0][0][i] * TP70[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM5[j]] += FE34_C0_D001_Q5[0][0][i] * TP71[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + j] += FE34_C0_D001_Q5[0][0][i] * TP72[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM0[j]] += FE34_C0_D001_Q5[0][0][i] * TP73[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM1[j]] += FE34_C0_D001_Q5[0][0][i] * TP74[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + (j + 4)] += FE34_C0_D001_Q5[0][0][i] * TP75[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM2[j]] += FE34_C0_D001_Q5[0][0][i] * TP76[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM3[j]] += FE34_C0_D001_Q5[0][0][i] * TP77[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + (j + 8)] += FE34_C0_D001_Q5[0][0][i] * TP78[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM4[j]] += FE34_C0_D001_Q5[0][0][i] * TP79[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM5[j]] += FE34_C0_D001_Q5[0][0][i] * TP80[j];
  }

};


class elastic3dp1p1_form_0: public ufc::form
{
public:

  elastic3dp1p1_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~elastic3dp1p1_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "fc9a6efe86060b36cf0dd0e817611d5344d4a6d6a38a9dd0da1d6183089ceee55d13c2ccb3fa75bb93d9da60f05363d8238537bc7a960d814767d146d6dc47b1";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 8;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6, 7});
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new elastic3dp1p1_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new elastic3dp1p1_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return nullptr;
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new elastic3dp1p1_finite_element_2();
        break;
      }
    case 1:
      {
        return new elastic3dp1p1_finite_element_2();
        break;
      }
    case 2:
      {
        return new elastic3dp1p1_finite_element_1();
        break;
      }
    case 3:
      {
        return new elastic3dp1p1_finite_element_1();
        break;
      }
    case 4:
      {
        return new elastic3dp1p1_finite_element_4();
        break;
      }
    case 5:
      {
        return new elastic3dp1p1_finite_element_4();
        break;
      }
    case 6:
      {
        return new elastic3dp1p1_finite_element_4();
        break;
      }
    case 7:
      {
        return new elastic3dp1p1_finite_element_4();
        break;
      }
    case 8:
      {
        return new elastic3dp1p1_finite_element_3();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new elastic3dp1p1_dofmap_2();
        break;
      }
    case 1:
      {
        return new elastic3dp1p1_dofmap_2();
        break;
      }
    case 2:
      {
        return new elastic3dp1p1_dofmap_1();
        break;
      }
    case 3:
      {
        return new elastic3dp1p1_dofmap_1();
        break;
      }
    case 4:
      {
        return new elastic3dp1p1_dofmap_4();
        break;
      }
    case 5:
      {
        return new elastic3dp1p1_dofmap_4();
        break;
      }
    case 6:
      {
        return new elastic3dp1p1_dofmap_4();
        break;
      }
    case 7:
      {
        return new elastic3dp1p1_dofmap_4();
        break;
      }
    case 8:
      {
        return new elastic3dp1p1_dofmap_3();
        break;
      }
    }
    
    return 0;
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 3;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 1:
      {
        return new elastic3dp1p1_cell_integral_0_1();
        break;
      }
    case 2:
      {
        return new elastic3dp1p1_cell_integral_0_2();
        break;
      }
    }
    
    return 0;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return 0;
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return 0;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return 0;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return 0;
  }

};


class elastic3dp1p1_form_1: public ufc::form
{
public:

  elastic3dp1p1_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~elastic3dp1p1_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "dc8af81419e7784ad6aecc043117ce7708f939d32b7d9d6a5db058b80b81b6b96671c3dbf43662a4c10906d68ab394467637e95c14859996842a4fc0310d3a57";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 8;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6, 7});
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new elastic3dp1p1_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new elastic3dp1p1_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return nullptr;
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new elastic3dp1p1_finite_element_2();
        break;
      }
    case 1:
      {
        return new elastic3dp1p1_finite_element_2();
        break;
      }
    case 2:
      {
        return new elastic3dp1p1_finite_element_2();
        break;
      }
    case 3:
      {
        return new elastic3dp1p1_finite_element_1();
        break;
      }
    case 4:
      {
        return new elastic3dp1p1_finite_element_1();
        break;
      }
    case 5:
      {
        return new elastic3dp1p1_finite_element_4();
        break;
      }
    case 6:
      {
        return new elastic3dp1p1_finite_element_4();
        break;
      }
    case 7:
      {
        return new elastic3dp1p1_finite_element_4();
        break;
      }
    case 8:
      {
        return new elastic3dp1p1_finite_element_4();
        break;
      }
    case 9:
      {
        return new elastic3dp1p1_finite_element_3();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new elastic3dp1p1_dofmap_2();
        break;
      }
    case 1:
      {
        return new elastic3dp1p1_dofmap_2();
        break;
      }
    case 2:
      {
        return new elastic3dp1p1_dofmap_2();
        break;
      }
    case 3:
      {
        return new elastic3dp1p1_dofmap_1();
        break;
      }
    case 4:
      {
        return new elastic3dp1p1_dofmap_1();
        break;
      }
    case 5:
      {
        return new elastic3dp1p1_dofmap_4();
        break;
      }
    case 6:
      {
        return new elastic3dp1p1_dofmap_4();
        break;
      }
    case 7:
      {
        return new elastic3dp1p1_dofmap_4();
        break;
      }
    case 8:
      {
        return new elastic3dp1p1_dofmap_4();
        break;
      }
    case 9:
      {
        return new elastic3dp1p1_dofmap_3();
        break;
      }
    }
    
    return 0;
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 3;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 1:
      {
        return new elastic3dp1p1_cell_integral_1_1();
        break;
      }
    case 2:
      {
        return new elastic3dp1p1_cell_integral_1_2();
        break;
      }
    }
    
    return 0;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return 0;
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return 0;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return 0;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return 0;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace Elastic3DP1P1
{

class CoefficientSpace_beta1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_beta1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_beta1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_beta2: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_beta2(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_beta2(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_dt: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_dt(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_dt(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_p_s: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_p_s(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_p_s(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_rho_s: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_rho_s(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_rho_s(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_v0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_v0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_v0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_v_p: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_v_p(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_v_p(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_F_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_F_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_v_p Form_F_FunctionSpace_1;

typedef CoefficientSpace_v0 Form_F_FunctionSpace_2;

typedef CoefficientSpace_u0 Form_F_FunctionSpace_3;

typedef CoefficientSpace_rho_s Form_F_FunctionSpace_4;

typedef CoefficientSpace_p_s Form_F_FunctionSpace_5;

typedef CoefficientSpace_beta1 Form_F_FunctionSpace_6;

typedef CoefficientSpace_beta2 Form_F_FunctionSpace_7;

typedef CoefficientSpace_dt Form_F_FunctionSpace_8;

class Form_F: public dolfin::Form
{
public:

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 8), v_p(*this, 0), v0(*this, 1), u0(*this, 2), rho_s(*this, 3), p_s(*this, 4), beta1(*this, 5), beta2(*this, 6), dt(*this, 7)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const elastic3dp1p1_form_0>();
  }

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> v_p, std::shared_ptr<const dolfin::GenericFunction> v0, std::shared_ptr<const dolfin::GenericFunction> u0, std::shared_ptr<const dolfin::GenericFunction> rho_s, std::shared_ptr<const dolfin::GenericFunction> p_s, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> beta2, std::shared_ptr<const dolfin::GenericFunction> dt):
    dolfin::Form(1, 8), v_p(*this, 0), v0(*this, 1), u0(*this, 2), rho_s(*this, 3), p_s(*this, 4), beta1(*this, 5), beta2(*this, 6), dt(*this, 7)
  {
    _function_spaces[0] = V0;

    this->v_p = v_p;
    this->v0 = v0;
    this->u0 = u0;
    this->rho_s = rho_s;
    this->p_s = p_s;
    this->beta1 = beta1;
    this->beta2 = beta2;
    this->dt = dt;

    _ufc_form = std::make_shared<const elastic3dp1p1_form_0>();
  }

  // Destructor
  ~Form_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "v_p")
      return 0;
    else if (name == "v0")
      return 1;
    else if (name == "u0")
      return 2;
    else if (name == "rho_s")
      return 3;
    else if (name == "p_s")
      return 4;
    else if (name == "beta1")
      return 5;
    else if (name == "beta2")
      return 6;
    else if (name == "dt")
      return 7;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "v_p";
    case 1:
      return "v0";
    case 2:
      return "u0";
    case 3:
      return "rho_s";
    case 4:
      return "p_s";
    case 5:
      return "beta1";
    case 6:
      return "beta2";
    case 7:
      return "dt";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_v_p;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_v0;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_u0;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_rho_s;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_p_s;
  typedef Form_F_FunctionSpace_6 CoefficientSpace_beta1;
  typedef Form_F_FunctionSpace_7 CoefficientSpace_beta2;
  typedef Form_F_FunctionSpace_8 CoefficientSpace_dt;

  // Coefficients
  dolfin::CoefficientAssigner v_p;
  dolfin::CoefficientAssigner v0;
  dolfin::CoefficientAssigner u0;
  dolfin::CoefficientAssigner rho_s;
  dolfin::CoefficientAssigner p_s;
  dolfin::CoefficientAssigner beta1;
  dolfin::CoefficientAssigner beta2;
  dolfin::CoefficientAssigner dt;
};

class MultiMeshForm_F: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), v_p(*this, 0), v0(*this, 1), u0(*this, 2), rho_s(*this, 3), p_s(*this, 4), beta1(*this, 5), beta2(*this, 6), dt(*this, 7)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> v_p, std::shared_ptr<const dolfin::GenericFunction> v0, std::shared_ptr<const dolfin::GenericFunction> u0, std::shared_ptr<const dolfin::GenericFunction> rho_s, std::shared_ptr<const dolfin::GenericFunction> p_s, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> beta2, std::shared_ptr<const dolfin::GenericFunction> dt):
    dolfin::MultiMeshForm(V0), v_p(*this, 0), v0(*this, 1), u0(*this, 2), rho_s(*this, 3), p_s(*this, 4), beta1(*this, 5), beta2(*this, 6), dt(*this, 7)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->v_p = v_p;
    this->v0 = v0;
    this->u0 = u0;
    this->rho_s = rho_s;
    this->p_s = p_s;
    this->beta1 = beta1;
    this->beta2 = beta2;
    this->dt = dt;

  }

  // Destructor
  ~MultiMeshForm_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "v_p")
      return 0;
    else if (name == "v0")
      return 1;
    else if (name == "u0")
      return 2;
    else if (name == "rho_s")
      return 3;
    else if (name == "p_s")
      return 4;
    else if (name == "beta1")
      return 5;
    else if (name == "beta2")
      return 6;
    else if (name == "dt")
      return 7;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "v_p";
    case 1:
      return "v0";
    case 2:
      return "u0";
    case 3:
      return "rho_s";
    case 4:
      return "p_s";
    case 5:
      return "beta1";
    case 6:
      return "beta2";
    case 7:
      return "dt";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_v_p;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_v0;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_u0;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_rho_s;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_p_s;
  typedef Form_F_FunctionSpace_6 CoefficientSpace_beta1;
  typedef Form_F_FunctionSpace_7 CoefficientSpace_beta2;
  typedef Form_F_FunctionSpace_8 CoefficientSpace_dt;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner v_p;
  dolfin::MultiMeshCoefficientAssigner v0;
  dolfin::MultiMeshCoefficientAssigner u0;
  dolfin::MultiMeshCoefficientAssigner rho_s;
  dolfin::MultiMeshCoefficientAssigner p_s;
  dolfin::MultiMeshCoefficientAssigner beta1;
  dolfin::MultiMeshCoefficientAssigner beta2;
  dolfin::MultiMeshCoefficientAssigner dt;
};

class Form_J_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<elastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<elastic3dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_J_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_v_p Form_J_FunctionSpace_2;

typedef CoefficientSpace_v0 Form_J_FunctionSpace_3;

typedef CoefficientSpace_u0 Form_J_FunctionSpace_4;

typedef CoefficientSpace_rho_s Form_J_FunctionSpace_5;

typedef CoefficientSpace_p_s Form_J_FunctionSpace_6;

typedef CoefficientSpace_beta1 Form_J_FunctionSpace_7;

typedef CoefficientSpace_beta2 Form_J_FunctionSpace_8;

typedef CoefficientSpace_dt Form_J_FunctionSpace_9;

class Form_J: public dolfin::Form
{
public:

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 8), v_p(*this, 0), v0(*this, 1), u0(*this, 2), rho_s(*this, 3), p_s(*this, 4), beta1(*this, 5), beta2(*this, 6), dt(*this, 7)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const elastic3dp1p1_form_1>();
  }

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> v_p, std::shared_ptr<const dolfin::GenericFunction> v0, std::shared_ptr<const dolfin::GenericFunction> u0, std::shared_ptr<const dolfin::GenericFunction> rho_s, std::shared_ptr<const dolfin::GenericFunction> p_s, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> beta2, std::shared_ptr<const dolfin::GenericFunction> dt):
    dolfin::Form(2, 8), v_p(*this, 0), v0(*this, 1), u0(*this, 2), rho_s(*this, 3), p_s(*this, 4), beta1(*this, 5), beta2(*this, 6), dt(*this, 7)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->v_p = v_p;
    this->v0 = v0;
    this->u0 = u0;
    this->rho_s = rho_s;
    this->p_s = p_s;
    this->beta1 = beta1;
    this->beta2 = beta2;
    this->dt = dt;

    _ufc_form = std::make_shared<const elastic3dp1p1_form_1>();
  }

  // Destructor
  ~Form_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "v_p")
      return 0;
    else if (name == "v0")
      return 1;
    else if (name == "u0")
      return 2;
    else if (name == "rho_s")
      return 3;
    else if (name == "p_s")
      return 4;
    else if (name == "beta1")
      return 5;
    else if (name == "beta2")
      return 6;
    else if (name == "dt")
      return 7;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "v_p";
    case 1:
      return "v0";
    case 2:
      return "u0";
    case 3:
      return "rho_s";
    case 4:
      return "p_s";
    case 5:
      return "beta1";
    case 6:
      return "beta2";
    case 7:
      return "dt";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_v_p;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_v0;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_u0;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_rho_s;
  typedef Form_J_FunctionSpace_6 CoefficientSpace_p_s;
  typedef Form_J_FunctionSpace_7 CoefficientSpace_beta1;
  typedef Form_J_FunctionSpace_8 CoefficientSpace_beta2;
  typedef Form_J_FunctionSpace_9 CoefficientSpace_dt;

  // Coefficients
  dolfin::CoefficientAssigner v_p;
  dolfin::CoefficientAssigner v0;
  dolfin::CoefficientAssigner u0;
  dolfin::CoefficientAssigner rho_s;
  dolfin::CoefficientAssigner p_s;
  dolfin::CoefficientAssigner beta1;
  dolfin::CoefficientAssigner beta2;
  dolfin::CoefficientAssigner dt;
};

class MultiMeshForm_J: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), v_p(*this, 0), v0(*this, 1), u0(*this, 2), rho_s(*this, 3), p_s(*this, 4), beta1(*this, 5), beta2(*this, 6), dt(*this, 7)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> v_p, std::shared_ptr<const dolfin::GenericFunction> v0, std::shared_ptr<const dolfin::GenericFunction> u0, std::shared_ptr<const dolfin::GenericFunction> rho_s, std::shared_ptr<const dolfin::GenericFunction> p_s, std::shared_ptr<const dolfin::GenericFunction> beta1, std::shared_ptr<const dolfin::GenericFunction> beta2, std::shared_ptr<const dolfin::GenericFunction> dt):
    dolfin::MultiMeshForm(V1, V0), v_p(*this, 0), v0(*this, 1), u0(*this, 2), rho_s(*this, 3), p_s(*this, 4), beta1(*this, 5), beta2(*this, 6), dt(*this, 7)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->v_p = v_p;
    this->v0 = v0;
    this->u0 = u0;
    this->rho_s = rho_s;
    this->p_s = p_s;
    this->beta1 = beta1;
    this->beta2 = beta2;
    this->dt = dt;

  }

  // Destructor
  ~MultiMeshForm_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "v_p")
      return 0;
    else if (name == "v0")
      return 1;
    else if (name == "u0")
      return 2;
    else if (name == "rho_s")
      return 3;
    else if (name == "p_s")
      return 4;
    else if (name == "beta1")
      return 5;
    else if (name == "beta2")
      return 6;
    else if (name == "dt")
      return 7;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "v_p";
    case 1:
      return "v0";
    case 2:
      return "u0";
    case 3:
      return "rho_s";
    case 4:
      return "p_s";
    case 5:
      return "beta1";
    case 6:
      return "beta2";
    case 7:
      return "dt";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_v_p;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_v0;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_u0;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_rho_s;
  typedef Form_J_FunctionSpace_6 CoefficientSpace_p_s;
  typedef Form_J_FunctionSpace_7 CoefficientSpace_beta1;
  typedef Form_J_FunctionSpace_8 CoefficientSpace_beta2;
  typedef Form_J_FunctionSpace_9 CoefficientSpace_dt;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner v_p;
  dolfin::MultiMeshCoefficientAssigner v0;
  dolfin::MultiMeshCoefficientAssigner u0;
  dolfin::MultiMeshCoefficientAssigner rho_s;
  dolfin::MultiMeshCoefficientAssigner p_s;
  dolfin::MultiMeshCoefficientAssigner beta1;
  dolfin::MultiMeshCoefficientAssigner beta2;
  dolfin::MultiMeshCoefficientAssigner dt;
};

// Class typedefs
typedef Form_J BilinearForm;
typedef MultiMeshForm_J MultiMeshBilinearForm;
typedef Form_J JacobianForm;
typedef MultiMeshForm_J MultiMeshJacobianForm;
typedef Form_F LinearForm;
typedef MultiMeshForm_F MultiMeshLinearForm;
typedef Form_F ResidualForm;
typedef MultiMeshForm_F MultiMeshResidualForm;
typedef Form_F::TestSpace FunctionSpace;
typedef Form_F::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
