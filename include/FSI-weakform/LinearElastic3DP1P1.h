// This code conforms with the UFC specification version 2017.1.0
// and was automatically generated by FFC version 2017.1.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   add_tabulate_tensor_timing:     False
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   generate_dummy_tabulate_tensor: False
//   max_signature_length:           0
//   optimize:                       True
//   precision:                      None
//   quadrature_degree:              None
//   quadrature_rule:                None
//   representation:                 'auto'
//   split:                          False

#ifndef __LINEARELASTIC3DP1P1_H
#define __LINEARELASTIC3DP1P1_H
#include <algorithm>
#include <cmath>
#include <stdexcept>
#include <ufc.h>

class linearelastic3dp1p1_finite_element_0: public ufc::finite_element
{
public:

  linearelastic3dp1p1_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', tetrahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new linearelastic3dp1p1_finite_element_0();
  }

};


class linearelastic3dp1p1_finite_element_1: public ufc::finite_element
{
public:

  linearelastic3dp1p1_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[9];
    for (unsigned int r = 0; r < 9; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[4] = vals[1];
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[5] = vals[1];
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[6] = vals[1];
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[7] = vals[1];
    values[11] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = coordinate_dofs[6];
    dof_coordinates[19] = coordinate_dofs[7];
    dof_coordinates[20] = coordinate_dofs[8];
    dof_coordinates[21] = coordinate_dofs[9];
    dof_coordinates[22] = coordinate_dofs[10];
    dof_coordinates[23] = coordinate_dofs[11];
    dof_coordinates[24] = coordinate_dofs[0];
    dof_coordinates[25] = coordinate_dofs[1];
    dof_coordinates[26] = coordinate_dofs[2];
    dof_coordinates[27] = coordinate_dofs[3];
    dof_coordinates[28] = coordinate_dofs[4];
    dof_coordinates[29] = coordinate_dofs[5];
    dof_coordinates[30] = coordinate_dofs[6];
    dof_coordinates[31] = coordinate_dofs[7];
    dof_coordinates[32] = coordinate_dofs[8];
    dof_coordinates[33] = coordinate_dofs[9];
    dof_coordinates[34] = coordinate_dofs[10];
    dof_coordinates[35] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new linearelastic3dp1p1_finite_element_0();
        break;
      }
    case 1:
      {
        return new linearelastic3dp1p1_finite_element_0();
        break;
      }
    case 2:
      {
        return new linearelastic3dp1p1_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new linearelastic3dp1p1_finite_element_1();
  }

};


class linearelastic3dp1p1_finite_element_2: public ufc::finite_element
{
public:

  linearelastic3dp1p1_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3), FiniteElement('Lagrange', tetrahedron, 1))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 16;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  std::size_t value_size() const final override
  {
    return 4;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  std::size_t reference_value_size() const final override
  {
    return 4;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    values[3] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 16; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 4; s++)
      {
        values[r*4 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 4*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 16; r++)
    {
      for (unsigned int s = 0; s < 4*num_derivatives; s++)
      {
        values[r*4*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[12];
    for (unsigned int r = 0; r < 12; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 16; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 4*num_derivatives; s++)
      {
        values[r*4*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[4];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 12:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 13:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 14:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 15:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[4];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[4] = vals[1];
    values[8] = vals[2];
    values[12] = vals[3];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[5] = vals[1];
    values[9] = vals[2];
    values[13] = vals[3];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[6] = vals[1];
    values[10] = vals[2];
    values[14] = vals[3];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[7] = vals[1];
    values[11] = vals[2];
    values[15] = vals[3];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[4] = dof_values[1];
    vertex_values[8] = dof_values[2];
    vertex_values[12] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[5] = dof_values[5];
    vertex_values[9] = dof_values[6];
    vertex_values[13] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[6] = dof_values[9];
    vertex_values[10] = dof_values[10];
    vertex_values[14] = dof_values[11];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[12];
    vertex_values[7] = dof_values[13];
    vertex_values[11] = dof_values[14];
    vertex_values[15] = dof_values[15];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = coordinate_dofs[6];
    dof_coordinates[19] = coordinate_dofs[7];
    dof_coordinates[20] = coordinate_dofs[8];
    dof_coordinates[21] = coordinate_dofs[9];
    dof_coordinates[22] = coordinate_dofs[10];
    dof_coordinates[23] = coordinate_dofs[11];
    dof_coordinates[24] = coordinate_dofs[0];
    dof_coordinates[25] = coordinate_dofs[1];
    dof_coordinates[26] = coordinate_dofs[2];
    dof_coordinates[27] = coordinate_dofs[3];
    dof_coordinates[28] = coordinate_dofs[4];
    dof_coordinates[29] = coordinate_dofs[5];
    dof_coordinates[30] = coordinate_dofs[6];
    dof_coordinates[31] = coordinate_dofs[7];
    dof_coordinates[32] = coordinate_dofs[8];
    dof_coordinates[33] = coordinate_dofs[9];
    dof_coordinates[34] = coordinate_dofs[10];
    dof_coordinates[35] = coordinate_dofs[11];
    dof_coordinates[36] = coordinate_dofs[0];
    dof_coordinates[37] = coordinate_dofs[1];
    dof_coordinates[38] = coordinate_dofs[2];
    dof_coordinates[39] = coordinate_dofs[3];
    dof_coordinates[40] = coordinate_dofs[4];
    dof_coordinates[41] = coordinate_dofs[5];
    dof_coordinates[42] = coordinate_dofs[6];
    dof_coordinates[43] = coordinate_dofs[7];
    dof_coordinates[44] = coordinate_dofs[8];
    dof_coordinates[45] = coordinate_dofs[9];
    dof_coordinates[46] = coordinate_dofs[10];
    dof_coordinates[47] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new linearelastic3dp1p1_finite_element_1();
        break;
      }
    case 1:
      {
        return new linearelastic3dp1p1_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new linearelastic3dp1p1_finite_element_2();
  }

};


class linearelastic3dp1p1_finite_element_3: public ufc::finite_element
{
public:

  linearelastic3dp1p1_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', tetrahedron, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    dof_coordinates[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    dof_coordinates[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new linearelastic3dp1p1_finite_element_3();
  }

};


class linearelastic3dp1p1_finite_element_4: public ufc::finite_element
{
public:

  linearelastic3dp1p1_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Discontinuous Lagrange', tetrahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Discontinuous Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.1825741858350554, -0.105409255338946, -0.07453559924999298};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.1825741858350554, -0.105409255338946, -0.07453559924999296};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.210818510677892, -0.07453559924999299};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.2886751345948129, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.324555320336758, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {5.477225575051663, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.162277660168379, 0.0, 0.0, 0.0},
      {1.825741858350554, 0.0, 0.0, 0.0},
      {5.163977794943224, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new linearelastic3dp1p1_finite_element_4();
  }

};


class linearelastic3dp1p1_dofmap_0: public ufc::dofmap
{
public:

  linearelastic3dp1p1_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 3;
        break;
      }
    case 3:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new linearelastic3dp1p1_dofmap_0();
  }

};


class linearelastic3dp1p1_dofmap_1: public ufc::dofmap
{
public:

  linearelastic3dp1p1_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3*num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 9;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 6;
        break;
      }
    case 2:
      {
        return 9;
        break;
      }
    case 3:
      {
        return 12;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 7;
        dofs[4] = 10;
        dofs[5] = 11;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
        dofs[2] = 5;
        dofs[3] = 7;
        dofs[4] = 9;
        dofs[5] = 11;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 9;
        dofs[5] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 4;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 11;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 4;
        dofs[3] = 5;
        dofs[4] = 8;
        dofs[5] = 9;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
      dofs[10] = 10;
      dofs[11] = 11;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new linearelastic3dp1p1_dofmap_0();
        break;
      }
    case 1:
      {
        return new linearelastic3dp1p1_dofmap_0();
        break;
      }
    case 2:
      {
        return new linearelastic3dp1p1_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new linearelastic3dp1p1_dofmap_1();
  }

};


class linearelastic3dp1p1_dofmap_2: public ufc::dofmap
{
public:

  linearelastic3dp1p1_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3), FiniteElement('Lagrange', tetrahedron, 1))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 4*num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 16;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 12;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 4;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 4;
        break;
      }
    case 1:
      {
        return 8;
        break;
      }
    case 2:
      {
        return 12;
        break;
      }
    case 3:
      {
        return 16;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[12] = offset + entity_indices[0][0];
    dofs[13] = offset + entity_indices[0][1];
    dofs[14] = offset + entity_indices[0][2];
    dofs[15] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 13;
      dofs[10] = 14;
      dofs[11] = 15;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 12;
      dofs[10] = 14;
      dofs[11] = 15;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
      dofs[9] = 12;
      dofs[10] = 13;
      dofs[11] = 15;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
      dofs[9] = 12;
      dofs[10] = 13;
      dofs[11] = 14;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
        dofs[3] = 12;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
        dofs[3] = 13;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
        dofs[3] = 14;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
        dofs[3] = 15;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
        dofs[3] = 12;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
        dofs[3] = 13;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
        dofs[3] = 14;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
        dofs[3] = 15;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 7;
        dofs[4] = 10;
        dofs[5] = 11;
        dofs[6] = 14;
        dofs[7] = 15;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
        dofs[2] = 5;
        dofs[3] = 7;
        dofs[4] = 9;
        dofs[5] = 11;
        dofs[6] = 13;
        dofs[7] = 15;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 9;
        dofs[5] = 10;
        dofs[6] = 13;
        dofs[7] = 14;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 4;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 11;
        dofs[6] = 12;
        dofs[7] = 15;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
        dofs[6] = 12;
        dofs[7] = 14;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 4;
        dofs[3] = 5;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 12;
        dofs[7] = 13;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
        dofs[9] = 13;
        dofs[10] = 14;
        dofs[11] = 15;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
        dofs[9] = 12;
        dofs[10] = 14;
        dofs[11] = 15;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
        dofs[9] = 12;
        dofs[10] = 13;
        dofs[11] = 15;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
        dofs[9] = 12;
        dofs[10] = 13;
        dofs[11] = 14;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
      dofs[10] = 10;
      dofs[11] = 11;
      dofs[12] = 12;
      dofs[13] = 13;
      dofs[14] = 14;
      dofs[15] = 15;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new linearelastic3dp1p1_dofmap_1();
        break;
      }
    case 1:
      {
        return new linearelastic3dp1p1_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new linearelastic3dp1p1_dofmap_2();
  }

};


class linearelastic3dp1p1_dofmap_3: public ufc::dofmap
{
public:

  linearelastic3dp1p1_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', tetrahedron, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      case 4:
        {
          
          break;
        }
      case 5:
        {
          
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new linearelastic3dp1p1_dofmap_3();
  }

};


class linearelastic3dp1p1_dofmap_4: public ufc::dofmap
{
public:

  linearelastic3dp1p1_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', tetrahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 4*num_global_entities[3];
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 4*entity_indices[3][0];
    dofs[1] = 4*entity_indices[3][0] + 1;
    dofs[2] = 4*entity_indices[3][0] + 2;
    dofs[3] = 4*entity_indices[3][0] + 3;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      case 4:
        {
          
          break;
        }
      case 5:
        {
          
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new linearelastic3dp1p1_dofmap_4();
  }

};


class linearelastic3dp1p1_cell_integral_0_1: public ufc::cell_integral
{
public:

  linearelastic3dp1p1_cell_integral_0_1() : ufc::cell_integral()
  {

  }

  ~linearelastic3dp1p1_cell_integral_0_1() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 2
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 2
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           2
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.04166666666666666, 0.04166666666666666, 0.04166666666666666, 0.04166666666666666 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE25_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE25_C0_Q4[1][4][4] =
        { { { 0.1381966011250091, 0.585410196624969, 0.138196601125011, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.585410196624969, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.138196601125011, 0.585410196624969 },
            { 0.5854101966249672, 0.1381966011250109, 0.138196601125011, 0.138196601125011 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE25_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE25_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE25_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE25_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE25_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE25_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE25_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE25_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE25_C0_D001_Q4[0][0][1];
    double w2_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c0 += w[2][ic] * FE25_C0_D001_Q4[0][0][ic];
    const double w2_d1_c0 = w[2][0] * FE25_C0_D001_Q4[0][0][0] + w[2][2] * FE25_C0_D001_Q4[0][0][1];
    const double w2_d2_c0 = w[2][0] * FE25_C0_D001_Q4[0][0][0] + w[2][3] * FE25_C0_D001_Q4[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE25_C0_D001_Q4[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE25_C0_D001_Q4[0][0][0] + w[0][2] * FE25_C0_D001_Q4[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE25_C0_D001_Q4[0][0][0] + w[0][3] * FE25_C0_D001_Q4[0][0][1];
    double w1_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c0 += w[1][ic] * FE25_C0_D001_Q4[0][0][ic];
    const double w1_d1_c0 = w[1][0] * FE25_C0_D001_Q4[0][0][0] + w[1][2] * FE25_C0_D001_Q4[0][0][1];
    const double w1_d2_c0 = w[1][0] * FE25_C0_D001_Q4[0][0][0] + w[1][3] * FE25_C0_D001_Q4[0][0][1];
    double w2_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c1 += w[2][ic + 4] * FE25_C0_D001_Q4[0][0][ic];
    const double w2_d1_c1 = w[2][4] * FE25_C0_D001_Q4[0][0][0] + w[2][6] * FE25_C0_D001_Q4[0][0][1];
    const double w2_d2_c1 = w[2][4] * FE25_C0_D001_Q4[0][0][0] + w[2][7] * FE25_C0_D001_Q4[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE25_C0_D001_Q4[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE25_C0_D001_Q4[0][0][0] + w[0][6] * FE25_C0_D001_Q4[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE25_C0_D001_Q4[0][0][0] + w[0][7] * FE25_C0_D001_Q4[0][0][1];
    double w1_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c1 += w[1][ic + 4] * FE25_C0_D001_Q4[0][0][ic];
    const double w1_d1_c1 = w[1][4] * FE25_C0_D001_Q4[0][0][0] + w[1][6] * FE25_C0_D001_Q4[0][0][1];
    const double w1_d2_c1 = w[1][4] * FE25_C0_D001_Q4[0][0][0] + w[1][7] * FE25_C0_D001_Q4[0][0][1];
    double w2_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c2 += w[2][ic + 8] * FE25_C0_D001_Q4[0][0][ic];
    const double w2_d1_c2 = w[2][8] * FE25_C0_D001_Q4[0][0][0] + w[2][10] * FE25_C0_D001_Q4[0][0][1];
    const double w2_d2_c2 = w[2][8] * FE25_C0_D001_Q4[0][0][0] + w[2][11] * FE25_C0_D001_Q4[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE25_C0_D001_Q4[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE25_C0_D001_Q4[0][0][0] + w[0][10] * FE25_C0_D001_Q4[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE25_C0_D001_Q4[0][0][0] + w[0][11] * FE25_C0_D001_Q4[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 8] * FE25_C0_D001_Q4[0][0][ic];
    const double w1_d1_c2 = w[1][8] * FE25_C0_D001_Q4[0][0][0] + w[1][10] * FE25_C0_D001_Q4[0][0][1];
    const double w1_d2_c2 = w[1][8] * FE25_C0_D001_Q4[0][0][0] + w[1][11] * FE25_C0_D001_Q4[0][0][1];
    alignas(32) double sp[214];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = w2_d0_c0 * sp[14];
    sp[20] = w2_d1_c0 * sp[17];
    sp[21] = sp[19] + sp[20];
    sp[22] = w2_d2_c0 * sp[18];
    sp[23] = sp[21] + sp[22];
    sp[24] = w0_d0_c0 * sp[14];
    sp[25] = w0_d1_c0 * sp[17];
    sp[26] = sp[24] + sp[25];
    sp[27] = w0_d2_c0 * sp[18];
    sp[28] = sp[26] + sp[27];
    sp[29] = w1_d0_c0 * sp[14];
    sp[30] = w1_d1_c0 * sp[17];
    sp[31] = sp[29] + sp[30];
    sp[32] = w1_d2_c0 * sp[18];
    sp[33] = sp[31] + sp[32];
    sp[34] = sp[28] + sp[33];
    sp[35] = sp[34] * w[3][0];
    sp[36] = sp[23] + 0.5 * sp[35];
    sp[37] = sp[36] + sp[36];
    sp[38] = J_c2 * J_c7;
    sp[39] = J_c8 * (-1 * J_c1);
    sp[40] = sp[38] + sp[39];
    sp[41] = sp[40] / sp[13];
    sp[42] = w2_d0_c1 * sp[41];
    sp[43] = J_c0 * J_c8;
    sp[44] = J_c6 * (-1 * J_c2);
    sp[45] = sp[43] + sp[44];
    sp[46] = sp[45] / sp[13];
    sp[47] = w2_d1_c1 * sp[46];
    sp[48] = sp[42] + sp[47];
    sp[49] = J_c1 * J_c6;
    sp[50] = J_c0 * J_c7;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = w2_d2_c1 * sp[52];
    sp[54] = sp[48] + sp[53];
    sp[55] = w0_d0_c1 * sp[41];
    sp[56] = w0_d1_c1 * sp[46];
    sp[57] = sp[55] + sp[56];
    sp[58] = w0_d2_c1 * sp[52];
    sp[59] = sp[57] + sp[58];
    sp[60] = w1_d0_c1 * sp[41];
    sp[61] = w1_d1_c1 * sp[46];
    sp[62] = sp[60] + sp[61];
    sp[63] = w1_d2_c1 * sp[52];
    sp[64] = sp[62] + sp[63];
    sp[65] = sp[59] + sp[64];
    sp[66] = sp[65] * w[3][0];
    sp[67] = sp[54] + 0.5 * sp[66];
    sp[68] = sp[36] + sp[67];
    sp[69] = J_c1 * J_c5;
    sp[70] = J_c2 * J_c4;
    sp[71] = sp[69] + -1 * sp[70];
    sp[72] = sp[71] / sp[13];
    sp[73] = w2_d0_c2 * sp[72];
    sp[74] = J_c2 * J_c3;
    sp[75] = J_c0 * J_c5;
    sp[76] = sp[74] + -1 * sp[75];
    sp[77] = sp[76] / sp[13];
    sp[78] = w2_d1_c2 * sp[77];
    sp[79] = sp[73] + sp[78];
    sp[80] = J_c0 * J_c4;
    sp[81] = J_c1 * J_c3;
    sp[82] = sp[80] + -1 * sp[81];
    sp[83] = sp[82] / sp[13];
    sp[84] = w2_d2_c2 * sp[83];
    sp[85] = sp[79] + sp[84];
    sp[86] = w0_d0_c2 * sp[72];
    sp[87] = w0_d1_c2 * sp[77];
    sp[88] = sp[86] + sp[87];
    sp[89] = w0_d2_c2 * sp[83];
    sp[90] = sp[88] + sp[89];
    sp[91] = w1_d0_c2 * sp[72];
    sp[92] = w1_d1_c2 * sp[77];
    sp[93] = sp[91] + sp[92];
    sp[94] = w1_d2_c2 * sp[83];
    sp[95] = sp[93] + sp[94];
    sp[96] = sp[90] + sp[95];
    sp[97] = sp[96] * w[3][0];
    sp[98] = sp[85] + 0.5 * sp[97];
    sp[99] = sp[68] + sp[98];
    sp[100] = w2_d0_c1 * sp[14];
    sp[101] = w2_d1_c1 * sp[17];
    sp[102] = sp[100] + sp[101];
    sp[103] = w2_d2_c1 * sp[18];
    sp[104] = sp[102] + sp[103];
    sp[105] = w0_d0_c1 * sp[14];
    sp[106] = w0_d1_c1 * sp[17];
    sp[107] = sp[105] + sp[106];
    sp[108] = w0_d2_c1 * sp[18];
    sp[109] = sp[107] + sp[108];
    sp[110] = w1_d0_c1 * sp[14];
    sp[111] = w1_d1_c1 * sp[17];
    sp[112] = sp[110] + sp[111];
    sp[113] = w1_d2_c1 * sp[18];
    sp[114] = sp[112] + sp[113];
    sp[115] = sp[109] + sp[114];
    sp[116] = sp[115] * w[3][0];
    sp[117] = sp[104] + 0.5 * sp[116];
    sp[118] = w2_d0_c0 * sp[41];
    sp[119] = w2_d1_c0 * sp[46];
    sp[120] = sp[118] + sp[119];
    sp[121] = w2_d2_c0 * sp[52];
    sp[122] = sp[120] + sp[121];
    sp[123] = w0_d0_c0 * sp[41];
    sp[124] = w0_d1_c0 * sp[46];
    sp[125] = sp[123] + sp[124];
    sp[126] = w0_d2_c0 * sp[52];
    sp[127] = sp[125] + sp[126];
    sp[128] = w1_d0_c0 * sp[41];
    sp[129] = w1_d1_c0 * sp[46];
    sp[130] = sp[128] + sp[129];
    sp[131] = w1_d2_c0 * sp[52];
    sp[132] = sp[130] + sp[131];
    sp[133] = sp[127] + sp[132];
    sp[134] = sp[133] * w[3][0];
    sp[135] = sp[122] + 0.5 * sp[134];
    sp[136] = sp[117] + sp[135];
    sp[137] = w2_d0_c0 * sp[72];
    sp[138] = w2_d1_c0 * sp[77];
    sp[139] = sp[137] + sp[138];
    sp[140] = w2_d2_c0 * sp[83];
    sp[141] = sp[139] + sp[140];
    sp[142] = w0_d0_c0 * sp[72];
    sp[143] = w0_d1_c0 * sp[77];
    sp[144] = sp[142] + sp[143];
    sp[145] = w0_d2_c0 * sp[83];
    sp[146] = sp[144] + sp[145];
    sp[147] = w1_d0_c0 * sp[72];
    sp[148] = w1_d1_c0 * sp[77];
    sp[149] = sp[147] + sp[148];
    sp[150] = w1_d2_c0 * sp[83];
    sp[151] = sp[149] + sp[150];
    sp[152] = sp[146] + sp[151];
    sp[153] = sp[152] * w[3][0];
    sp[154] = sp[141] + 0.5 * sp[153];
    sp[155] = w2_d0_c2 * sp[14];
    sp[156] = w2_d1_c2 * sp[17];
    sp[157] = sp[155] + sp[156];
    sp[158] = w2_d2_c2 * sp[18];
    sp[159] = sp[157] + sp[158];
    sp[160] = w0_d0_c2 * sp[14];
    sp[161] = w0_d1_c2 * sp[17];
    sp[162] = sp[160] + sp[161];
    sp[163] = w0_d2_c2 * sp[18];
    sp[164] = sp[162] + sp[163];
    sp[165] = w1_d0_c2 * sp[14];
    sp[166] = w1_d1_c2 * sp[17];
    sp[167] = sp[165] + sp[166];
    sp[168] = w1_d2_c2 * sp[18];
    sp[169] = sp[167] + sp[168];
    sp[170] = sp[164] + sp[169];
    sp[171] = sp[170] * w[3][0];
    sp[172] = sp[159] + 0.5 * sp[171];
    sp[173] = sp[154] + sp[172];
    sp[174] = sp[67] + sp[67];
    sp[175] = w2_d0_c1 * sp[72];
    sp[176] = w2_d1_c1 * sp[77];
    sp[177] = sp[175] + sp[176];
    sp[178] = w2_d2_c1 * sp[83];
    sp[179] = sp[177] + sp[178];
    sp[180] = w0_d0_c1 * sp[72];
    sp[181] = w0_d1_c1 * sp[77];
    sp[182] = sp[180] + sp[181];
    sp[183] = w0_d2_c1 * sp[83];
    sp[184] = sp[182] + sp[183];
    sp[185] = w1_d0_c1 * sp[72];
    sp[186] = w1_d1_c1 * sp[77];
    sp[187] = sp[185] + sp[186];
    sp[188] = w1_d2_c1 * sp[83];
    sp[189] = sp[187] + sp[188];
    sp[190] = sp[184] + sp[189];
    sp[191] = sp[190] * w[3][0];
    sp[192] = sp[179] + 0.5 * sp[191];
    sp[193] = w2_d0_c2 * sp[41];
    sp[194] = w2_d1_c2 * sp[46];
    sp[195] = sp[193] + sp[194];
    sp[196] = w2_d2_c2 * sp[52];
    sp[197] = sp[195] + sp[196];
    sp[198] = w0_d0_c2 * sp[41];
    sp[199] = w0_d1_c2 * sp[46];
    sp[200] = sp[198] + sp[199];
    sp[201] = w0_d2_c2 * sp[52];
    sp[202] = sp[200] + sp[201];
    sp[203] = w1_d0_c2 * sp[41];
    sp[204] = w1_d1_c2 * sp[46];
    sp[205] = sp[203] + sp[204];
    sp[206] = w1_d2_c2 * sp[52];
    sp[207] = sp[205] + sp[206];
    sp[208] = sp[202] + sp[207];
    sp[209] = sp[208] * w[3][0];
    sp[210] = sp[197] + 0.5 * sp[209];
    sp[211] = sp[192] + sp[210];
    sp[212] = sp[98] + sp[98];
    sp[213] = std::abs(sp[13]);
    alignas(32) double BF0[2] = {};
    alignas(32) double BF1[4] = {};
    alignas(32) double BF2[2] = {};
    alignas(32) double BF3[2] = {};
    alignas(32) double BF4[2] = {};
    alignas(32) double BF5[4] = {};
    alignas(32) double BF6[2] = {};
    alignas(32) double BF7[2] = {};
    alignas(32) double BF8[2] = {};
    alignas(32) double BF9[4] = {};
    alignas(32) double BF10[2] = {};
    alignas(32) double BF11[2] = {};
    alignas(32) double BF12[4] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w5 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w5 += w[5][ic] * FE25_C0_Q4[0][iq][ic];
        double w0_c3 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c3 += w[0][ic + 12] * FE25_C0_Q4[0][iq][ic];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c0 += w[0][ic] * FE25_C0_Q4[0][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c0 += w[1][ic] * FE25_C0_Q4[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c1 += w[0][ic + 4] * FE25_C0_Q4[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c1 += w[1][ic + 4] * FE25_C0_Q4[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c2 += w[0][ic + 8] * FE25_C0_Q4[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c2 += w[1][ic + 8] * FE25_C0_Q4[0][iq][ic];
        alignas(32) double sv4[79];
        sv4[0] = 0.5 * sp[37] * (2 * w5);
        sv4[1] = 2 * w5 * w[6][0];
        sv4[2] = sv4[1] / (1 + -1 * (2 * w[6][0]));
        sv4[3] = sp[99] * sv4[2];
        sv4[4] = sv4[0] + sv4[3];
        sv4[5] = sv4[4] * sp[14];
        sv4[6] = sv4[4] * sp[17];
        sv4[7] = sv4[4] * sp[18];
        sv4[8] = 0.5 * sp[136] * (2 * w5);
        sv4[9] = sv4[8] * sp[14];
        sv4[10] = sv4[8] * sp[17];
        sv4[11] = sv4[8] * sp[18];
        sv4[12] = 0.5 * sp[173] * (2 * w5);
        sv4[13] = sv4[12] * sp[14];
        sv4[14] = sv4[12] * sp[17];
        sv4[15] = sv4[12] * sp[18];
        sv4[16] = 0.5 * sp[174] * (2 * w5);
        sv4[17] = sv4[16] + sv4[3];
        sv4[18] = sv4[17] * sp[41];
        sv4[19] = sv4[17] * sp[46];
        sv4[20] = sv4[17] * sp[52];
        sv4[21] = sv4[8] * sp[41];
        sv4[22] = sv4[8] * sp[46];
        sv4[23] = sv4[8] * sp[52];
        sv4[24] = 0.5 * sp[211] * (2 * w5);
        sv4[25] = sv4[24] * sp[41];
        sv4[26] = sv4[24] * sp[46];
        sv4[27] = sv4[24] * sp[52];
        sv4[28] = sv4[21] + sv4[5];
        sv4[29] = sv4[22] + sv4[6];
        sv4[30] = sv4[7] + sv4[23];
        sv4[31] = sv4[18] + sv4[9];
        sv4[32] = sv4[19] + sv4[10];
        sv4[33] = sv4[11] + sv4[20];
        sv4[34] = sv4[25] + sv4[13];
        sv4[35] = sv4[26] + sv4[14];
        sv4[36] = sv4[15] + sv4[27];
        sv4[37] = sv4[12] * sp[72];
        sv4[38] = sv4[12] * sp[77];
        sv4[39] = sv4[12] * sp[83];
        sv4[40] = sv4[24] * sp[72];
        sv4[41] = sv4[24] * sp[77];
        sv4[42] = sv4[24] * sp[83];
        sv4[43] = 0.5 * sp[212] * (2 * w5);
        sv4[44] = sv4[43] + sv4[3];
        sv4[45] = sv4[44] * sp[72];
        sv4[46] = sv4[44] * sp[77];
        sv4[47] = sv4[44] * sp[83];
        sv4[48] = sv4[28] + sv4[37];
        sv4[49] = sv4[29] + sv4[38];
        sv4[50] = sv4[30] + sv4[39];
        sv4[51] = sv4[31] + sv4[40];
        sv4[52] = sv4[32] + sv4[41];
        sv4[53] = sv4[33] + sv4[42];
        sv4[54] = sv4[34] + sv4[45];
        sv4[55] = sv4[35] + sv4[46];
        sv4[56] = sv4[36] + sv4[47];
        sv4[57] = w0_c0 + -1 * w1_c0;
        sv4[58] = sv4[57] / w[3][0];
        sv4[59] = w0_c1 + -1 * w1_c1;
        sv4[60] = sv4[59] / w[3][0];
        sv4[61] = w0_c2 + -1 * w1_c2;
        sv4[62] = sv4[61] / w[3][0];
        sv4[63] = sv4[58] * w[4][0];
        sv4[64] = sv4[60] * w[4][0];
        sv4[65] = sv4[62] * w[4][0];
        sv4[66] = sv4[48] * sp[213];
        sv4[67] = sv4[49] * sp[213];
        sv4[68] = sv4[50] * sp[213];
        sv4[69] = sv4[51] * sp[213];
        sv4[70] = sv4[52] * sp[213];
        sv4[71] = sv4[53] * sp[213];
        sv4[72] = sv4[54] * sp[213];
        sv4[73] = sv4[55] * sp[213];
        sv4[74] = sv4[56] * sp[213];
        sv4[75] = 1e-12 * w0_c3 * sp[213];
        sv4[76] = sv4[63] * sp[213];
        sv4[77] = sv4[64] * sp[213];
        sv4[78] = sv4[65] * sp[213];
        const double fw0 = sv4[66] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF0[i] += fw0 * FE25_C0_D001_Q4[0][0][i];
        const double fw1 = sv4[76] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF1[i] += fw1 * FE25_C0_Q4[0][iq][i];
        const double fw2 = sv4[67] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF2[i] += fw2 * FE25_C0_D001_Q4[0][0][i];
        const double fw3 = sv4[68] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF3[i] += fw3 * FE25_C0_D001_Q4[0][0][i];
        const double fw4 = sv4[69] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF4[i] += fw4 * FE25_C0_D001_Q4[0][0][i];
        const double fw5 = sv4[77] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF5[i] += fw5 * FE25_C0_Q4[0][iq][i];
        const double fw6 = sv4[70] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF6[i] += fw6 * FE25_C0_D001_Q4[0][0][i];
        const double fw7 = sv4[71] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF7[i] += fw7 * FE25_C0_D001_Q4[0][0][i];
        const double fw8 = sv4[72] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF8[i] += fw8 * FE25_C0_D001_Q4[0][0][i];
        const double fw9 = sv4[78] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF9[i] += fw9 * FE25_C0_Q4[0][iq][i];
        const double fw10 = sv4[73] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF10[i] += fw10 * FE25_C0_D001_Q4[0][0][i];
        const double fw11 = sv4[74] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF11[i] += fw11 * FE25_C0_D001_Q4[0][0][i];
        const double fw12 = sv4[75] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF12[i] += fw12 * FE25_C0_Q4[0][iq][i];
    }
    std::fill(&A[0], &A[16], 0.0);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 4, 6 };
    static const int DM3[2] = { 4, 7 };
    static const int DM4[2] = { 8, 10 };
    static const int DM5[2] = { 8, 11 };
    for (int i = 0; i < 2; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 4; ++i)
        A[i] += BF1[i];
    for (int i = 0; i < 2; ++i)
        A[DM0[i]] += BF2[i];
    for (int i = 0; i < 2; ++i)
        A[DM1[i]] += BF3[i];
    for (int i = 0; i < 2; ++i)
        A[i + 4] += BF4[i];
    for (int i = 0; i < 4; ++i)
        A[i + 4] += BF5[i];
    for (int i = 0; i < 2; ++i)
        A[DM2[i]] += BF6[i];
    for (int i = 0; i < 2; ++i)
        A[DM3[i]] += BF7[i];
    for (int i = 0; i < 2; ++i)
        A[i + 8] += BF8[i];
    for (int i = 0; i < 4; ++i)
        A[i + 8] += BF9[i];
    for (int i = 0; i < 2; ++i)
        A[DM4[i]] += BF10[i];
    for (int i = 0; i < 2; ++i)
        A[DM5[i]] += BF11[i];
    for (int i = 0; i < 4; ++i)
        A[i + 12] += BF12[i];
  }

};


class linearelastic3dp1p1_cell_integral_0_2: public ufc::cell_integral
{
public:

  linearelastic3dp1p1_cell_integral_0_2() : ufc::cell_integral()
  {

  }

  ~linearelastic3dp1p1_cell_integral_0_2() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 2
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 2
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           2
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.04166666666666666, 0.04166666666666666, 0.04166666666666666, 0.04166666666666666 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE25_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE25_C0_Q4[1][4][4] =
        { { { 0.1381966011250091, 0.585410196624969, 0.138196601125011, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.585410196624969, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.138196601125011, 0.585410196624969 },
            { 0.5854101966249672, 0.1381966011250109, 0.138196601125011, 0.138196601125011 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE25_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE25_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE25_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE25_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE25_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE25_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE25_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE25_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE25_C0_D001_Q4[0][0][1];
    double w2_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c0 += w[2][ic] * FE25_C0_D001_Q4[0][0][ic];
    const double w2_d1_c0 = w[2][0] * FE25_C0_D001_Q4[0][0][0] + w[2][2] * FE25_C0_D001_Q4[0][0][1];
    const double w2_d2_c0 = w[2][0] * FE25_C0_D001_Q4[0][0][0] + w[2][3] * FE25_C0_D001_Q4[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE25_C0_D001_Q4[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE25_C0_D001_Q4[0][0][0] + w[0][2] * FE25_C0_D001_Q4[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE25_C0_D001_Q4[0][0][0] + w[0][3] * FE25_C0_D001_Q4[0][0][1];
    double w1_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c0 += w[1][ic] * FE25_C0_D001_Q4[0][0][ic];
    const double w1_d1_c0 = w[1][0] * FE25_C0_D001_Q4[0][0][0] + w[1][2] * FE25_C0_D001_Q4[0][0][1];
    const double w1_d2_c0 = w[1][0] * FE25_C0_D001_Q4[0][0][0] + w[1][3] * FE25_C0_D001_Q4[0][0][1];
    double w2_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c1 += w[2][ic + 4] * FE25_C0_D001_Q4[0][0][ic];
    const double w2_d1_c1 = w[2][4] * FE25_C0_D001_Q4[0][0][0] + w[2][6] * FE25_C0_D001_Q4[0][0][1];
    const double w2_d2_c1 = w[2][4] * FE25_C0_D001_Q4[0][0][0] + w[2][7] * FE25_C0_D001_Q4[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE25_C0_D001_Q4[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE25_C0_D001_Q4[0][0][0] + w[0][6] * FE25_C0_D001_Q4[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE25_C0_D001_Q4[0][0][0] + w[0][7] * FE25_C0_D001_Q4[0][0][1];
    double w1_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c1 += w[1][ic + 4] * FE25_C0_D001_Q4[0][0][ic];
    const double w1_d1_c1 = w[1][4] * FE25_C0_D001_Q4[0][0][0] + w[1][6] * FE25_C0_D001_Q4[0][0][1];
    const double w1_d2_c1 = w[1][4] * FE25_C0_D001_Q4[0][0][0] + w[1][7] * FE25_C0_D001_Q4[0][0][1];
    double w2_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_c2 += w[2][ic + 8] * FE25_C0_D001_Q4[0][0][ic];
    const double w2_d1_c2 = w[2][8] * FE25_C0_D001_Q4[0][0][0] + w[2][10] * FE25_C0_D001_Q4[0][0][1];
    const double w2_d2_c2 = w[2][8] * FE25_C0_D001_Q4[0][0][0] + w[2][11] * FE25_C0_D001_Q4[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE25_C0_D001_Q4[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE25_C0_D001_Q4[0][0][0] + w[0][10] * FE25_C0_D001_Q4[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE25_C0_D001_Q4[0][0][0] + w[0][11] * FE25_C0_D001_Q4[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 8] * FE25_C0_D001_Q4[0][0][ic];
    const double w1_d1_c2 = w[1][8] * FE25_C0_D001_Q4[0][0][0] + w[1][10] * FE25_C0_D001_Q4[0][0][1];
    const double w1_d2_c2 = w[1][8] * FE25_C0_D001_Q4[0][0][0] + w[1][11] * FE25_C0_D001_Q4[0][0][1];
    alignas(32) double sp[214];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = w2_d0_c0 * sp[14];
    sp[20] = w2_d1_c0 * sp[17];
    sp[21] = sp[19] + sp[20];
    sp[22] = w2_d2_c0 * sp[18];
    sp[23] = sp[21] + sp[22];
    sp[24] = w0_d0_c0 * sp[14];
    sp[25] = w0_d1_c0 * sp[17];
    sp[26] = sp[24] + sp[25];
    sp[27] = w0_d2_c0 * sp[18];
    sp[28] = sp[26] + sp[27];
    sp[29] = w1_d0_c0 * sp[14];
    sp[30] = w1_d1_c0 * sp[17];
    sp[31] = sp[29] + sp[30];
    sp[32] = w1_d2_c0 * sp[18];
    sp[33] = sp[31] + sp[32];
    sp[34] = sp[28] + sp[33];
    sp[35] = sp[34] * w[3][0];
    sp[36] = sp[23] + 0.5 * sp[35];
    sp[37] = sp[36] + sp[36];
    sp[38] = J_c2 * J_c7;
    sp[39] = J_c8 * (-1 * J_c1);
    sp[40] = sp[38] + sp[39];
    sp[41] = sp[40] / sp[13];
    sp[42] = w2_d0_c1 * sp[41];
    sp[43] = J_c0 * J_c8;
    sp[44] = J_c6 * (-1 * J_c2);
    sp[45] = sp[43] + sp[44];
    sp[46] = sp[45] / sp[13];
    sp[47] = w2_d1_c1 * sp[46];
    sp[48] = sp[42] + sp[47];
    sp[49] = J_c1 * J_c6;
    sp[50] = J_c0 * J_c7;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = w2_d2_c1 * sp[52];
    sp[54] = sp[48] + sp[53];
    sp[55] = w0_d0_c1 * sp[41];
    sp[56] = w0_d1_c1 * sp[46];
    sp[57] = sp[55] + sp[56];
    sp[58] = w0_d2_c1 * sp[52];
    sp[59] = sp[57] + sp[58];
    sp[60] = w1_d0_c1 * sp[41];
    sp[61] = w1_d1_c1 * sp[46];
    sp[62] = sp[60] + sp[61];
    sp[63] = w1_d2_c1 * sp[52];
    sp[64] = sp[62] + sp[63];
    sp[65] = sp[59] + sp[64];
    sp[66] = sp[65] * w[3][0];
    sp[67] = sp[54] + 0.5 * sp[66];
    sp[68] = sp[36] + sp[67];
    sp[69] = J_c1 * J_c5;
    sp[70] = J_c2 * J_c4;
    sp[71] = sp[69] + -1 * sp[70];
    sp[72] = sp[71] / sp[13];
    sp[73] = w2_d0_c2 * sp[72];
    sp[74] = J_c2 * J_c3;
    sp[75] = J_c0 * J_c5;
    sp[76] = sp[74] + -1 * sp[75];
    sp[77] = sp[76] / sp[13];
    sp[78] = w2_d1_c2 * sp[77];
    sp[79] = sp[73] + sp[78];
    sp[80] = J_c0 * J_c4;
    sp[81] = J_c1 * J_c3;
    sp[82] = sp[80] + -1 * sp[81];
    sp[83] = sp[82] / sp[13];
    sp[84] = w2_d2_c2 * sp[83];
    sp[85] = sp[79] + sp[84];
    sp[86] = w0_d0_c2 * sp[72];
    sp[87] = w0_d1_c2 * sp[77];
    sp[88] = sp[86] + sp[87];
    sp[89] = w0_d2_c2 * sp[83];
    sp[90] = sp[88] + sp[89];
    sp[91] = w1_d0_c2 * sp[72];
    sp[92] = w1_d1_c2 * sp[77];
    sp[93] = sp[91] + sp[92];
    sp[94] = w1_d2_c2 * sp[83];
    sp[95] = sp[93] + sp[94];
    sp[96] = sp[90] + sp[95];
    sp[97] = sp[96] * w[3][0];
    sp[98] = sp[85] + 0.5 * sp[97];
    sp[99] = sp[68] + sp[98];
    sp[100] = w2_d0_c1 * sp[14];
    sp[101] = w2_d1_c1 * sp[17];
    sp[102] = sp[100] + sp[101];
    sp[103] = w2_d2_c1 * sp[18];
    sp[104] = sp[102] + sp[103];
    sp[105] = w0_d0_c1 * sp[14];
    sp[106] = w0_d1_c1 * sp[17];
    sp[107] = sp[105] + sp[106];
    sp[108] = w0_d2_c1 * sp[18];
    sp[109] = sp[107] + sp[108];
    sp[110] = w1_d0_c1 * sp[14];
    sp[111] = w1_d1_c1 * sp[17];
    sp[112] = sp[110] + sp[111];
    sp[113] = w1_d2_c1 * sp[18];
    sp[114] = sp[112] + sp[113];
    sp[115] = sp[109] + sp[114];
    sp[116] = sp[115] * w[3][0];
    sp[117] = sp[104] + 0.5 * sp[116];
    sp[118] = w2_d0_c0 * sp[41];
    sp[119] = w2_d1_c0 * sp[46];
    sp[120] = sp[118] + sp[119];
    sp[121] = w2_d2_c0 * sp[52];
    sp[122] = sp[120] + sp[121];
    sp[123] = w0_d0_c0 * sp[41];
    sp[124] = w0_d1_c0 * sp[46];
    sp[125] = sp[123] + sp[124];
    sp[126] = w0_d2_c0 * sp[52];
    sp[127] = sp[125] + sp[126];
    sp[128] = w1_d0_c0 * sp[41];
    sp[129] = w1_d1_c0 * sp[46];
    sp[130] = sp[128] + sp[129];
    sp[131] = w1_d2_c0 * sp[52];
    sp[132] = sp[130] + sp[131];
    sp[133] = sp[127] + sp[132];
    sp[134] = sp[133] * w[3][0];
    sp[135] = sp[122] + 0.5 * sp[134];
    sp[136] = sp[117] + sp[135];
    sp[137] = w2_d0_c0 * sp[72];
    sp[138] = w2_d1_c0 * sp[77];
    sp[139] = sp[137] + sp[138];
    sp[140] = w2_d2_c0 * sp[83];
    sp[141] = sp[139] + sp[140];
    sp[142] = w0_d0_c0 * sp[72];
    sp[143] = w0_d1_c0 * sp[77];
    sp[144] = sp[142] + sp[143];
    sp[145] = w0_d2_c0 * sp[83];
    sp[146] = sp[144] + sp[145];
    sp[147] = w1_d0_c0 * sp[72];
    sp[148] = w1_d1_c0 * sp[77];
    sp[149] = sp[147] + sp[148];
    sp[150] = w1_d2_c0 * sp[83];
    sp[151] = sp[149] + sp[150];
    sp[152] = sp[146] + sp[151];
    sp[153] = sp[152] * w[3][0];
    sp[154] = sp[141] + 0.5 * sp[153];
    sp[155] = w2_d0_c2 * sp[14];
    sp[156] = w2_d1_c2 * sp[17];
    sp[157] = sp[155] + sp[156];
    sp[158] = w2_d2_c2 * sp[18];
    sp[159] = sp[157] + sp[158];
    sp[160] = w0_d0_c2 * sp[14];
    sp[161] = w0_d1_c2 * sp[17];
    sp[162] = sp[160] + sp[161];
    sp[163] = w0_d2_c2 * sp[18];
    sp[164] = sp[162] + sp[163];
    sp[165] = w1_d0_c2 * sp[14];
    sp[166] = w1_d1_c2 * sp[17];
    sp[167] = sp[165] + sp[166];
    sp[168] = w1_d2_c2 * sp[18];
    sp[169] = sp[167] + sp[168];
    sp[170] = sp[164] + sp[169];
    sp[171] = sp[170] * w[3][0];
    sp[172] = sp[159] + 0.5 * sp[171];
    sp[173] = sp[154] + sp[172];
    sp[174] = sp[67] + sp[67];
    sp[175] = w2_d0_c1 * sp[72];
    sp[176] = w2_d1_c1 * sp[77];
    sp[177] = sp[175] + sp[176];
    sp[178] = w2_d2_c1 * sp[83];
    sp[179] = sp[177] + sp[178];
    sp[180] = w0_d0_c1 * sp[72];
    sp[181] = w0_d1_c1 * sp[77];
    sp[182] = sp[180] + sp[181];
    sp[183] = w0_d2_c1 * sp[83];
    sp[184] = sp[182] + sp[183];
    sp[185] = w1_d0_c1 * sp[72];
    sp[186] = w1_d1_c1 * sp[77];
    sp[187] = sp[185] + sp[186];
    sp[188] = w1_d2_c1 * sp[83];
    sp[189] = sp[187] + sp[188];
    sp[190] = sp[184] + sp[189];
    sp[191] = sp[190] * w[3][0];
    sp[192] = sp[179] + 0.5 * sp[191];
    sp[193] = w2_d0_c2 * sp[41];
    sp[194] = w2_d1_c2 * sp[46];
    sp[195] = sp[193] + sp[194];
    sp[196] = w2_d2_c2 * sp[52];
    sp[197] = sp[195] + sp[196];
    sp[198] = w0_d0_c2 * sp[41];
    sp[199] = w0_d1_c2 * sp[46];
    sp[200] = sp[198] + sp[199];
    sp[201] = w0_d2_c2 * sp[52];
    sp[202] = sp[200] + sp[201];
    sp[203] = w1_d0_c2 * sp[41];
    sp[204] = w1_d1_c2 * sp[46];
    sp[205] = sp[203] + sp[204];
    sp[206] = w1_d2_c2 * sp[52];
    sp[207] = sp[205] + sp[206];
    sp[208] = sp[202] + sp[207];
    sp[209] = sp[208] * w[3][0];
    sp[210] = sp[197] + 0.5 * sp[209];
    sp[211] = sp[192] + sp[210];
    sp[212] = sp[98] + sp[98];
    sp[213] = std::abs(sp[13]);
    alignas(32) double BF0[2] = {};
    alignas(32) double BF1[4] = {};
    alignas(32) double BF2[2] = {};
    alignas(32) double BF3[2] = {};
    alignas(32) double BF4[2] = {};
    alignas(32) double BF5[4] = {};
    alignas(32) double BF6[2] = {};
    alignas(32) double BF7[2] = {};
    alignas(32) double BF8[2] = {};
    alignas(32) double BF9[4] = {};
    alignas(32) double BF10[2] = {};
    alignas(32) double BF11[2] = {};
    alignas(32) double BF12[4] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w5 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w5 += w[5][ic] * FE25_C0_Q4[0][iq][ic];
        double w0_c3 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c3 += w[0][ic + 12] * FE25_C0_Q4[0][iq][ic];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c0 += w[0][ic] * FE25_C0_Q4[0][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c0 += w[1][ic] * FE25_C0_Q4[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c1 += w[0][ic + 4] * FE25_C0_Q4[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c1 += w[1][ic + 4] * FE25_C0_Q4[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c2 += w[0][ic + 8] * FE25_C0_Q4[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c2 += w[1][ic + 8] * FE25_C0_Q4[0][iq][ic];
        alignas(32) double sv4[79];
        sv4[0] = 0.5 * sp[37] * (2 * w5);
        sv4[1] = 2 * w5 * w[6][0];
        sv4[2] = sv4[1] / (1 + -1 * (2 * w[6][0]));
        sv4[3] = sp[99] * sv4[2];
        sv4[4] = sv4[0] + sv4[3];
        sv4[5] = sv4[4] * sp[14];
        sv4[6] = sv4[4] * sp[17];
        sv4[7] = sv4[4] * sp[18];
        sv4[8] = 0.5 * sp[136] * (2 * w5);
        sv4[9] = sv4[8] * sp[14];
        sv4[10] = sv4[8] * sp[17];
        sv4[11] = sv4[8] * sp[18];
        sv4[12] = 0.5 * sp[173] * (2 * w5);
        sv4[13] = sv4[12] * sp[14];
        sv4[14] = sv4[12] * sp[17];
        sv4[15] = sv4[12] * sp[18];
        sv4[16] = 0.5 * sp[174] * (2 * w5);
        sv4[17] = sv4[16] + sv4[3];
        sv4[18] = sv4[17] * sp[41];
        sv4[19] = sv4[17] * sp[46];
        sv4[20] = sv4[17] * sp[52];
        sv4[21] = sv4[8] * sp[41];
        sv4[22] = sv4[8] * sp[46];
        sv4[23] = sv4[8] * sp[52];
        sv4[24] = 0.5 * sp[211] * (2 * w5);
        sv4[25] = sv4[24] * sp[41];
        sv4[26] = sv4[24] * sp[46];
        sv4[27] = sv4[24] * sp[52];
        sv4[28] = sv4[21] + sv4[5];
        sv4[29] = sv4[22] + sv4[6];
        sv4[30] = sv4[7] + sv4[23];
        sv4[31] = sv4[18] + sv4[9];
        sv4[32] = sv4[19] + sv4[10];
        sv4[33] = sv4[11] + sv4[20];
        sv4[34] = sv4[25] + sv4[13];
        sv4[35] = sv4[26] + sv4[14];
        sv4[36] = sv4[15] + sv4[27];
        sv4[37] = sv4[12] * sp[72];
        sv4[38] = sv4[12] * sp[77];
        sv4[39] = sv4[12] * sp[83];
        sv4[40] = sv4[24] * sp[72];
        sv4[41] = sv4[24] * sp[77];
        sv4[42] = sv4[24] * sp[83];
        sv4[43] = 0.5 * sp[212] * (2 * w5);
        sv4[44] = sv4[43] + sv4[3];
        sv4[45] = sv4[44] * sp[72];
        sv4[46] = sv4[44] * sp[77];
        sv4[47] = sv4[44] * sp[83];
        sv4[48] = sv4[28] + sv4[37];
        sv4[49] = sv4[29] + sv4[38];
        sv4[50] = sv4[30] + sv4[39];
        sv4[51] = sv4[31] + sv4[40];
        sv4[52] = sv4[32] + sv4[41];
        sv4[53] = sv4[33] + sv4[42];
        sv4[54] = sv4[34] + sv4[45];
        sv4[55] = sv4[35] + sv4[46];
        sv4[56] = sv4[36] + sv4[47];
        sv4[57] = w0_c0 + -1 * w1_c0;
        sv4[58] = sv4[57] / w[3][0];
        sv4[59] = w0_c1 + -1 * w1_c1;
        sv4[60] = sv4[59] / w[3][0];
        sv4[61] = w0_c2 + -1 * w1_c2;
        sv4[62] = sv4[61] / w[3][0];
        sv4[63] = sv4[58] * w[4][0];
        sv4[64] = sv4[60] * w[4][0];
        sv4[65] = sv4[62] * w[4][0];
        sv4[66] = sv4[48] * sp[213];
        sv4[67] = sv4[49] * sp[213];
        sv4[68] = sv4[50] * sp[213];
        sv4[69] = sv4[51] * sp[213];
        sv4[70] = sv4[52] * sp[213];
        sv4[71] = sv4[53] * sp[213];
        sv4[72] = sv4[54] * sp[213];
        sv4[73] = sv4[55] * sp[213];
        sv4[74] = sv4[56] * sp[213];
        sv4[75] = 1e-12 * w0_c3 * sp[213];
        sv4[76] = sv4[63] * sp[213];
        sv4[77] = sv4[64] * sp[213];
        sv4[78] = sv4[65] * sp[213];
        const double fw0 = sv4[66] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF0[i] += fw0 * FE25_C0_D001_Q4[0][0][i];
        const double fw1 = sv4[76] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF1[i] += fw1 * FE25_C0_Q4[0][iq][i];
        const double fw2 = sv4[67] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF2[i] += fw2 * FE25_C0_D001_Q4[0][0][i];
        const double fw3 = sv4[68] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF3[i] += fw3 * FE25_C0_D001_Q4[0][0][i];
        const double fw4 = sv4[69] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF4[i] += fw4 * FE25_C0_D001_Q4[0][0][i];
        const double fw5 = sv4[77] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF5[i] += fw5 * FE25_C0_Q4[0][iq][i];
        const double fw6 = sv4[70] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF6[i] += fw6 * FE25_C0_D001_Q4[0][0][i];
        const double fw7 = sv4[71] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF7[i] += fw7 * FE25_C0_D001_Q4[0][0][i];
        const double fw8 = sv4[72] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF8[i] += fw8 * FE25_C0_D001_Q4[0][0][i];
        const double fw9 = sv4[78] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF9[i] += fw9 * FE25_C0_Q4[0][iq][i];
        const double fw10 = sv4[73] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF10[i] += fw10 * FE25_C0_D001_Q4[0][0][i];
        const double fw11 = sv4[74] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF11[i] += fw11 * FE25_C0_D001_Q4[0][0][i];
        const double fw12 = sv4[75] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF12[i] += fw12 * FE25_C0_Q4[0][iq][i];
    }
    std::fill(&A[0], &A[16], 0.0);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 4, 6 };
    static const int DM3[2] = { 4, 7 };
    static const int DM4[2] = { 8, 10 };
    static const int DM5[2] = { 8, 11 };
    for (int i = 0; i < 2; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 4; ++i)
        A[i] += BF1[i];
    for (int i = 0; i < 2; ++i)
        A[DM0[i]] += BF2[i];
    for (int i = 0; i < 2; ++i)
        A[DM1[i]] += BF3[i];
    for (int i = 0; i < 2; ++i)
        A[i + 4] += BF4[i];
    for (int i = 0; i < 4; ++i)
        A[i + 4] += BF5[i];
    for (int i = 0; i < 2; ++i)
        A[DM2[i]] += BF6[i];
    for (int i = 0; i < 2; ++i)
        A[DM3[i]] += BF7[i];
    for (int i = 0; i < 2; ++i)
        A[i + 8] += BF8[i];
    for (int i = 0; i < 4; ++i)
        A[i + 8] += BF9[i];
    for (int i = 0; i < 2; ++i)
        A[DM4[i]] += BF10[i];
    for (int i = 0; i < 2; ++i)
        A[DM5[i]] += BF11[i];
    for (int i = 0; i < 4; ++i)
        A[i + 12] += BF12[i];
  }

};


class linearelastic3dp1p1_cell_integral_1_1: public ufc::cell_integral
{
public:

  linearelastic3dp1p1_cell_integral_1_1() : ufc::cell_integral()
  {

  }

  ~linearelastic3dp1p1_cell_integral_1_1() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 2
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 2
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           2
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.04166666666666666, 0.04166666666666666, 0.04166666666666666, 0.04166666666666666 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE25_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE25_C0_Q4[1][4][4] =
        { { { 0.1381966011250091, 0.585410196624969, 0.138196601125011, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.585410196624969, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.138196601125011, 0.585410196624969 },
            { 0.5854101966249672, 0.1381966011250109, 0.138196601125011, 0.138196601125011 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE25_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE25_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE25_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE25_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE25_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE25_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE25_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE25_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE25_C0_D001_Q4[0][0][1];
    alignas(32) double sp[64];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = sp[14] * w[0][0];
    sp[20] = sp[17] * w[0][0];
    sp[21] = sp[18] * w[0][0];
    sp[22] = 0.5 * sp[19] + 0.5 * sp[19];
    sp[23] = 0.5 * sp[20] + 0.5 * sp[20];
    sp[24] = 0.5 * sp[21] + 0.5 * sp[21];
    sp[25] = J_c2 * J_c7;
    sp[26] = J_c8 * (-1 * J_c1);
    sp[27] = sp[25] + sp[26];
    sp[28] = sp[27] / sp[13];
    sp[29] = J_c0 * J_c8;
    sp[30] = J_c6 * (-1 * J_c2);
    sp[31] = sp[29] + sp[30];
    sp[32] = sp[31] / sp[13];
    sp[33] = J_c1 * J_c6;
    sp[34] = J_c0 * J_c7;
    sp[35] = sp[33] + -1 * sp[34];
    sp[36] = sp[35] / sp[13];
    sp[37] = sp[28] * w[0][0];
    sp[38] = sp[32] * w[0][0];
    sp[39] = sp[36] * w[0][0];
    sp[40] = J_c1 * J_c5;
    sp[41] = J_c2 * J_c4;
    sp[42] = sp[40] + -1 * sp[41];
    sp[43] = sp[42] / sp[13];
    sp[44] = J_c2 * J_c3;
    sp[45] = J_c0 * J_c5;
    sp[46] = sp[44] + -1 * sp[45];
    sp[47] = sp[46] / sp[13];
    sp[48] = J_c0 * J_c4;
    sp[49] = J_c1 * J_c3;
    sp[50] = sp[48] + -1 * sp[49];
    sp[51] = sp[50] / sp[13];
    sp[52] = sp[43] * w[0][0];
    sp[53] = sp[47] * w[0][0];
    sp[54] = sp[51] * w[0][0];
    sp[55] = 0.5 * sp[37] + 0.5 * sp[37];
    sp[56] = 0.5 * sp[38] + 0.5 * sp[38];
    sp[57] = 0.5 * sp[39] + 0.5 * sp[39];
    sp[58] = 0.5 * sp[52] + 0.5 * sp[52];
    sp[59] = 0.5 * sp[53] + 0.5 * sp[53];
    sp[60] = 0.5 * sp[54] + 0.5 * sp[54];
    sp[61] = 1.0 / w[0][0] * w[1][0];
    sp[62] = std::abs(sp[13]);
    sp[63] = sp[61] * sp[62];
    alignas(32) double TP0[2] = {};
    alignas(32) double TP1[2] = {};
    alignas(32) double TP2[2] = {};
    alignas(32) double TP3[2] = {};
    alignas(32) double TP4[2] = {};
    alignas(32) double TP5[2] = {};
    alignas(32) double TP6[2] = {};
    alignas(32) double TP7[2] = {};
    alignas(32) double TP8[2] = {};
    alignas(32) double TP9[2] = {};
    alignas(32) double TP10[2] = {};
    alignas(32) double TP11[2] = {};
    alignas(32) double TP12[2] = {};
    alignas(32) double TP13[2] = {};
    alignas(32) double TP14[2] = {};
    alignas(32) double TP15[2] = {};
    alignas(32) double TP16[2] = {};
    alignas(32) double TP17[2] = {};
    alignas(32) double TP18[2] = {};
    alignas(32) double TP19[2] = {};
    alignas(32) double TP20[2] = {};
    alignas(32) double TP21[2] = {};
    alignas(32) double TP22[2] = {};
    alignas(32) double TP23[2] = {};
    alignas(32) double TP24[2] = {};
    alignas(32) double TP25[2] = {};
    alignas(32) double TP26[2] = {};
    alignas(32) double TP27[2] = {};
    alignas(32) double TP28[2] = {};
    alignas(32) double TP29[2] = {};
    alignas(32) double TP30[2] = {};
    alignas(32) double TP31[2] = {};
    alignas(32) double TP32[2] = {};
    alignas(32) double TP33[2] = {};
    alignas(32) double TP34[2] = {};
    alignas(32) double TP35[2] = {};
    alignas(32) double TP36[2] = {};
    alignas(32) double TP37[2] = {};
    alignas(32) double TP38[2] = {};
    alignas(32) double TP39[2] = {};
    alignas(32) double TP40[2] = {};
    alignas(32) double TP41[2] = {};
    alignas(32) double TP42[2] = {};
    alignas(32) double TP43[2] = {};
    alignas(32) double TP44[2] = {};
    alignas(32) double TP45[2] = {};
    alignas(32) double TP46[2] = {};
    alignas(32) double TP47[2] = {};
    alignas(32) double TP48[2] = {};
    alignas(32) double TP49[2] = {};
    alignas(32) double TP50[2] = {};
    alignas(32) double TP51[2] = {};
    alignas(32) double TP52[2] = {};
    alignas(32) double TP53[2] = {};
    alignas(32) double TP54[2] = {};
    alignas(32) double TP55[2] = {};
    alignas(32) double TP56[2] = {};
    alignas(32) double TP57[2] = {};
    alignas(32) double TP58[2] = {};
    alignas(32) double TP59[2] = {};
    alignas(32) double TP60[2] = {};
    alignas(32) double TP61[2] = {};
    alignas(32) double TP62[2] = {};
    alignas(32) double TP63[2] = {};
    alignas(32) double TP64[2] = {};
    alignas(32) double TP65[2] = {};
    alignas(32) double TP66[2] = {};
    alignas(32) double TP67[2] = {};
    alignas(32) double TP68[2] = {};
    alignas(32) double TP69[2] = {};
    alignas(32) double TP70[2] = {};
    alignas(32) double TP71[2] = {};
    alignas(32) double TP72[2] = {};
    alignas(32) double TP73[2] = {};
    alignas(32) double TP74[2] = {};
    alignas(32) double TP75[2] = {};
    alignas(32) double TP76[2] = {};
    alignas(32) double TP77[2] = {};
    alignas(32) double TP78[2] = {};
    alignas(32) double TP79[2] = {};
    alignas(32) double TP80[2] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2 += w[2][ic] * FE25_C0_Q4[0][iq][ic];
        alignas(32) double sv4[389];
        sv4[0] = 0.5 * sp[22] * (2 * w2);
        sv4[1] = 0.5 * sp[23] * (2 * w2);
        sv4[2] = 0.5 * sp[24] * (2 * w2);
        sv4[3] = 2 * w2 * w[3][0];
        sv4[4] = sv4[3] / (1 + -1 * (2 * w[3][0]));
        sv4[5] = 0.5 * sp[19] * sv4[4];
        sv4[6] = 0.5 * sp[20] * sv4[4];
        sv4[7] = 0.5 * sp[21] * sv4[4];
        sv4[8] = 0.5 * sp[37] * sv4[4];
        sv4[9] = 0.5 * sp[38] * sv4[4];
        sv4[10] = 0.5 * sp[39] * sv4[4];
        sv4[11] = 0.5 * sp[52] * sv4[4];
        sv4[12] = 0.5 * sp[53] * sv4[4];
        sv4[13] = 0.5 * sp[54] * sv4[4];
        sv4[14] = sv4[0] + sv4[5];
        sv4[15] = sv4[1] + sv4[6];
        sv4[16] = sv4[2] + sv4[7];
        sv4[17] = sv4[14] * sp[14];
        sv4[18] = sv4[15] * sp[14];
        sv4[19] = sv4[16] * sp[14];
        sv4[20] = sv4[8] * sp[14];
        sv4[21] = sv4[9] * sp[14];
        sv4[22] = sv4[10] * sp[14];
        sv4[23] = sv4[11] * sp[14];
        sv4[24] = sv4[12] * sp[14];
        sv4[25] = sv4[13] * sp[14];
        sv4[26] = sv4[14] * sp[17];
        sv4[27] = sv4[15] * sp[17];
        sv4[28] = sv4[16] * sp[17];
        sv4[29] = sv4[8] * sp[17];
        sv4[30] = sv4[9] * sp[17];
        sv4[31] = sv4[10] * sp[17];
        sv4[32] = sv4[11] * sp[17];
        sv4[33] = sv4[12] * sp[17];
        sv4[34] = sv4[13] * sp[17];
        sv4[35] = sv4[14] * sp[18];
        sv4[36] = sv4[15] * sp[18];
        sv4[37] = sv4[16] * sp[18];
        sv4[38] = sv4[8] * sp[18];
        sv4[39] = sv4[9] * sp[18];
        sv4[40] = sv4[10] * sp[18];
        sv4[41] = sv4[11] * sp[18];
        sv4[42] = sv4[12] * sp[18];
        sv4[43] = sv4[13] * sp[18];
        sv4[44] = 0.5 * (0.5 * sp[37]) * (2 * w2);
        sv4[45] = 0.5 * (0.5 * sp[38]) * (2 * w2);
        sv4[46] = 0.5 * (0.5 * sp[39]) * (2 * w2);
        sv4[47] = 0.5 * (0.5 * sp[19]) * (2 * w2);
        sv4[48] = 0.5 * (0.5 * sp[20]) * (2 * w2);
        sv4[49] = 0.5 * (0.5 * sp[21]) * (2 * w2);
        sv4[50] = sv4[44] * sp[14];
        sv4[51] = sv4[45] * sp[14];
        sv4[52] = sv4[46] * sp[14];
        sv4[53] = sv4[47] * sp[14];
        sv4[54] = sv4[48] * sp[14];
        sv4[55] = sv4[49] * sp[14];
        sv4[56] = sv4[44] * sp[17];
        sv4[57] = sv4[45] * sp[17];
        sv4[58] = sv4[46] * sp[17];
        sv4[59] = sv4[47] * sp[17];
        sv4[60] = sv4[48] * sp[17];
        sv4[61] = sv4[49] * sp[17];
        sv4[62] = sv4[44] * sp[18];
        sv4[63] = sv4[45] * sp[18];
        sv4[64] = sv4[46] * sp[18];
        sv4[65] = sv4[47] * sp[18];
        sv4[66] = sv4[48] * sp[18];
        sv4[67] = sv4[49] * sp[18];
        sv4[68] = 0.5 * (0.5 * sp[52]) * (2 * w2);
        sv4[69] = 0.5 * (0.5 * sp[53]) * (2 * w2);
        sv4[70] = 0.5 * (0.5 * sp[54]) * (2 * w2);
        sv4[71] = sv4[68] * sp[14];
        sv4[72] = sv4[69] * sp[14];
        sv4[73] = sv4[70] * sp[14];
        sv4[74] = sv4[68] * sp[17];
        sv4[75] = sv4[69] * sp[17];
        sv4[76] = sv4[70] * sp[17];
        sv4[77] = sv4[68] * sp[18];
        sv4[78] = sv4[69] * sp[18];
        sv4[79] = sv4[70] * sp[18];
        sv4[80] = 0.5 * sp[55] * (2 * w2);
        sv4[81] = 0.5 * sp[56] * (2 * w2);
        sv4[82] = 0.5 * sp[57] * (2 * w2);
        sv4[83] = sv4[80] + sv4[8];
        sv4[84] = sv4[81] + sv4[9];
        sv4[85] = sv4[82] + sv4[10];
        sv4[86] = sv4[5] * sp[28];
        sv4[87] = sv4[6] * sp[28];
        sv4[88] = sv4[7] * sp[28];
        sv4[89] = sv4[83] * sp[28];
        sv4[90] = sv4[84] * sp[28];
        sv4[91] = sv4[85] * sp[28];
        sv4[92] = sv4[11] * sp[28];
        sv4[93] = sv4[12] * sp[28];
        sv4[94] = sv4[13] * sp[28];
        sv4[95] = sv4[5] * sp[32];
        sv4[96] = sv4[6] * sp[32];
        sv4[97] = sv4[7] * sp[32];
        sv4[98] = sv4[83] * sp[32];
        sv4[99] = sv4[84] * sp[32];
        sv4[100] = sv4[85] * sp[32];
        sv4[101] = sv4[11] * sp[32];
        sv4[102] = sv4[12] * sp[32];
        sv4[103] = sv4[13] * sp[32];
        sv4[104] = sv4[5] * sp[36];
        sv4[105] = sv4[6] * sp[36];
        sv4[106] = sv4[7] * sp[36];
        sv4[107] = sv4[83] * sp[36];
        sv4[108] = sv4[84] * sp[36];
        sv4[109] = sv4[85] * sp[36];
        sv4[110] = sv4[11] * sp[36];
        sv4[111] = sv4[12] * sp[36];
        sv4[112] = sv4[13] * sp[36];
        sv4[113] = sv4[44] * sp[28];
        sv4[114] = sv4[45] * sp[28];
        sv4[115] = sv4[46] * sp[28];
        sv4[116] = sv4[47] * sp[28];
        sv4[117] = sv4[48] * sp[28];
        sv4[118] = sv4[49] * sp[28];
        sv4[119] = sv4[44] * sp[32];
        sv4[120] = sv4[45] * sp[32];
        sv4[121] = sv4[46] * sp[32];
        sv4[122] = sv4[47] * sp[32];
        sv4[123] = sv4[48] * sp[32];
        sv4[124] = sv4[49] * sp[32];
        sv4[125] = sv4[44] * sp[36];
        sv4[126] = sv4[45] * sp[36];
        sv4[127] = sv4[46] * sp[36];
        sv4[128] = sv4[47] * sp[36];
        sv4[129] = sv4[48] * sp[36];
        sv4[130] = sv4[49] * sp[36];
        sv4[131] = sv4[68] * sp[28];
        sv4[132] = sv4[69] * sp[28];
        sv4[133] = sv4[70] * sp[28];
        sv4[134] = sv4[68] * sp[32];
        sv4[135] = sv4[69] * sp[32];
        sv4[136] = sv4[70] * sp[32];
        sv4[137] = sv4[68] * sp[36];
        sv4[138] = sv4[69] * sp[36];
        sv4[139] = sv4[70] * sp[36];
        sv4[140] = sv4[113] + sv4[17];
        sv4[141] = sv4[114] + sv4[18];
        sv4[142] = sv4[115] + sv4[19];
        sv4[143] = sv4[116] + sv4[20];
        sv4[144] = sv4[117] + sv4[21];
        sv4[145] = sv4[118] + sv4[22];
        sv4[146] = sv4[119] + sv4[26];
        sv4[147] = sv4[120] + sv4[27];
        sv4[148] = sv4[121] + sv4[28];
        sv4[149] = sv4[122] + sv4[29];
        sv4[150] = sv4[123] + sv4[30];
        sv4[151] = sv4[124] + sv4[31];
        sv4[152] = sv4[35] + sv4[125];
        sv4[153] = sv4[36] + sv4[126];
        sv4[154] = sv4[37] + sv4[127];
        sv4[155] = sv4[38] + sv4[128];
        sv4[156] = sv4[39] + sv4[129];
        sv4[157] = sv4[40] + sv4[130];
        sv4[158] = sv4[86] + sv4[50];
        sv4[159] = sv4[95] + sv4[56];
        sv4[160] = sv4[62] + sv4[104];
        sv4[161] = sv4[87] + sv4[51];
        sv4[162] = sv4[96] + sv4[57];
        sv4[163] = sv4[63] + sv4[105];
        sv4[164] = sv4[88] + sv4[52];
        sv4[165] = sv4[97] + sv4[58];
        sv4[166] = sv4[64] + sv4[106];
        sv4[167] = sv4[89] + sv4[53];
        sv4[168] = sv4[98] + sv4[59];
        sv4[169] = sv4[65] + sv4[107];
        sv4[170] = sv4[90] + sv4[54];
        sv4[171] = sv4[99] + sv4[60];
        sv4[172] = sv4[66] + sv4[108];
        sv4[173] = sv4[91] + sv4[55];
        sv4[174] = sv4[100] + sv4[61];
        sv4[175] = sv4[67] + sv4[109];
        sv4[176] = sv4[113] + sv4[53];
        sv4[177] = sv4[119] + sv4[59];
        sv4[178] = sv4[65] + sv4[125];
        sv4[179] = sv4[114] + sv4[54];
        sv4[180] = sv4[120] + sv4[60];
        sv4[181] = sv4[66] + sv4[126];
        sv4[182] = sv4[115] + sv4[55];
        sv4[183] = sv4[121] + sv4[61];
        sv4[184] = sv4[67] + sv4[127];
        sv4[185] = sv4[68] * sp[43];
        sv4[186] = sv4[69] * sp[43];
        sv4[187] = sv4[70] * sp[43];
        sv4[188] = sv4[47] * sp[43];
        sv4[189] = sv4[48] * sp[43];
        sv4[190] = sv4[49] * sp[43];
        sv4[191] = sv4[68] * sp[47];
        sv4[192] = sv4[69] * sp[47];
        sv4[193] = sv4[70] * sp[47];
        sv4[194] = sv4[47] * sp[47];
        sv4[195] = sv4[48] * sp[47];
        sv4[196] = sv4[49] * sp[47];
        sv4[197] = sv4[68] * sp[51];
        sv4[198] = sv4[69] * sp[51];
        sv4[199] = sv4[70] * sp[51];
        sv4[200] = sv4[47] * sp[51];
        sv4[201] = sv4[48] * sp[51];
        sv4[202] = sv4[49] * sp[51];
        sv4[203] = sv4[44] * sp[43];
        sv4[204] = sv4[45] * sp[43];
        sv4[205] = sv4[46] * sp[43];
        sv4[206] = sv4[44] * sp[47];
        sv4[207] = sv4[45] * sp[47];
        sv4[208] = sv4[46] * sp[47];
        sv4[209] = sv4[44] * sp[51];
        sv4[210] = sv4[45] * sp[51];
        sv4[211] = sv4[46] * sp[51];
        sv4[212] = 0.5 * sp[58] * (2 * w2);
        sv4[213] = 0.5 * sp[59] * (2 * w2);
        sv4[214] = 0.5 * sp[60] * (2 * w2);
        sv4[215] = sv4[212] + sv4[11];
        sv4[216] = sv4[213] + sv4[12];
        sv4[217] = sv4[214] + sv4[13];
        sv4[218] = sv4[5] * sp[43];
        sv4[219] = sv4[6] * sp[43];
        sv4[220] = sv4[7] * sp[43];
        sv4[221] = sv4[8] * sp[43];
        sv4[222] = sv4[9] * sp[43];
        sv4[223] = sv4[10] * sp[43];
        sv4[224] = sv4[215] * sp[43];
        sv4[225] = sv4[216] * sp[43];
        sv4[226] = sv4[217] * sp[43];
        sv4[227] = sv4[5] * sp[47];
        sv4[228] = sv4[6] * sp[47];
        sv4[229] = sv4[7] * sp[47];
        sv4[230] = sv4[8] * sp[47];
        sv4[231] = sv4[9] * sp[47];
        sv4[232] = sv4[10] * sp[47];
        sv4[233] = sv4[215] * sp[47];
        sv4[234] = sv4[216] * sp[47];
        sv4[235] = sv4[217] * sp[47];
        sv4[236] = sv4[5] * sp[51];
        sv4[237] = sv4[6] * sp[51];
        sv4[238] = sv4[7] * sp[51];
        sv4[239] = sv4[8] * sp[51];
        sv4[240] = sv4[9] * sp[51];
        sv4[241] = sv4[10] * sp[51];
        sv4[242] = sv4[215] * sp[51];
        sv4[243] = sv4[216] * sp[51];
        sv4[244] = sv4[217] * sp[51];
        sv4[245] = sv4[140] + sv4[185];
        sv4[246] = sv4[141] + sv4[186];
        sv4[247] = sv4[142] + sv4[187];
        sv4[248] = sv4[188] + sv4[23];
        sv4[249] = sv4[189] + sv4[24];
        sv4[250] = sv4[190] + sv4[25];
        sv4[251] = sv4[146] + sv4[191];
        sv4[252] = sv4[147] + sv4[192];
        sv4[253] = sv4[148] + sv4[193];
        sv4[254] = sv4[194] + sv4[32];
        sv4[255] = sv4[195] + sv4[33];
        sv4[256] = sv4[196] + sv4[34];
        sv4[257] = sv4[152] + sv4[197];
        sv4[258] = sv4[153] + sv4[198];
        sv4[259] = sv4[154] + sv4[199];
        sv4[260] = sv4[200] + sv4[41];
        sv4[261] = sv4[201] + sv4[42];
        sv4[262] = sv4[202] + sv4[43];
        sv4[263] = sv4[218] + sv4[71];
        sv4[264] = sv4[227] + sv4[74];
        sv4[265] = sv4[236] + sv4[77];
        sv4[266] = sv4[219] + sv4[72];
        sv4[267] = sv4[228] + sv4[75];
        sv4[268] = sv4[237] + sv4[78];
        sv4[269] = sv4[220] + sv4[73];
        sv4[270] = sv4[229] + sv4[76];
        sv4[271] = sv4[238] + sv4[79];
        sv4[272] = sv4[167] + sv4[185];
        sv4[273] = sv4[168] + sv4[191];
        sv4[274] = sv4[169] + sv4[197];
        sv4[275] = sv4[131] + sv4[221];
        sv4[276] = sv4[134] + sv4[230];
        sv4[277] = sv4[239] + sv4[137];
        sv4[278] = sv4[170] + sv4[186];
        sv4[279] = sv4[171] + sv4[192];
        sv4[280] = sv4[172] + sv4[198];
        sv4[281] = sv4[132] + sv4[222];
        sv4[282] = sv4[135] + sv4[231];
        sv4[283] = sv4[240] + sv4[138];
        sv4[284] = sv4[173] + sv4[187];
        sv4[285] = sv4[174] + sv4[193];
        sv4[286] = sv4[175] + sv4[199];
        sv4[287] = sv4[133] + sv4[223];
        sv4[288] = sv4[136] + sv4[232];
        sv4[289] = sv4[241] + sv4[139];
        sv4[290] = sv4[92] + sv4[203];
        sv4[291] = sv4[101] + sv4[206];
        sv4[292] = sv4[209] + sv4[110];
        sv4[293] = sv4[176] + sv4[224];
        sv4[294] = sv4[177] + sv4[233];
        sv4[295] = sv4[178] + sv4[242];
        sv4[296] = sv4[93] + sv4[204];
        sv4[297] = sv4[102] + sv4[207];
        sv4[298] = sv4[210] + sv4[111];
        sv4[299] = sv4[179] + sv4[225];
        sv4[300] = sv4[180] + sv4[234];
        sv4[301] = sv4[181] + sv4[243];
        sv4[302] = sv4[94] + sv4[205];
        sv4[303] = sv4[103] + sv4[208];
        sv4[304] = sv4[211] + sv4[112];
        sv4[305] = sv4[182] + sv4[226];
        sv4[306] = sv4[183] + sv4[235];
        sv4[307] = sv4[184] + sv4[244];
        sv4[308] = sv4[245] * sp[62];
        sv4[309] = sv4[246] * sp[62];
        sv4[310] = sv4[247] * sp[62];
        sv4[311] = sv4[143] * sp[62];
        sv4[312] = sv4[144] * sp[62];
        sv4[313] = sv4[145] * sp[62];
        sv4[314] = sv4[248] * sp[62];
        sv4[315] = sv4[249] * sp[62];
        sv4[316] = sv4[250] * sp[62];
        sv4[317] = sv4[251] * sp[62];
        sv4[318] = sv4[252] * sp[62];
        sv4[319] = sv4[253] * sp[62];
        sv4[320] = sv4[149] * sp[62];
        sv4[321] = sv4[150] * sp[62];
        sv4[322] = sv4[151] * sp[62];
        sv4[323] = sv4[254] * sp[62];
        sv4[324] = sv4[255] * sp[62];
        sv4[325] = sv4[256] * sp[62];
        sv4[326] = sv4[257] * sp[62];
        sv4[327] = sv4[258] * sp[62];
        sv4[328] = sv4[259] * sp[62];
        sv4[329] = sv4[155] * sp[62];
        sv4[330] = sv4[156] * sp[62];
        sv4[331] = sv4[157] * sp[62];
        sv4[332] = sv4[260] * sp[62];
        sv4[333] = sv4[261] * sp[62];
        sv4[334] = sv4[262] * sp[62];
        sv4[335] = sv4[158] * sp[62];
        sv4[336] = sv4[159] * sp[62];
        sv4[337] = sv4[160] * sp[62];
        sv4[338] = sv4[263] * sp[62];
        sv4[339] = sv4[264] * sp[62];
        sv4[340] = sv4[265] * sp[62];
        sv4[341] = sv4[161] * sp[62];
        sv4[342] = sv4[162] * sp[62];
        sv4[343] = sv4[163] * sp[62];
        sv4[344] = sv4[266] * sp[62];
        sv4[345] = sv4[267] * sp[62];
        sv4[346] = sv4[268] * sp[62];
        sv4[347] = sv4[164] * sp[62];
        sv4[348] = sv4[165] * sp[62];
        sv4[349] = sv4[166] * sp[62];
        sv4[350] = sv4[269] * sp[62];
        sv4[351] = sv4[270] * sp[62];
        sv4[352] = sv4[271] * sp[62];
        sv4[353] = sv4[272] * sp[62];
        sv4[354] = sv4[273] * sp[62];
        sv4[355] = sv4[274] * sp[62];
        sv4[356] = sv4[275] * sp[62];
        sv4[357] = sv4[276] * sp[62];
        sv4[358] = sv4[277] * sp[62];
        sv4[359] = sv4[278] * sp[62];
        sv4[360] = sv4[279] * sp[62];
        sv4[361] = sv4[280] * sp[62];
        sv4[362] = sv4[281] * sp[62];
        sv4[363] = sv4[282] * sp[62];
        sv4[364] = sv4[283] * sp[62];
        sv4[365] = sv4[284] * sp[62];
        sv4[366] = sv4[285] * sp[62];
        sv4[367] = sv4[286] * sp[62];
        sv4[368] = sv4[287] * sp[62];
        sv4[369] = sv4[288] * sp[62];
        sv4[370] = sv4[289] * sp[62];
        sv4[371] = sv4[290] * sp[62];
        sv4[372] = sv4[291] * sp[62];
        sv4[373] = sv4[292] * sp[62];
        sv4[374] = sv4[293] * sp[62];
        sv4[375] = sv4[294] * sp[62];
        sv4[376] = sv4[295] * sp[62];
        sv4[377] = sv4[296] * sp[62];
        sv4[378] = sv4[297] * sp[62];
        sv4[379] = sv4[298] * sp[62];
        sv4[380] = sv4[299] * sp[62];
        sv4[381] = sv4[300] * sp[62];
        sv4[382] = sv4[301] * sp[62];
        sv4[383] = sv4[302] * sp[62];
        sv4[384] = sv4[303] * sp[62];
        sv4[385] = sv4[304] * sp[62];
        sv4[386] = sv4[305] * sp[62];
        sv4[387] = sv4[306] * sp[62];
        sv4[388] = sv4[307] * sp[62];
        const double fw0 = sv4[308] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP0[j] += fw0 * FE25_C0_D001_Q4[0][0][j];
        const double fw1 = sv4[309] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP1[j] += fw1 * FE25_C0_D001_Q4[0][0][j];
        const double fw2 = sv4[310] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP2[j] += fw2 * FE25_C0_D001_Q4[0][0][j];
        const double fw3 = sv4[311] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP3[j] += fw3 * FE25_C0_D001_Q4[0][0][j];
        const double fw4 = sv4[312] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP4[j] += fw4 * FE25_C0_D001_Q4[0][0][j];
        const double fw5 = sv4[313] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP5[j] += fw5 * FE25_C0_D001_Q4[0][0][j];
        const double fw6 = sv4[314] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP6[j] += fw6 * FE25_C0_D001_Q4[0][0][j];
        const double fw7 = sv4[315] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP7[j] += fw7 * FE25_C0_D001_Q4[0][0][j];
        const double fw8 = sv4[316] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP8[j] += fw8 * FE25_C0_D001_Q4[0][0][j];
        const double fw9 = sv4[317] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP9[j] += fw9 * FE25_C0_D001_Q4[0][0][j];
        const double fw10 = sv4[318] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP10[j] += fw10 * FE25_C0_D001_Q4[0][0][j];
        const double fw11 = sv4[319] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP11[j] += fw11 * FE25_C0_D001_Q4[0][0][j];
        const double fw12 = sv4[320] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP12[j] += fw12 * FE25_C0_D001_Q4[0][0][j];
        const double fw13 = sv4[321] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP13[j] += fw13 * FE25_C0_D001_Q4[0][0][j];
        const double fw14 = sv4[322] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP14[j] += fw14 * FE25_C0_D001_Q4[0][0][j];
        const double fw15 = sv4[323] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP15[j] += fw15 * FE25_C0_D001_Q4[0][0][j];
        const double fw16 = sv4[324] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP16[j] += fw16 * FE25_C0_D001_Q4[0][0][j];
        const double fw17 = sv4[325] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP17[j] += fw17 * FE25_C0_D001_Q4[0][0][j];
        const double fw18 = sv4[326] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP18[j] += fw18 * FE25_C0_D001_Q4[0][0][j];
        const double fw19 = sv4[327] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP19[j] += fw19 * FE25_C0_D001_Q4[0][0][j];
        const double fw20 = sv4[328] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP20[j] += fw20 * FE25_C0_D001_Q4[0][0][j];
        const double fw21 = sv4[329] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP21[j] += fw21 * FE25_C0_D001_Q4[0][0][j];
        const double fw22 = sv4[330] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP22[j] += fw22 * FE25_C0_D001_Q4[0][0][j];
        const double fw23 = sv4[331] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP23[j] += fw23 * FE25_C0_D001_Q4[0][0][j];
        const double fw24 = sv4[332] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP24[j] += fw24 * FE25_C0_D001_Q4[0][0][j];
        const double fw25 = sv4[333] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP25[j] += fw25 * FE25_C0_D001_Q4[0][0][j];
        const double fw26 = sv4[334] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP26[j] += fw26 * FE25_C0_D001_Q4[0][0][j];
        const double fw27 = sv4[335] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP27[j] += fw27 * FE25_C0_D001_Q4[0][0][j];
        const double fw28 = sv4[341] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP28[j] += fw28 * FE25_C0_D001_Q4[0][0][j];
        const double fw29 = sv4[347] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP29[j] += fw29 * FE25_C0_D001_Q4[0][0][j];
        const double fw30 = sv4[353] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP30[j] += fw30 * FE25_C0_D001_Q4[0][0][j];
        const double fw31 = sv4[359] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP31[j] += fw31 * FE25_C0_D001_Q4[0][0][j];
        const double fw32 = sv4[365] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP32[j] += fw32 * FE25_C0_D001_Q4[0][0][j];
        const double fw33 = sv4[371] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP33[j] += fw33 * FE25_C0_D001_Q4[0][0][j];
        const double fw34 = sv4[377] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP34[j] += fw34 * FE25_C0_D001_Q4[0][0][j];
        const double fw35 = sv4[383] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP35[j] += fw35 * FE25_C0_D001_Q4[0][0][j];
        const double fw36 = sv4[336] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP36[j] += fw36 * FE25_C0_D001_Q4[0][0][j];
        const double fw37 = sv4[342] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP37[j] += fw37 * FE25_C0_D001_Q4[0][0][j];
        const double fw38 = sv4[348] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP38[j] += fw38 * FE25_C0_D001_Q4[0][0][j];
        const double fw39 = sv4[354] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP39[j] += fw39 * FE25_C0_D001_Q4[0][0][j];
        const double fw40 = sv4[360] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP40[j] += fw40 * FE25_C0_D001_Q4[0][0][j];
        const double fw41 = sv4[366] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP41[j] += fw41 * FE25_C0_D001_Q4[0][0][j];
        const double fw42 = sv4[372] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP42[j] += fw42 * FE25_C0_D001_Q4[0][0][j];
        const double fw43 = sv4[378] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP43[j] += fw43 * FE25_C0_D001_Q4[0][0][j];
        const double fw44 = sv4[384] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP44[j] += fw44 * FE25_C0_D001_Q4[0][0][j];
        const double fw45 = sv4[337] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP45[j] += fw45 * FE25_C0_D001_Q4[0][0][j];
        const double fw46 = sv4[343] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP46[j] += fw46 * FE25_C0_D001_Q4[0][0][j];
        const double fw47 = sv4[349] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP47[j] += fw47 * FE25_C0_D001_Q4[0][0][j];
        const double fw48 = sv4[355] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP48[j] += fw48 * FE25_C0_D001_Q4[0][0][j];
        const double fw49 = sv4[361] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP49[j] += fw49 * FE25_C0_D001_Q4[0][0][j];
        const double fw50 = sv4[367] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP50[j] += fw50 * FE25_C0_D001_Q4[0][0][j];
        const double fw51 = sv4[373] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP51[j] += fw51 * FE25_C0_D001_Q4[0][0][j];
        const double fw52 = sv4[379] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP52[j] += fw52 * FE25_C0_D001_Q4[0][0][j];
        const double fw53 = sv4[385] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP53[j] += fw53 * FE25_C0_D001_Q4[0][0][j];
        const double fw54 = sv4[338] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP54[j] += fw54 * FE25_C0_D001_Q4[0][0][j];
        const double fw55 = sv4[344] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP55[j] += fw55 * FE25_C0_D001_Q4[0][0][j];
        const double fw56 = sv4[350] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP56[j] += fw56 * FE25_C0_D001_Q4[0][0][j];
        const double fw57 = sv4[356] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP57[j] += fw57 * FE25_C0_D001_Q4[0][0][j];
        const double fw58 = sv4[362] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP58[j] += fw58 * FE25_C0_D001_Q4[0][0][j];
        const double fw59 = sv4[368] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP59[j] += fw59 * FE25_C0_D001_Q4[0][0][j];
        const double fw60 = sv4[374] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP60[j] += fw60 * FE25_C0_D001_Q4[0][0][j];
        const double fw61 = sv4[380] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP61[j] += fw61 * FE25_C0_D001_Q4[0][0][j];
        const double fw62 = sv4[386] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP62[j] += fw62 * FE25_C0_D001_Q4[0][0][j];
        const double fw63 = sv4[339] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP63[j] += fw63 * FE25_C0_D001_Q4[0][0][j];
        const double fw64 = sv4[345] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP64[j] += fw64 * FE25_C0_D001_Q4[0][0][j];
        const double fw65 = sv4[351] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP65[j] += fw65 * FE25_C0_D001_Q4[0][0][j];
        const double fw66 = sv4[357] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP66[j] += fw66 * FE25_C0_D001_Q4[0][0][j];
        const double fw67 = sv4[363] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP67[j] += fw67 * FE25_C0_D001_Q4[0][0][j];
        const double fw68 = sv4[369] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP68[j] += fw68 * FE25_C0_D001_Q4[0][0][j];
        const double fw69 = sv4[375] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP69[j] += fw69 * FE25_C0_D001_Q4[0][0][j];
        const double fw70 = sv4[381] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP70[j] += fw70 * FE25_C0_D001_Q4[0][0][j];
        const double fw71 = sv4[387] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP71[j] += fw71 * FE25_C0_D001_Q4[0][0][j];
        const double fw72 = sv4[340] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP72[j] += fw72 * FE25_C0_D001_Q4[0][0][j];
        const double fw73 = sv4[346] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP73[j] += fw73 * FE25_C0_D001_Q4[0][0][j];
        const double fw74 = sv4[352] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP74[j] += fw74 * FE25_C0_D001_Q4[0][0][j];
        const double fw75 = sv4[358] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP75[j] += fw75 * FE25_C0_D001_Q4[0][0][j];
        const double fw76 = sv4[364] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP76[j] += fw76 * FE25_C0_D001_Q4[0][0][j];
        const double fw77 = sv4[370] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP77[j] += fw77 * FE25_C0_D001_Q4[0][0][j];
        const double fw78 = sv4[376] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP78[j] += fw78 * FE25_C0_D001_Q4[0][0][j];
        const double fw79 = sv4[382] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP79[j] += fw79 * FE25_C0_D001_Q4[0][0][j];
        const double fw80 = sv4[388] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP80[j] += fw80 * FE25_C0_D001_Q4[0][0][j];
    }
    A[0] = 0.01666666666666656 * sp[63];
    A[1] = 0.008333333333333293 * sp[63];
    A[2] = 0.008333333333333297 * sp[63];
    A[3] = 0.008333333333333297 * sp[63];
    std::fill(&A[4], &A[16], 0.0);
    A[16] = 0.008333333333333293 * sp[63];
    A[17] = 0.0166666666666667 * sp[63];
    A[18] = 0.008333333333333371 * sp[63];
    A[19] = 0.008333333333333371 * sp[63];
    std::fill(&A[20], &A[32], 0.0);
    A[32] = 0.008333333333333297 * sp[63];
    A[33] = 0.008333333333333371 * sp[63];
    A[34] = 0.01666666666666671 * sp[63];
    A[35] = 0.008333333333333373 * sp[63];
    std::fill(&A[36], &A[48], 0.0);
    A[48] = 0.008333333333333297 * sp[63];
    A[49] = 0.008333333333333371 * sp[63];
    A[50] = 0.008333333333333373 * sp[63];
    A[51] = 0.01666666666666671 * sp[63];
    std::fill(&A[52], &A[68], 0.0);
    A[68] = 0.01666666666666656 * sp[63];
    A[69] = 0.008333333333333293 * sp[63];
    A[70] = 0.008333333333333297 * sp[63];
    A[71] = 0.008333333333333297 * sp[63];
    std::fill(&A[72], &A[84], 0.0);
    A[84] = 0.008333333333333293 * sp[63];
    A[85] = 0.0166666666666667 * sp[63];
    A[86] = 0.008333333333333371 * sp[63];
    A[87] = 0.008333333333333371 * sp[63];
    std::fill(&A[88], &A[100], 0.0);
    A[100] = 0.008333333333333297 * sp[63];
    A[101] = 0.008333333333333371 * sp[63];
    A[102] = 0.01666666666666671 * sp[63];
    A[103] = 0.008333333333333373 * sp[63];
    std::fill(&A[104], &A[116], 0.0);
    A[116] = 0.008333333333333297 * sp[63];
    A[117] = 0.008333333333333371 * sp[63];
    A[118] = 0.008333333333333373 * sp[63];
    A[119] = 0.01666666666666671 * sp[63];
    std::fill(&A[120], &A[136], 0.0);
    A[136] = 0.01666666666666656 * sp[63];
    A[137] = 0.008333333333333293 * sp[63];
    A[138] = 0.008333333333333297 * sp[63];
    A[139] = 0.008333333333333297 * sp[63];
    std::fill(&A[140], &A[152], 0.0);
    A[152] = 0.008333333333333293 * sp[63];
    A[153] = 0.0166666666666667 * sp[63];
    A[154] = 0.008333333333333371 * sp[63];
    A[155] = 0.008333333333333371 * sp[63];
    std::fill(&A[156], &A[168], 0.0);
    A[168] = 0.008333333333333297 * sp[63];
    A[169] = 0.008333333333333371 * sp[63];
    A[170] = 0.01666666666666671 * sp[63];
    A[171] = 0.008333333333333373 * sp[63];
    std::fill(&A[172], &A[184], 0.0);
    A[184] = 0.008333333333333297 * sp[63];
    A[185] = 0.008333333333333371 * sp[63];
    A[186] = 0.008333333333333373 * sp[63];
    A[187] = 0.01666666666666671 * sp[63];
    std::fill(&A[188], &A[204], 0.0);
    A[204] = 0.01666666666666656 * (1e-12 * sp[62]);
    A[205] = 0.008333333333333293 * (1e-12 * sp[62]);
    A[206] = 0.008333333333333297 * (1e-12 * sp[62]);
    A[207] = 0.008333333333333297 * (1e-12 * sp[62]);
    std::fill(&A[208], &A[220], 0.0);
    A[220] = 0.008333333333333293 * (1e-12 * sp[62]);
    A[221] = 0.0166666666666667 * (1e-12 * sp[62]);
    A[222] = 0.008333333333333371 * (1e-12 * sp[62]);
    A[223] = 0.008333333333333371 * (1e-12 * sp[62]);
    std::fill(&A[224], &A[236], 0.0);
    A[236] = 0.008333333333333297 * (1e-12 * sp[62]);
    A[237] = 0.008333333333333371 * (1e-12 * sp[62]);
    A[238] = 0.01666666666666671 * (1e-12 * sp[62]);
    A[239] = 0.008333333333333373 * (1e-12 * sp[62]);
    std::fill(&A[240], &A[252], 0.0);
    A[252] = 0.008333333333333297 * (1e-12 * sp[62]);
    A[253] = 0.008333333333333371 * (1e-12 * sp[62]);
    A[254] = 0.008333333333333373 * (1e-12 * sp[62]);
    A[255] = 0.01666666666666671 * (1e-12 * sp[62]);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 4, 6 };
    static const int DM3[2] = { 4, 7 };
    static const int DM4[2] = { 8, 10 };
    static const int DM5[2] = { 8, 11 };
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + j] += FE25_C0_D001_Q4[0][0][i] * TP0[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM0[j]] += FE25_C0_D001_Q4[0][0][i] * TP1[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM1[j]] += FE25_C0_D001_Q4[0][0][i] * TP2[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + (j + 4)] += FE25_C0_D001_Q4[0][0][i] * TP3[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM2[j]] += FE25_C0_D001_Q4[0][0][i] * TP4[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM3[j]] += FE25_C0_D001_Q4[0][0][i] * TP5[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + (j + 8)] += FE25_C0_D001_Q4[0][0][i] * TP6[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM4[j]] += FE25_C0_D001_Q4[0][0][i] * TP7[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM5[j]] += FE25_C0_D001_Q4[0][0][i] * TP8[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + j] += FE25_C0_D001_Q4[0][0][i] * TP9[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM0[j]] += FE25_C0_D001_Q4[0][0][i] * TP10[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM1[j]] += FE25_C0_D001_Q4[0][0][i] * TP11[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + (j + 4)] += FE25_C0_D001_Q4[0][0][i] * TP12[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM2[j]] += FE25_C0_D001_Q4[0][0][i] * TP13[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM3[j]] += FE25_C0_D001_Q4[0][0][i] * TP14[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + (j + 8)] += FE25_C0_D001_Q4[0][0][i] * TP15[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM4[j]] += FE25_C0_D001_Q4[0][0][i] * TP16[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM5[j]] += FE25_C0_D001_Q4[0][0][i] * TP17[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + j] += FE25_C0_D001_Q4[0][0][i] * TP18[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM0[j]] += FE25_C0_D001_Q4[0][0][i] * TP19[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM1[j]] += FE25_C0_D001_Q4[0][0][i] * TP20[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + (j + 4)] += FE25_C0_D001_Q4[0][0][i] * TP21[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM2[j]] += FE25_C0_D001_Q4[0][0][i] * TP22[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM3[j]] += FE25_C0_D001_Q4[0][0][i] * TP23[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + (j + 8)] += FE25_C0_D001_Q4[0][0][i] * TP24[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM4[j]] += FE25_C0_D001_Q4[0][0][i] * TP25[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM5[j]] += FE25_C0_D001_Q4[0][0][i] * TP26[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + j] += FE25_C0_D001_Q4[0][0][i] * TP27[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM0[j]] += FE25_C0_D001_Q4[0][0][i] * TP28[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM1[j]] += FE25_C0_D001_Q4[0][0][i] * TP29[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + (j + 4)] += FE25_C0_D001_Q4[0][0][i] * TP30[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM2[j]] += FE25_C0_D001_Q4[0][0][i] * TP31[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM3[j]] += FE25_C0_D001_Q4[0][0][i] * TP32[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + (j + 8)] += FE25_C0_D001_Q4[0][0][i] * TP33[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM4[j]] += FE25_C0_D001_Q4[0][0][i] * TP34[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM5[j]] += FE25_C0_D001_Q4[0][0][i] * TP35[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + j] += FE25_C0_D001_Q4[0][0][i] * TP36[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM0[j]] += FE25_C0_D001_Q4[0][0][i] * TP37[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM1[j]] += FE25_C0_D001_Q4[0][0][i] * TP38[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + (j + 4)] += FE25_C0_D001_Q4[0][0][i] * TP39[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM2[j]] += FE25_C0_D001_Q4[0][0][i] * TP40[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM3[j]] += FE25_C0_D001_Q4[0][0][i] * TP41[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + (j + 8)] += FE25_C0_D001_Q4[0][0][i] * TP42[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM4[j]] += FE25_C0_D001_Q4[0][0][i] * TP43[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM5[j]] += FE25_C0_D001_Q4[0][0][i] * TP44[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + j] += FE25_C0_D001_Q4[0][0][i] * TP45[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM0[j]] += FE25_C0_D001_Q4[0][0][i] * TP46[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM1[j]] += FE25_C0_D001_Q4[0][0][i] * TP47[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + (j + 4)] += FE25_C0_D001_Q4[0][0][i] * TP48[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM2[j]] += FE25_C0_D001_Q4[0][0][i] * TP49[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM3[j]] += FE25_C0_D001_Q4[0][0][i] * TP50[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + (j + 8)] += FE25_C0_D001_Q4[0][0][i] * TP51[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM4[j]] += FE25_C0_D001_Q4[0][0][i] * TP52[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM5[j]] += FE25_C0_D001_Q4[0][0][i] * TP53[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + j] += FE25_C0_D001_Q4[0][0][i] * TP54[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM0[j]] += FE25_C0_D001_Q4[0][0][i] * TP55[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM1[j]] += FE25_C0_D001_Q4[0][0][i] * TP56[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + (j + 4)] += FE25_C0_D001_Q4[0][0][i] * TP57[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM2[j]] += FE25_C0_D001_Q4[0][0][i] * TP58[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM3[j]] += FE25_C0_D001_Q4[0][0][i] * TP59[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + (j + 8)] += FE25_C0_D001_Q4[0][0][i] * TP60[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM4[j]] += FE25_C0_D001_Q4[0][0][i] * TP61[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM5[j]] += FE25_C0_D001_Q4[0][0][i] * TP62[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + j] += FE25_C0_D001_Q4[0][0][i] * TP63[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM0[j]] += FE25_C0_D001_Q4[0][0][i] * TP64[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM1[j]] += FE25_C0_D001_Q4[0][0][i] * TP65[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + (j + 4)] += FE25_C0_D001_Q4[0][0][i] * TP66[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM2[j]] += FE25_C0_D001_Q4[0][0][i] * TP67[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM3[j]] += FE25_C0_D001_Q4[0][0][i] * TP68[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + (j + 8)] += FE25_C0_D001_Q4[0][0][i] * TP69[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM4[j]] += FE25_C0_D001_Q4[0][0][i] * TP70[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM5[j]] += FE25_C0_D001_Q4[0][0][i] * TP71[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + j] += FE25_C0_D001_Q4[0][0][i] * TP72[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM0[j]] += FE25_C0_D001_Q4[0][0][i] * TP73[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM1[j]] += FE25_C0_D001_Q4[0][0][i] * TP74[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + (j + 4)] += FE25_C0_D001_Q4[0][0][i] * TP75[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM2[j]] += FE25_C0_D001_Q4[0][0][i] * TP76[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM3[j]] += FE25_C0_D001_Q4[0][0][i] * TP77[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + (j + 8)] += FE25_C0_D001_Q4[0][0][i] * TP78[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM4[j]] += FE25_C0_D001_Q4[0][0][i] * TP79[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM5[j]] += FE25_C0_D001_Q4[0][0][i] * TP80[j];
  }

};


class linearelastic3dp1p1_cell_integral_1_2: public ufc::cell_integral
{
public:

  linearelastic3dp1p1_cell_integral_1_2() : ufc::cell_integral()
  {

  }

  ~linearelastic3dp1p1_cell_integral_1_2() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 2
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 2
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           2
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.04166666666666666, 0.04166666666666666, 0.04166666666666666, 0.04166666666666666 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE25_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE25_C0_Q4[1][4][4] =
        { { { 0.1381966011250091, 0.585410196624969, 0.138196601125011, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.585410196624969, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.138196601125011, 0.585410196624969 },
            { 0.5854101966249672, 0.1381966011250109, 0.138196601125011, 0.138196601125011 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE25_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE25_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE25_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE25_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE25_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE25_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE25_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE25_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE25_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE25_C0_D001_Q4[0][0][1];
    alignas(32) double sp[64];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = sp[14] * w[0][0];
    sp[20] = sp[17] * w[0][0];
    sp[21] = sp[18] * w[0][0];
    sp[22] = 0.5 * sp[19] + 0.5 * sp[19];
    sp[23] = 0.5 * sp[20] + 0.5 * sp[20];
    sp[24] = 0.5 * sp[21] + 0.5 * sp[21];
    sp[25] = J_c2 * J_c7;
    sp[26] = J_c8 * (-1 * J_c1);
    sp[27] = sp[25] + sp[26];
    sp[28] = sp[27] / sp[13];
    sp[29] = J_c0 * J_c8;
    sp[30] = J_c6 * (-1 * J_c2);
    sp[31] = sp[29] + sp[30];
    sp[32] = sp[31] / sp[13];
    sp[33] = J_c1 * J_c6;
    sp[34] = J_c0 * J_c7;
    sp[35] = sp[33] + -1 * sp[34];
    sp[36] = sp[35] / sp[13];
    sp[37] = sp[28] * w[0][0];
    sp[38] = sp[32] * w[0][0];
    sp[39] = sp[36] * w[0][0];
    sp[40] = J_c1 * J_c5;
    sp[41] = J_c2 * J_c4;
    sp[42] = sp[40] + -1 * sp[41];
    sp[43] = sp[42] / sp[13];
    sp[44] = J_c2 * J_c3;
    sp[45] = J_c0 * J_c5;
    sp[46] = sp[44] + -1 * sp[45];
    sp[47] = sp[46] / sp[13];
    sp[48] = J_c0 * J_c4;
    sp[49] = J_c1 * J_c3;
    sp[50] = sp[48] + -1 * sp[49];
    sp[51] = sp[50] / sp[13];
    sp[52] = sp[43] * w[0][0];
    sp[53] = sp[47] * w[0][0];
    sp[54] = sp[51] * w[0][0];
    sp[55] = 0.5 * sp[37] + 0.5 * sp[37];
    sp[56] = 0.5 * sp[38] + 0.5 * sp[38];
    sp[57] = 0.5 * sp[39] + 0.5 * sp[39];
    sp[58] = 0.5 * sp[52] + 0.5 * sp[52];
    sp[59] = 0.5 * sp[53] + 0.5 * sp[53];
    sp[60] = 0.5 * sp[54] + 0.5 * sp[54];
    sp[61] = 1.0 / w[0][0] * w[1][0];
    sp[62] = std::abs(sp[13]);
    sp[63] = sp[61] * sp[62];
    alignas(32) double TP0[2] = {};
    alignas(32) double TP1[2] = {};
    alignas(32) double TP2[2] = {};
    alignas(32) double TP3[2] = {};
    alignas(32) double TP4[2] = {};
    alignas(32) double TP5[2] = {};
    alignas(32) double TP6[2] = {};
    alignas(32) double TP7[2] = {};
    alignas(32) double TP8[2] = {};
    alignas(32) double TP9[2] = {};
    alignas(32) double TP10[2] = {};
    alignas(32) double TP11[2] = {};
    alignas(32) double TP12[2] = {};
    alignas(32) double TP13[2] = {};
    alignas(32) double TP14[2] = {};
    alignas(32) double TP15[2] = {};
    alignas(32) double TP16[2] = {};
    alignas(32) double TP17[2] = {};
    alignas(32) double TP18[2] = {};
    alignas(32) double TP19[2] = {};
    alignas(32) double TP20[2] = {};
    alignas(32) double TP21[2] = {};
    alignas(32) double TP22[2] = {};
    alignas(32) double TP23[2] = {};
    alignas(32) double TP24[2] = {};
    alignas(32) double TP25[2] = {};
    alignas(32) double TP26[2] = {};
    alignas(32) double TP27[2] = {};
    alignas(32) double TP28[2] = {};
    alignas(32) double TP29[2] = {};
    alignas(32) double TP30[2] = {};
    alignas(32) double TP31[2] = {};
    alignas(32) double TP32[2] = {};
    alignas(32) double TP33[2] = {};
    alignas(32) double TP34[2] = {};
    alignas(32) double TP35[2] = {};
    alignas(32) double TP36[2] = {};
    alignas(32) double TP37[2] = {};
    alignas(32) double TP38[2] = {};
    alignas(32) double TP39[2] = {};
    alignas(32) double TP40[2] = {};
    alignas(32) double TP41[2] = {};
    alignas(32) double TP42[2] = {};
    alignas(32) double TP43[2] = {};
    alignas(32) double TP44[2] = {};
    alignas(32) double TP45[2] = {};
    alignas(32) double TP46[2] = {};
    alignas(32) double TP47[2] = {};
    alignas(32) double TP48[2] = {};
    alignas(32) double TP49[2] = {};
    alignas(32) double TP50[2] = {};
    alignas(32) double TP51[2] = {};
    alignas(32) double TP52[2] = {};
    alignas(32) double TP53[2] = {};
    alignas(32) double TP54[2] = {};
    alignas(32) double TP55[2] = {};
    alignas(32) double TP56[2] = {};
    alignas(32) double TP57[2] = {};
    alignas(32) double TP58[2] = {};
    alignas(32) double TP59[2] = {};
    alignas(32) double TP60[2] = {};
    alignas(32) double TP61[2] = {};
    alignas(32) double TP62[2] = {};
    alignas(32) double TP63[2] = {};
    alignas(32) double TP64[2] = {};
    alignas(32) double TP65[2] = {};
    alignas(32) double TP66[2] = {};
    alignas(32) double TP67[2] = {};
    alignas(32) double TP68[2] = {};
    alignas(32) double TP69[2] = {};
    alignas(32) double TP70[2] = {};
    alignas(32) double TP71[2] = {};
    alignas(32) double TP72[2] = {};
    alignas(32) double TP73[2] = {};
    alignas(32) double TP74[2] = {};
    alignas(32) double TP75[2] = {};
    alignas(32) double TP76[2] = {};
    alignas(32) double TP77[2] = {};
    alignas(32) double TP78[2] = {};
    alignas(32) double TP79[2] = {};
    alignas(32) double TP80[2] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2 += w[2][ic] * FE25_C0_Q4[0][iq][ic];
        alignas(32) double sv4[389];
        sv4[0] = 0.5 * sp[22] * (2 * w2);
        sv4[1] = 0.5 * sp[23] * (2 * w2);
        sv4[2] = 0.5 * sp[24] * (2 * w2);
        sv4[3] = 2 * w2 * w[3][0];
        sv4[4] = sv4[3] / (1 + -1 * (2 * w[3][0]));
        sv4[5] = 0.5 * sp[19] * sv4[4];
        sv4[6] = 0.5 * sp[20] * sv4[4];
        sv4[7] = 0.5 * sp[21] * sv4[4];
        sv4[8] = 0.5 * sp[37] * sv4[4];
        sv4[9] = 0.5 * sp[38] * sv4[4];
        sv4[10] = 0.5 * sp[39] * sv4[4];
        sv4[11] = 0.5 * sp[52] * sv4[4];
        sv4[12] = 0.5 * sp[53] * sv4[4];
        sv4[13] = 0.5 * sp[54] * sv4[4];
        sv4[14] = sv4[0] + sv4[5];
        sv4[15] = sv4[1] + sv4[6];
        sv4[16] = sv4[2] + sv4[7];
        sv4[17] = sv4[14] * sp[14];
        sv4[18] = sv4[15] * sp[14];
        sv4[19] = sv4[16] * sp[14];
        sv4[20] = sv4[8] * sp[14];
        sv4[21] = sv4[9] * sp[14];
        sv4[22] = sv4[10] * sp[14];
        sv4[23] = sv4[11] * sp[14];
        sv4[24] = sv4[12] * sp[14];
        sv4[25] = sv4[13] * sp[14];
        sv4[26] = sv4[14] * sp[17];
        sv4[27] = sv4[15] * sp[17];
        sv4[28] = sv4[16] * sp[17];
        sv4[29] = sv4[8] * sp[17];
        sv4[30] = sv4[9] * sp[17];
        sv4[31] = sv4[10] * sp[17];
        sv4[32] = sv4[11] * sp[17];
        sv4[33] = sv4[12] * sp[17];
        sv4[34] = sv4[13] * sp[17];
        sv4[35] = sv4[14] * sp[18];
        sv4[36] = sv4[15] * sp[18];
        sv4[37] = sv4[16] * sp[18];
        sv4[38] = sv4[8] * sp[18];
        sv4[39] = sv4[9] * sp[18];
        sv4[40] = sv4[10] * sp[18];
        sv4[41] = sv4[11] * sp[18];
        sv4[42] = sv4[12] * sp[18];
        sv4[43] = sv4[13] * sp[18];
        sv4[44] = 0.5 * (0.5 * sp[37]) * (2 * w2);
        sv4[45] = 0.5 * (0.5 * sp[38]) * (2 * w2);
        sv4[46] = 0.5 * (0.5 * sp[39]) * (2 * w2);
        sv4[47] = 0.5 * (0.5 * sp[19]) * (2 * w2);
        sv4[48] = 0.5 * (0.5 * sp[20]) * (2 * w2);
        sv4[49] = 0.5 * (0.5 * sp[21]) * (2 * w2);
        sv4[50] = sv4[44] * sp[14];
        sv4[51] = sv4[45] * sp[14];
        sv4[52] = sv4[46] * sp[14];
        sv4[53] = sv4[47] * sp[14];
        sv4[54] = sv4[48] * sp[14];
        sv4[55] = sv4[49] * sp[14];
        sv4[56] = sv4[44] * sp[17];
        sv4[57] = sv4[45] * sp[17];
        sv4[58] = sv4[46] * sp[17];
        sv4[59] = sv4[47] * sp[17];
        sv4[60] = sv4[48] * sp[17];
        sv4[61] = sv4[49] * sp[17];
        sv4[62] = sv4[44] * sp[18];
        sv4[63] = sv4[45] * sp[18];
        sv4[64] = sv4[46] * sp[18];
        sv4[65] = sv4[47] * sp[18];
        sv4[66] = sv4[48] * sp[18];
        sv4[67] = sv4[49] * sp[18];
        sv4[68] = 0.5 * (0.5 * sp[52]) * (2 * w2);
        sv4[69] = 0.5 * (0.5 * sp[53]) * (2 * w2);
        sv4[70] = 0.5 * (0.5 * sp[54]) * (2 * w2);
        sv4[71] = sv4[68] * sp[14];
        sv4[72] = sv4[69] * sp[14];
        sv4[73] = sv4[70] * sp[14];
        sv4[74] = sv4[68] * sp[17];
        sv4[75] = sv4[69] * sp[17];
        sv4[76] = sv4[70] * sp[17];
        sv4[77] = sv4[68] * sp[18];
        sv4[78] = sv4[69] * sp[18];
        sv4[79] = sv4[70] * sp[18];
        sv4[80] = 0.5 * sp[55] * (2 * w2);
        sv4[81] = 0.5 * sp[56] * (2 * w2);
        sv4[82] = 0.5 * sp[57] * (2 * w2);
        sv4[83] = sv4[80] + sv4[8];
        sv4[84] = sv4[81] + sv4[9];
        sv4[85] = sv4[82] + sv4[10];
        sv4[86] = sv4[5] * sp[28];
        sv4[87] = sv4[6] * sp[28];
        sv4[88] = sv4[7] * sp[28];
        sv4[89] = sv4[83] * sp[28];
        sv4[90] = sv4[84] * sp[28];
        sv4[91] = sv4[85] * sp[28];
        sv4[92] = sv4[11] * sp[28];
        sv4[93] = sv4[12] * sp[28];
        sv4[94] = sv4[13] * sp[28];
        sv4[95] = sv4[5] * sp[32];
        sv4[96] = sv4[6] * sp[32];
        sv4[97] = sv4[7] * sp[32];
        sv4[98] = sv4[83] * sp[32];
        sv4[99] = sv4[84] * sp[32];
        sv4[100] = sv4[85] * sp[32];
        sv4[101] = sv4[11] * sp[32];
        sv4[102] = sv4[12] * sp[32];
        sv4[103] = sv4[13] * sp[32];
        sv4[104] = sv4[5] * sp[36];
        sv4[105] = sv4[6] * sp[36];
        sv4[106] = sv4[7] * sp[36];
        sv4[107] = sv4[83] * sp[36];
        sv4[108] = sv4[84] * sp[36];
        sv4[109] = sv4[85] * sp[36];
        sv4[110] = sv4[11] * sp[36];
        sv4[111] = sv4[12] * sp[36];
        sv4[112] = sv4[13] * sp[36];
        sv4[113] = sv4[44] * sp[28];
        sv4[114] = sv4[45] * sp[28];
        sv4[115] = sv4[46] * sp[28];
        sv4[116] = sv4[47] * sp[28];
        sv4[117] = sv4[48] * sp[28];
        sv4[118] = sv4[49] * sp[28];
        sv4[119] = sv4[44] * sp[32];
        sv4[120] = sv4[45] * sp[32];
        sv4[121] = sv4[46] * sp[32];
        sv4[122] = sv4[47] * sp[32];
        sv4[123] = sv4[48] * sp[32];
        sv4[124] = sv4[49] * sp[32];
        sv4[125] = sv4[44] * sp[36];
        sv4[126] = sv4[45] * sp[36];
        sv4[127] = sv4[46] * sp[36];
        sv4[128] = sv4[47] * sp[36];
        sv4[129] = sv4[48] * sp[36];
        sv4[130] = sv4[49] * sp[36];
        sv4[131] = sv4[68] * sp[28];
        sv4[132] = sv4[69] * sp[28];
        sv4[133] = sv4[70] * sp[28];
        sv4[134] = sv4[68] * sp[32];
        sv4[135] = sv4[69] * sp[32];
        sv4[136] = sv4[70] * sp[32];
        sv4[137] = sv4[68] * sp[36];
        sv4[138] = sv4[69] * sp[36];
        sv4[139] = sv4[70] * sp[36];
        sv4[140] = sv4[113] + sv4[17];
        sv4[141] = sv4[114] + sv4[18];
        sv4[142] = sv4[115] + sv4[19];
        sv4[143] = sv4[116] + sv4[20];
        sv4[144] = sv4[117] + sv4[21];
        sv4[145] = sv4[118] + sv4[22];
        sv4[146] = sv4[119] + sv4[26];
        sv4[147] = sv4[120] + sv4[27];
        sv4[148] = sv4[121] + sv4[28];
        sv4[149] = sv4[122] + sv4[29];
        sv4[150] = sv4[123] + sv4[30];
        sv4[151] = sv4[124] + sv4[31];
        sv4[152] = sv4[35] + sv4[125];
        sv4[153] = sv4[36] + sv4[126];
        sv4[154] = sv4[37] + sv4[127];
        sv4[155] = sv4[38] + sv4[128];
        sv4[156] = sv4[39] + sv4[129];
        sv4[157] = sv4[40] + sv4[130];
        sv4[158] = sv4[86] + sv4[50];
        sv4[159] = sv4[95] + sv4[56];
        sv4[160] = sv4[62] + sv4[104];
        sv4[161] = sv4[87] + sv4[51];
        sv4[162] = sv4[96] + sv4[57];
        sv4[163] = sv4[63] + sv4[105];
        sv4[164] = sv4[88] + sv4[52];
        sv4[165] = sv4[97] + sv4[58];
        sv4[166] = sv4[64] + sv4[106];
        sv4[167] = sv4[89] + sv4[53];
        sv4[168] = sv4[98] + sv4[59];
        sv4[169] = sv4[65] + sv4[107];
        sv4[170] = sv4[90] + sv4[54];
        sv4[171] = sv4[99] + sv4[60];
        sv4[172] = sv4[66] + sv4[108];
        sv4[173] = sv4[91] + sv4[55];
        sv4[174] = sv4[100] + sv4[61];
        sv4[175] = sv4[67] + sv4[109];
        sv4[176] = sv4[113] + sv4[53];
        sv4[177] = sv4[119] + sv4[59];
        sv4[178] = sv4[65] + sv4[125];
        sv4[179] = sv4[114] + sv4[54];
        sv4[180] = sv4[120] + sv4[60];
        sv4[181] = sv4[66] + sv4[126];
        sv4[182] = sv4[115] + sv4[55];
        sv4[183] = sv4[121] + sv4[61];
        sv4[184] = sv4[67] + sv4[127];
        sv4[185] = sv4[68] * sp[43];
        sv4[186] = sv4[69] * sp[43];
        sv4[187] = sv4[70] * sp[43];
        sv4[188] = sv4[47] * sp[43];
        sv4[189] = sv4[48] * sp[43];
        sv4[190] = sv4[49] * sp[43];
        sv4[191] = sv4[68] * sp[47];
        sv4[192] = sv4[69] * sp[47];
        sv4[193] = sv4[70] * sp[47];
        sv4[194] = sv4[47] * sp[47];
        sv4[195] = sv4[48] * sp[47];
        sv4[196] = sv4[49] * sp[47];
        sv4[197] = sv4[68] * sp[51];
        sv4[198] = sv4[69] * sp[51];
        sv4[199] = sv4[70] * sp[51];
        sv4[200] = sv4[47] * sp[51];
        sv4[201] = sv4[48] * sp[51];
        sv4[202] = sv4[49] * sp[51];
        sv4[203] = sv4[44] * sp[43];
        sv4[204] = sv4[45] * sp[43];
        sv4[205] = sv4[46] * sp[43];
        sv4[206] = sv4[44] * sp[47];
        sv4[207] = sv4[45] * sp[47];
        sv4[208] = sv4[46] * sp[47];
        sv4[209] = sv4[44] * sp[51];
        sv4[210] = sv4[45] * sp[51];
        sv4[211] = sv4[46] * sp[51];
        sv4[212] = 0.5 * sp[58] * (2 * w2);
        sv4[213] = 0.5 * sp[59] * (2 * w2);
        sv4[214] = 0.5 * sp[60] * (2 * w2);
        sv4[215] = sv4[212] + sv4[11];
        sv4[216] = sv4[213] + sv4[12];
        sv4[217] = sv4[214] + sv4[13];
        sv4[218] = sv4[5] * sp[43];
        sv4[219] = sv4[6] * sp[43];
        sv4[220] = sv4[7] * sp[43];
        sv4[221] = sv4[8] * sp[43];
        sv4[222] = sv4[9] * sp[43];
        sv4[223] = sv4[10] * sp[43];
        sv4[224] = sv4[215] * sp[43];
        sv4[225] = sv4[216] * sp[43];
        sv4[226] = sv4[217] * sp[43];
        sv4[227] = sv4[5] * sp[47];
        sv4[228] = sv4[6] * sp[47];
        sv4[229] = sv4[7] * sp[47];
        sv4[230] = sv4[8] * sp[47];
        sv4[231] = sv4[9] * sp[47];
        sv4[232] = sv4[10] * sp[47];
        sv4[233] = sv4[215] * sp[47];
        sv4[234] = sv4[216] * sp[47];
        sv4[235] = sv4[217] * sp[47];
        sv4[236] = sv4[5] * sp[51];
        sv4[237] = sv4[6] * sp[51];
        sv4[238] = sv4[7] * sp[51];
        sv4[239] = sv4[8] * sp[51];
        sv4[240] = sv4[9] * sp[51];
        sv4[241] = sv4[10] * sp[51];
        sv4[242] = sv4[215] * sp[51];
        sv4[243] = sv4[216] * sp[51];
        sv4[244] = sv4[217] * sp[51];
        sv4[245] = sv4[140] + sv4[185];
        sv4[246] = sv4[141] + sv4[186];
        sv4[247] = sv4[142] + sv4[187];
        sv4[248] = sv4[188] + sv4[23];
        sv4[249] = sv4[189] + sv4[24];
        sv4[250] = sv4[190] + sv4[25];
        sv4[251] = sv4[146] + sv4[191];
        sv4[252] = sv4[147] + sv4[192];
        sv4[253] = sv4[148] + sv4[193];
        sv4[254] = sv4[194] + sv4[32];
        sv4[255] = sv4[195] + sv4[33];
        sv4[256] = sv4[196] + sv4[34];
        sv4[257] = sv4[152] + sv4[197];
        sv4[258] = sv4[153] + sv4[198];
        sv4[259] = sv4[154] + sv4[199];
        sv4[260] = sv4[200] + sv4[41];
        sv4[261] = sv4[201] + sv4[42];
        sv4[262] = sv4[202] + sv4[43];
        sv4[263] = sv4[218] + sv4[71];
        sv4[264] = sv4[227] + sv4[74];
        sv4[265] = sv4[236] + sv4[77];
        sv4[266] = sv4[219] + sv4[72];
        sv4[267] = sv4[228] + sv4[75];
        sv4[268] = sv4[237] + sv4[78];
        sv4[269] = sv4[220] + sv4[73];
        sv4[270] = sv4[229] + sv4[76];
        sv4[271] = sv4[238] + sv4[79];
        sv4[272] = sv4[167] + sv4[185];
        sv4[273] = sv4[168] + sv4[191];
        sv4[274] = sv4[169] + sv4[197];
        sv4[275] = sv4[131] + sv4[221];
        sv4[276] = sv4[134] + sv4[230];
        sv4[277] = sv4[239] + sv4[137];
        sv4[278] = sv4[170] + sv4[186];
        sv4[279] = sv4[171] + sv4[192];
        sv4[280] = sv4[172] + sv4[198];
        sv4[281] = sv4[132] + sv4[222];
        sv4[282] = sv4[135] + sv4[231];
        sv4[283] = sv4[240] + sv4[138];
        sv4[284] = sv4[173] + sv4[187];
        sv4[285] = sv4[174] + sv4[193];
        sv4[286] = sv4[175] + sv4[199];
        sv4[287] = sv4[133] + sv4[223];
        sv4[288] = sv4[136] + sv4[232];
        sv4[289] = sv4[241] + sv4[139];
        sv4[290] = sv4[92] + sv4[203];
        sv4[291] = sv4[101] + sv4[206];
        sv4[292] = sv4[209] + sv4[110];
        sv4[293] = sv4[176] + sv4[224];
        sv4[294] = sv4[177] + sv4[233];
        sv4[295] = sv4[178] + sv4[242];
        sv4[296] = sv4[93] + sv4[204];
        sv4[297] = sv4[102] + sv4[207];
        sv4[298] = sv4[210] + sv4[111];
        sv4[299] = sv4[179] + sv4[225];
        sv4[300] = sv4[180] + sv4[234];
        sv4[301] = sv4[181] + sv4[243];
        sv4[302] = sv4[94] + sv4[205];
        sv4[303] = sv4[103] + sv4[208];
        sv4[304] = sv4[211] + sv4[112];
        sv4[305] = sv4[182] + sv4[226];
        sv4[306] = sv4[183] + sv4[235];
        sv4[307] = sv4[184] + sv4[244];
        sv4[308] = sv4[245] * sp[62];
        sv4[309] = sv4[246] * sp[62];
        sv4[310] = sv4[247] * sp[62];
        sv4[311] = sv4[143] * sp[62];
        sv4[312] = sv4[144] * sp[62];
        sv4[313] = sv4[145] * sp[62];
        sv4[314] = sv4[248] * sp[62];
        sv4[315] = sv4[249] * sp[62];
        sv4[316] = sv4[250] * sp[62];
        sv4[317] = sv4[251] * sp[62];
        sv4[318] = sv4[252] * sp[62];
        sv4[319] = sv4[253] * sp[62];
        sv4[320] = sv4[149] * sp[62];
        sv4[321] = sv4[150] * sp[62];
        sv4[322] = sv4[151] * sp[62];
        sv4[323] = sv4[254] * sp[62];
        sv4[324] = sv4[255] * sp[62];
        sv4[325] = sv4[256] * sp[62];
        sv4[326] = sv4[257] * sp[62];
        sv4[327] = sv4[258] * sp[62];
        sv4[328] = sv4[259] * sp[62];
        sv4[329] = sv4[155] * sp[62];
        sv4[330] = sv4[156] * sp[62];
        sv4[331] = sv4[157] * sp[62];
        sv4[332] = sv4[260] * sp[62];
        sv4[333] = sv4[261] * sp[62];
        sv4[334] = sv4[262] * sp[62];
        sv4[335] = sv4[158] * sp[62];
        sv4[336] = sv4[159] * sp[62];
        sv4[337] = sv4[160] * sp[62];
        sv4[338] = sv4[263] * sp[62];
        sv4[339] = sv4[264] * sp[62];
        sv4[340] = sv4[265] * sp[62];
        sv4[341] = sv4[161] * sp[62];
        sv4[342] = sv4[162] * sp[62];
        sv4[343] = sv4[163] * sp[62];
        sv4[344] = sv4[266] * sp[62];
        sv4[345] = sv4[267] * sp[62];
        sv4[346] = sv4[268] * sp[62];
        sv4[347] = sv4[164] * sp[62];
        sv4[348] = sv4[165] * sp[62];
        sv4[349] = sv4[166] * sp[62];
        sv4[350] = sv4[269] * sp[62];
        sv4[351] = sv4[270] * sp[62];
        sv4[352] = sv4[271] * sp[62];
        sv4[353] = sv4[272] * sp[62];
        sv4[354] = sv4[273] * sp[62];
        sv4[355] = sv4[274] * sp[62];
        sv4[356] = sv4[275] * sp[62];
        sv4[357] = sv4[276] * sp[62];
        sv4[358] = sv4[277] * sp[62];
        sv4[359] = sv4[278] * sp[62];
        sv4[360] = sv4[279] * sp[62];
        sv4[361] = sv4[280] * sp[62];
        sv4[362] = sv4[281] * sp[62];
        sv4[363] = sv4[282] * sp[62];
        sv4[364] = sv4[283] * sp[62];
        sv4[365] = sv4[284] * sp[62];
        sv4[366] = sv4[285] * sp[62];
        sv4[367] = sv4[286] * sp[62];
        sv4[368] = sv4[287] * sp[62];
        sv4[369] = sv4[288] * sp[62];
        sv4[370] = sv4[289] * sp[62];
        sv4[371] = sv4[290] * sp[62];
        sv4[372] = sv4[291] * sp[62];
        sv4[373] = sv4[292] * sp[62];
        sv4[374] = sv4[293] * sp[62];
        sv4[375] = sv4[294] * sp[62];
        sv4[376] = sv4[295] * sp[62];
        sv4[377] = sv4[296] * sp[62];
        sv4[378] = sv4[297] * sp[62];
        sv4[379] = sv4[298] * sp[62];
        sv4[380] = sv4[299] * sp[62];
        sv4[381] = sv4[300] * sp[62];
        sv4[382] = sv4[301] * sp[62];
        sv4[383] = sv4[302] * sp[62];
        sv4[384] = sv4[303] * sp[62];
        sv4[385] = sv4[304] * sp[62];
        sv4[386] = sv4[305] * sp[62];
        sv4[387] = sv4[306] * sp[62];
        sv4[388] = sv4[307] * sp[62];
        const double fw0 = sv4[308] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP0[j] += fw0 * FE25_C0_D001_Q4[0][0][j];
        const double fw1 = sv4[309] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP1[j] += fw1 * FE25_C0_D001_Q4[0][0][j];
        const double fw2 = sv4[310] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP2[j] += fw2 * FE25_C0_D001_Q4[0][0][j];
        const double fw3 = sv4[311] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP3[j] += fw3 * FE25_C0_D001_Q4[0][0][j];
        const double fw4 = sv4[312] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP4[j] += fw4 * FE25_C0_D001_Q4[0][0][j];
        const double fw5 = sv4[313] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP5[j] += fw5 * FE25_C0_D001_Q4[0][0][j];
        const double fw6 = sv4[314] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP6[j] += fw6 * FE25_C0_D001_Q4[0][0][j];
        const double fw7 = sv4[315] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP7[j] += fw7 * FE25_C0_D001_Q4[0][0][j];
        const double fw8 = sv4[316] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP8[j] += fw8 * FE25_C0_D001_Q4[0][0][j];
        const double fw9 = sv4[317] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP9[j] += fw9 * FE25_C0_D001_Q4[0][0][j];
        const double fw10 = sv4[318] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP10[j] += fw10 * FE25_C0_D001_Q4[0][0][j];
        const double fw11 = sv4[319] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP11[j] += fw11 * FE25_C0_D001_Q4[0][0][j];
        const double fw12 = sv4[320] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP12[j] += fw12 * FE25_C0_D001_Q4[0][0][j];
        const double fw13 = sv4[321] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP13[j] += fw13 * FE25_C0_D001_Q4[0][0][j];
        const double fw14 = sv4[322] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP14[j] += fw14 * FE25_C0_D001_Q4[0][0][j];
        const double fw15 = sv4[323] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP15[j] += fw15 * FE25_C0_D001_Q4[0][0][j];
        const double fw16 = sv4[324] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP16[j] += fw16 * FE25_C0_D001_Q4[0][0][j];
        const double fw17 = sv4[325] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP17[j] += fw17 * FE25_C0_D001_Q4[0][0][j];
        const double fw18 = sv4[326] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP18[j] += fw18 * FE25_C0_D001_Q4[0][0][j];
        const double fw19 = sv4[327] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP19[j] += fw19 * FE25_C0_D001_Q4[0][0][j];
        const double fw20 = sv4[328] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP20[j] += fw20 * FE25_C0_D001_Q4[0][0][j];
        const double fw21 = sv4[329] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP21[j] += fw21 * FE25_C0_D001_Q4[0][0][j];
        const double fw22 = sv4[330] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP22[j] += fw22 * FE25_C0_D001_Q4[0][0][j];
        const double fw23 = sv4[331] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP23[j] += fw23 * FE25_C0_D001_Q4[0][0][j];
        const double fw24 = sv4[332] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP24[j] += fw24 * FE25_C0_D001_Q4[0][0][j];
        const double fw25 = sv4[333] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP25[j] += fw25 * FE25_C0_D001_Q4[0][0][j];
        const double fw26 = sv4[334] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP26[j] += fw26 * FE25_C0_D001_Q4[0][0][j];
        const double fw27 = sv4[335] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP27[j] += fw27 * FE25_C0_D001_Q4[0][0][j];
        const double fw28 = sv4[341] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP28[j] += fw28 * FE25_C0_D001_Q4[0][0][j];
        const double fw29 = sv4[347] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP29[j] += fw29 * FE25_C0_D001_Q4[0][0][j];
        const double fw30 = sv4[353] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP30[j] += fw30 * FE25_C0_D001_Q4[0][0][j];
        const double fw31 = sv4[359] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP31[j] += fw31 * FE25_C0_D001_Q4[0][0][j];
        const double fw32 = sv4[365] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP32[j] += fw32 * FE25_C0_D001_Q4[0][0][j];
        const double fw33 = sv4[371] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP33[j] += fw33 * FE25_C0_D001_Q4[0][0][j];
        const double fw34 = sv4[377] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP34[j] += fw34 * FE25_C0_D001_Q4[0][0][j];
        const double fw35 = sv4[383] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP35[j] += fw35 * FE25_C0_D001_Q4[0][0][j];
        const double fw36 = sv4[336] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP36[j] += fw36 * FE25_C0_D001_Q4[0][0][j];
        const double fw37 = sv4[342] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP37[j] += fw37 * FE25_C0_D001_Q4[0][0][j];
        const double fw38 = sv4[348] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP38[j] += fw38 * FE25_C0_D001_Q4[0][0][j];
        const double fw39 = sv4[354] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP39[j] += fw39 * FE25_C0_D001_Q4[0][0][j];
        const double fw40 = sv4[360] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP40[j] += fw40 * FE25_C0_D001_Q4[0][0][j];
        const double fw41 = sv4[366] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP41[j] += fw41 * FE25_C0_D001_Q4[0][0][j];
        const double fw42 = sv4[372] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP42[j] += fw42 * FE25_C0_D001_Q4[0][0][j];
        const double fw43 = sv4[378] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP43[j] += fw43 * FE25_C0_D001_Q4[0][0][j];
        const double fw44 = sv4[384] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP44[j] += fw44 * FE25_C0_D001_Q4[0][0][j];
        const double fw45 = sv4[337] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP45[j] += fw45 * FE25_C0_D001_Q4[0][0][j];
        const double fw46 = sv4[343] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP46[j] += fw46 * FE25_C0_D001_Q4[0][0][j];
        const double fw47 = sv4[349] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP47[j] += fw47 * FE25_C0_D001_Q4[0][0][j];
        const double fw48 = sv4[355] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP48[j] += fw48 * FE25_C0_D001_Q4[0][0][j];
        const double fw49 = sv4[361] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP49[j] += fw49 * FE25_C0_D001_Q4[0][0][j];
        const double fw50 = sv4[367] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP50[j] += fw50 * FE25_C0_D001_Q4[0][0][j];
        const double fw51 = sv4[373] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP51[j] += fw51 * FE25_C0_D001_Q4[0][0][j];
        const double fw52 = sv4[379] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP52[j] += fw52 * FE25_C0_D001_Q4[0][0][j];
        const double fw53 = sv4[385] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP53[j] += fw53 * FE25_C0_D001_Q4[0][0][j];
        const double fw54 = sv4[338] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP54[j] += fw54 * FE25_C0_D001_Q4[0][0][j];
        const double fw55 = sv4[344] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP55[j] += fw55 * FE25_C0_D001_Q4[0][0][j];
        const double fw56 = sv4[350] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP56[j] += fw56 * FE25_C0_D001_Q4[0][0][j];
        const double fw57 = sv4[356] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP57[j] += fw57 * FE25_C0_D001_Q4[0][0][j];
        const double fw58 = sv4[362] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP58[j] += fw58 * FE25_C0_D001_Q4[0][0][j];
        const double fw59 = sv4[368] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP59[j] += fw59 * FE25_C0_D001_Q4[0][0][j];
        const double fw60 = sv4[374] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP60[j] += fw60 * FE25_C0_D001_Q4[0][0][j];
        const double fw61 = sv4[380] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP61[j] += fw61 * FE25_C0_D001_Q4[0][0][j];
        const double fw62 = sv4[386] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP62[j] += fw62 * FE25_C0_D001_Q4[0][0][j];
        const double fw63 = sv4[339] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP63[j] += fw63 * FE25_C0_D001_Q4[0][0][j];
        const double fw64 = sv4[345] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP64[j] += fw64 * FE25_C0_D001_Q4[0][0][j];
        const double fw65 = sv4[351] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP65[j] += fw65 * FE25_C0_D001_Q4[0][0][j];
        const double fw66 = sv4[357] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP66[j] += fw66 * FE25_C0_D001_Q4[0][0][j];
        const double fw67 = sv4[363] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP67[j] += fw67 * FE25_C0_D001_Q4[0][0][j];
        const double fw68 = sv4[369] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP68[j] += fw68 * FE25_C0_D001_Q4[0][0][j];
        const double fw69 = sv4[375] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP69[j] += fw69 * FE25_C0_D001_Q4[0][0][j];
        const double fw70 = sv4[381] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP70[j] += fw70 * FE25_C0_D001_Q4[0][0][j];
        const double fw71 = sv4[387] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP71[j] += fw71 * FE25_C0_D001_Q4[0][0][j];
        const double fw72 = sv4[340] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP72[j] += fw72 * FE25_C0_D001_Q4[0][0][j];
        const double fw73 = sv4[346] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP73[j] += fw73 * FE25_C0_D001_Q4[0][0][j];
        const double fw74 = sv4[352] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP74[j] += fw74 * FE25_C0_D001_Q4[0][0][j];
        const double fw75 = sv4[358] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP75[j] += fw75 * FE25_C0_D001_Q4[0][0][j];
        const double fw76 = sv4[364] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP76[j] += fw76 * FE25_C0_D001_Q4[0][0][j];
        const double fw77 = sv4[370] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP77[j] += fw77 * FE25_C0_D001_Q4[0][0][j];
        const double fw78 = sv4[376] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP78[j] += fw78 * FE25_C0_D001_Q4[0][0][j];
        const double fw79 = sv4[382] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP79[j] += fw79 * FE25_C0_D001_Q4[0][0][j];
        const double fw80 = sv4[388] * weights4[iq];
        for (int j = 0; j < 2; ++j)
            TP80[j] += fw80 * FE25_C0_D001_Q4[0][0][j];
    }
    A[0] = 0.01666666666666656 * sp[63];
    A[1] = 0.008333333333333293 * sp[63];
    A[2] = 0.008333333333333297 * sp[63];
    A[3] = 0.008333333333333297 * sp[63];
    std::fill(&A[4], &A[16], 0.0);
    A[16] = 0.008333333333333293 * sp[63];
    A[17] = 0.0166666666666667 * sp[63];
    A[18] = 0.008333333333333371 * sp[63];
    A[19] = 0.008333333333333371 * sp[63];
    std::fill(&A[20], &A[32], 0.0);
    A[32] = 0.008333333333333297 * sp[63];
    A[33] = 0.008333333333333371 * sp[63];
    A[34] = 0.01666666666666671 * sp[63];
    A[35] = 0.008333333333333373 * sp[63];
    std::fill(&A[36], &A[48], 0.0);
    A[48] = 0.008333333333333297 * sp[63];
    A[49] = 0.008333333333333371 * sp[63];
    A[50] = 0.008333333333333373 * sp[63];
    A[51] = 0.01666666666666671 * sp[63];
    std::fill(&A[52], &A[68], 0.0);
    A[68] = 0.01666666666666656 * sp[63];
    A[69] = 0.008333333333333293 * sp[63];
    A[70] = 0.008333333333333297 * sp[63];
    A[71] = 0.008333333333333297 * sp[63];
    std::fill(&A[72], &A[84], 0.0);
    A[84] = 0.008333333333333293 * sp[63];
    A[85] = 0.0166666666666667 * sp[63];
    A[86] = 0.008333333333333371 * sp[63];
    A[87] = 0.008333333333333371 * sp[63];
    std::fill(&A[88], &A[100], 0.0);
    A[100] = 0.008333333333333297 * sp[63];
    A[101] = 0.008333333333333371 * sp[63];
    A[102] = 0.01666666666666671 * sp[63];
    A[103] = 0.008333333333333373 * sp[63];
    std::fill(&A[104], &A[116], 0.0);
    A[116] = 0.008333333333333297 * sp[63];
    A[117] = 0.008333333333333371 * sp[63];
    A[118] = 0.008333333333333373 * sp[63];
    A[119] = 0.01666666666666671 * sp[63];
    std::fill(&A[120], &A[136], 0.0);
    A[136] = 0.01666666666666656 * sp[63];
    A[137] = 0.008333333333333293 * sp[63];
    A[138] = 0.008333333333333297 * sp[63];
    A[139] = 0.008333333333333297 * sp[63];
    std::fill(&A[140], &A[152], 0.0);
    A[152] = 0.008333333333333293 * sp[63];
    A[153] = 0.0166666666666667 * sp[63];
    A[154] = 0.008333333333333371 * sp[63];
    A[155] = 0.008333333333333371 * sp[63];
    std::fill(&A[156], &A[168], 0.0);
    A[168] = 0.008333333333333297 * sp[63];
    A[169] = 0.008333333333333371 * sp[63];
    A[170] = 0.01666666666666671 * sp[63];
    A[171] = 0.008333333333333373 * sp[63];
    std::fill(&A[172], &A[184], 0.0);
    A[184] = 0.008333333333333297 * sp[63];
    A[185] = 0.008333333333333371 * sp[63];
    A[186] = 0.008333333333333373 * sp[63];
    A[187] = 0.01666666666666671 * sp[63];
    std::fill(&A[188], &A[204], 0.0);
    A[204] = 0.01666666666666656 * (1e-12 * sp[62]);
    A[205] = 0.008333333333333293 * (1e-12 * sp[62]);
    A[206] = 0.008333333333333297 * (1e-12 * sp[62]);
    A[207] = 0.008333333333333297 * (1e-12 * sp[62]);
    std::fill(&A[208], &A[220], 0.0);
    A[220] = 0.008333333333333293 * (1e-12 * sp[62]);
    A[221] = 0.0166666666666667 * (1e-12 * sp[62]);
    A[222] = 0.008333333333333371 * (1e-12 * sp[62]);
    A[223] = 0.008333333333333371 * (1e-12 * sp[62]);
    std::fill(&A[224], &A[236], 0.0);
    A[236] = 0.008333333333333297 * (1e-12 * sp[62]);
    A[237] = 0.008333333333333371 * (1e-12 * sp[62]);
    A[238] = 0.01666666666666671 * (1e-12 * sp[62]);
    A[239] = 0.008333333333333373 * (1e-12 * sp[62]);
    std::fill(&A[240], &A[252], 0.0);
    A[252] = 0.008333333333333297 * (1e-12 * sp[62]);
    A[253] = 0.008333333333333371 * (1e-12 * sp[62]);
    A[254] = 0.008333333333333373 * (1e-12 * sp[62]);
    A[255] = 0.01666666666666671 * (1e-12 * sp[62]);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 4, 6 };
    static const int DM3[2] = { 4, 7 };
    static const int DM4[2] = { 8, 10 };
    static const int DM5[2] = { 8, 11 };
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + j] += FE25_C0_D001_Q4[0][0][i] * TP0[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM0[j]] += FE25_C0_D001_Q4[0][0][i] * TP1[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM1[j]] += FE25_C0_D001_Q4[0][0][i] * TP2[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + (j + 4)] += FE25_C0_D001_Q4[0][0][i] * TP3[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM2[j]] += FE25_C0_D001_Q4[0][0][i] * TP4[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM3[j]] += FE25_C0_D001_Q4[0][0][i] * TP5[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + (j + 8)] += FE25_C0_D001_Q4[0][0][i] * TP6[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM4[j]] += FE25_C0_D001_Q4[0][0][i] * TP7[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM5[j]] += FE25_C0_D001_Q4[0][0][i] * TP8[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + j] += FE25_C0_D001_Q4[0][0][i] * TP9[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM0[j]] += FE25_C0_D001_Q4[0][0][i] * TP10[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM1[j]] += FE25_C0_D001_Q4[0][0][i] * TP11[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + (j + 4)] += FE25_C0_D001_Q4[0][0][i] * TP12[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM2[j]] += FE25_C0_D001_Q4[0][0][i] * TP13[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM3[j]] += FE25_C0_D001_Q4[0][0][i] * TP14[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + (j + 8)] += FE25_C0_D001_Q4[0][0][i] * TP15[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM4[j]] += FE25_C0_D001_Q4[0][0][i] * TP16[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM5[j]] += FE25_C0_D001_Q4[0][0][i] * TP17[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + j] += FE25_C0_D001_Q4[0][0][i] * TP18[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM0[j]] += FE25_C0_D001_Q4[0][0][i] * TP19[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM1[j]] += FE25_C0_D001_Q4[0][0][i] * TP20[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + (j + 4)] += FE25_C0_D001_Q4[0][0][i] * TP21[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM2[j]] += FE25_C0_D001_Q4[0][0][i] * TP22[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM3[j]] += FE25_C0_D001_Q4[0][0][i] * TP23[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + (j + 8)] += FE25_C0_D001_Q4[0][0][i] * TP24[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM4[j]] += FE25_C0_D001_Q4[0][0][i] * TP25[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM5[j]] += FE25_C0_D001_Q4[0][0][i] * TP26[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + j] += FE25_C0_D001_Q4[0][0][i] * TP27[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM0[j]] += FE25_C0_D001_Q4[0][0][i] * TP28[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM1[j]] += FE25_C0_D001_Q4[0][0][i] * TP29[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + (j + 4)] += FE25_C0_D001_Q4[0][0][i] * TP30[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM2[j]] += FE25_C0_D001_Q4[0][0][i] * TP31[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM3[j]] += FE25_C0_D001_Q4[0][0][i] * TP32[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + (j + 8)] += FE25_C0_D001_Q4[0][0][i] * TP33[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM4[j]] += FE25_C0_D001_Q4[0][0][i] * TP34[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM5[j]] += FE25_C0_D001_Q4[0][0][i] * TP35[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + j] += FE25_C0_D001_Q4[0][0][i] * TP36[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM0[j]] += FE25_C0_D001_Q4[0][0][i] * TP37[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM1[j]] += FE25_C0_D001_Q4[0][0][i] * TP38[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + (j + 4)] += FE25_C0_D001_Q4[0][0][i] * TP39[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM2[j]] += FE25_C0_D001_Q4[0][0][i] * TP40[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM3[j]] += FE25_C0_D001_Q4[0][0][i] * TP41[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + (j + 8)] += FE25_C0_D001_Q4[0][0][i] * TP42[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM4[j]] += FE25_C0_D001_Q4[0][0][i] * TP43[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM5[j]] += FE25_C0_D001_Q4[0][0][i] * TP44[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + j] += FE25_C0_D001_Q4[0][0][i] * TP45[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM0[j]] += FE25_C0_D001_Q4[0][0][i] * TP46[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM1[j]] += FE25_C0_D001_Q4[0][0][i] * TP47[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + (j + 4)] += FE25_C0_D001_Q4[0][0][i] * TP48[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM2[j]] += FE25_C0_D001_Q4[0][0][i] * TP49[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM3[j]] += FE25_C0_D001_Q4[0][0][i] * TP50[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + (j + 8)] += FE25_C0_D001_Q4[0][0][i] * TP51[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM4[j]] += FE25_C0_D001_Q4[0][0][i] * TP52[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM5[j]] += FE25_C0_D001_Q4[0][0][i] * TP53[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + j] += FE25_C0_D001_Q4[0][0][i] * TP54[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM0[j]] += FE25_C0_D001_Q4[0][0][i] * TP55[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM1[j]] += FE25_C0_D001_Q4[0][0][i] * TP56[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + (j + 4)] += FE25_C0_D001_Q4[0][0][i] * TP57[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM2[j]] += FE25_C0_D001_Q4[0][0][i] * TP58[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM3[j]] += FE25_C0_D001_Q4[0][0][i] * TP59[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + (j + 8)] += FE25_C0_D001_Q4[0][0][i] * TP60[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM4[j]] += FE25_C0_D001_Q4[0][0][i] * TP61[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM5[j]] += FE25_C0_D001_Q4[0][0][i] * TP62[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + j] += FE25_C0_D001_Q4[0][0][i] * TP63[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM0[j]] += FE25_C0_D001_Q4[0][0][i] * TP64[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM1[j]] += FE25_C0_D001_Q4[0][0][i] * TP65[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + (j + 4)] += FE25_C0_D001_Q4[0][0][i] * TP66[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM2[j]] += FE25_C0_D001_Q4[0][0][i] * TP67[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM3[j]] += FE25_C0_D001_Q4[0][0][i] * TP68[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + (j + 8)] += FE25_C0_D001_Q4[0][0][i] * TP69[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM4[j]] += FE25_C0_D001_Q4[0][0][i] * TP70[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM5[j]] += FE25_C0_D001_Q4[0][0][i] * TP71[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + j] += FE25_C0_D001_Q4[0][0][i] * TP72[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM0[j]] += FE25_C0_D001_Q4[0][0][i] * TP73[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM1[j]] += FE25_C0_D001_Q4[0][0][i] * TP74[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + (j + 4)] += FE25_C0_D001_Q4[0][0][i] * TP75[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM2[j]] += FE25_C0_D001_Q4[0][0][i] * TP76[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM3[j]] += FE25_C0_D001_Q4[0][0][i] * TP77[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + (j + 8)] += FE25_C0_D001_Q4[0][0][i] * TP78[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM4[j]] += FE25_C0_D001_Q4[0][0][i] * TP79[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM5[j]] += FE25_C0_D001_Q4[0][0][i] * TP80[j];
  }

};


class linearelastic3dp1p1_form_0: public ufc::form
{
public:

  linearelastic3dp1p1_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "3860c59ae5cd7d2cdb3e70c9dcd88843c8c870bdf954664f170e6e1c0503a2e8bb6c42f8d3d40958601ff9a7b82f054db60abb0ce277b865648404e0a99ba3ac";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 7;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6});
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new linearelastic3dp1p1_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new linearelastic3dp1p1_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return nullptr;
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new linearelastic3dp1p1_finite_element_2();
        break;
      }
    case 1:
      {
        return new linearelastic3dp1p1_finite_element_2();
        break;
      }
    case 2:
      {
        return new linearelastic3dp1p1_finite_element_1();
        break;
      }
    case 3:
      {
        return new linearelastic3dp1p1_finite_element_1();
        break;
      }
    case 4:
      {
        return new linearelastic3dp1p1_finite_element_3();
        break;
      }
    case 5:
      {
        return new linearelastic3dp1p1_finite_element_3();
        break;
      }
    case 6:
      {
        return new linearelastic3dp1p1_finite_element_4();
        break;
      }
    case 7:
      {
        return new linearelastic3dp1p1_finite_element_3();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new linearelastic3dp1p1_dofmap_2();
        break;
      }
    case 1:
      {
        return new linearelastic3dp1p1_dofmap_2();
        break;
      }
    case 2:
      {
        return new linearelastic3dp1p1_dofmap_1();
        break;
      }
    case 3:
      {
        return new linearelastic3dp1p1_dofmap_1();
        break;
      }
    case 4:
      {
        return new linearelastic3dp1p1_dofmap_3();
        break;
      }
    case 5:
      {
        return new linearelastic3dp1p1_dofmap_3();
        break;
      }
    case 6:
      {
        return new linearelastic3dp1p1_dofmap_4();
        break;
      }
    case 7:
      {
        return new linearelastic3dp1p1_dofmap_3();
        break;
      }
    }
    
    return 0;
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 3;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 1:
      {
        return new linearelastic3dp1p1_cell_integral_0_1();
        break;
      }
    case 2:
      {
        return new linearelastic3dp1p1_cell_integral_0_2();
        break;
      }
    }
    
    return 0;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return 0;
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return 0;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return 0;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return 0;
  }

};


class linearelastic3dp1p1_form_1: public ufc::form
{
public:

  linearelastic3dp1p1_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~linearelastic3dp1p1_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "e78a9583e9a4081cd0b8aa611078aa4440278d1b80a580eca854247c3c99da5906c14947350dd5984ecce59903dd4bb57e6a01a1aafce834e0a1ca81ebdd2f8d";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 4;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    static const std::vector<std::size_t> position({3, 4, 5, 6});
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new linearelastic3dp1p1_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new linearelastic3dp1p1_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return nullptr;
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new linearelastic3dp1p1_finite_element_2();
        break;
      }
    case 1:
      {
        return new linearelastic3dp1p1_finite_element_2();
        break;
      }
    case 2:
      {
        return new linearelastic3dp1p1_finite_element_3();
        break;
      }
    case 3:
      {
        return new linearelastic3dp1p1_finite_element_3();
        break;
      }
    case 4:
      {
        return new linearelastic3dp1p1_finite_element_4();
        break;
      }
    case 5:
      {
        return new linearelastic3dp1p1_finite_element_3();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new linearelastic3dp1p1_dofmap_2();
        break;
      }
    case 1:
      {
        return new linearelastic3dp1p1_dofmap_2();
        break;
      }
    case 2:
      {
        return new linearelastic3dp1p1_dofmap_3();
        break;
      }
    case 3:
      {
        return new linearelastic3dp1p1_dofmap_3();
        break;
      }
    case 4:
      {
        return new linearelastic3dp1p1_dofmap_4();
        break;
      }
    case 5:
      {
        return new linearelastic3dp1p1_dofmap_3();
        break;
      }
    }
    
    return 0;
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 3;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 1:
      {
        return new linearelastic3dp1p1_cell_integral_1_1();
        break;
      }
    case 2:
      {
        return new linearelastic3dp1p1_cell_integral_1_2();
        break;
      }
    }
    
    return 0;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return 0;
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return 0;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return 0;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return 0;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace LinearElastic3DP1P1
{

class CoefficientSpace_dt: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_dt(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_dt(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_mu_s: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_mu_s(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_mu_s(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_nu_s: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_nu_s(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_nu_s(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_rho_s: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_rho_s(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_rho_s(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_v0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_v0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_v0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_v_p: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_v_p(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_v_p(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_F_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_F_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_v_p Form_F_FunctionSpace_1;

typedef CoefficientSpace_v0 Form_F_FunctionSpace_2;

typedef CoefficientSpace_u0 Form_F_FunctionSpace_3;

typedef CoefficientSpace_dt Form_F_FunctionSpace_4;

typedef CoefficientSpace_rho_s Form_F_FunctionSpace_5;

typedef CoefficientSpace_mu_s Form_F_FunctionSpace_6;

typedef CoefficientSpace_nu_s Form_F_FunctionSpace_7;

class Form_F: public dolfin::Form
{
public:

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 7), v_p(*this, 0), v0(*this, 1), u0(*this, 2), dt(*this, 3), rho_s(*this, 4), mu_s(*this, 5), nu_s(*this, 6)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const linearelastic3dp1p1_form_0>();
  }

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> v_p, std::shared_ptr<const dolfin::GenericFunction> v0, std::shared_ptr<const dolfin::GenericFunction> u0, std::shared_ptr<const dolfin::GenericFunction> dt, std::shared_ptr<const dolfin::GenericFunction> rho_s, std::shared_ptr<const dolfin::GenericFunction> mu_s, std::shared_ptr<const dolfin::GenericFunction> nu_s):
    dolfin::Form(1, 7), v_p(*this, 0), v0(*this, 1), u0(*this, 2), dt(*this, 3), rho_s(*this, 4), mu_s(*this, 5), nu_s(*this, 6)
  {
    _function_spaces[0] = V0;

    this->v_p = v_p;
    this->v0 = v0;
    this->u0 = u0;
    this->dt = dt;
    this->rho_s = rho_s;
    this->mu_s = mu_s;
    this->nu_s = nu_s;

    _ufc_form = std::make_shared<const linearelastic3dp1p1_form_0>();
  }

  // Destructor
  ~Form_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "v_p")
      return 0;
    else if (name == "v0")
      return 1;
    else if (name == "u0")
      return 2;
    else if (name == "dt")
      return 3;
    else if (name == "rho_s")
      return 4;
    else if (name == "mu_s")
      return 5;
    else if (name == "nu_s")
      return 6;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "v_p";
    case 1:
      return "v0";
    case 2:
      return "u0";
    case 3:
      return "dt";
    case 4:
      return "rho_s";
    case 5:
      return "mu_s";
    case 6:
      return "nu_s";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_v_p;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_v0;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_u0;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_dt;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_rho_s;
  typedef Form_F_FunctionSpace_6 CoefficientSpace_mu_s;
  typedef Form_F_FunctionSpace_7 CoefficientSpace_nu_s;

  // Coefficients
  dolfin::CoefficientAssigner v_p;
  dolfin::CoefficientAssigner v0;
  dolfin::CoefficientAssigner u0;
  dolfin::CoefficientAssigner dt;
  dolfin::CoefficientAssigner rho_s;
  dolfin::CoefficientAssigner mu_s;
  dolfin::CoefficientAssigner nu_s;
};

class MultiMeshForm_F: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), v_p(*this, 0), v0(*this, 1), u0(*this, 2), dt(*this, 3), rho_s(*this, 4), mu_s(*this, 5), nu_s(*this, 6)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> v_p, std::shared_ptr<const dolfin::GenericFunction> v0, std::shared_ptr<const dolfin::GenericFunction> u0, std::shared_ptr<const dolfin::GenericFunction> dt, std::shared_ptr<const dolfin::GenericFunction> rho_s, std::shared_ptr<const dolfin::GenericFunction> mu_s, std::shared_ptr<const dolfin::GenericFunction> nu_s):
    dolfin::MultiMeshForm(V0), v_p(*this, 0), v0(*this, 1), u0(*this, 2), dt(*this, 3), rho_s(*this, 4), mu_s(*this, 5), nu_s(*this, 6)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->v_p = v_p;
    this->v0 = v0;
    this->u0 = u0;
    this->dt = dt;
    this->rho_s = rho_s;
    this->mu_s = mu_s;
    this->nu_s = nu_s;

  }

  // Destructor
  ~MultiMeshForm_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "v_p")
      return 0;
    else if (name == "v0")
      return 1;
    else if (name == "u0")
      return 2;
    else if (name == "dt")
      return 3;
    else if (name == "rho_s")
      return 4;
    else if (name == "mu_s")
      return 5;
    else if (name == "nu_s")
      return 6;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "v_p";
    case 1:
      return "v0";
    case 2:
      return "u0";
    case 3:
      return "dt";
    case 4:
      return "rho_s";
    case 5:
      return "mu_s";
    case 6:
      return "nu_s";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_v_p;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_v0;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_u0;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_dt;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_rho_s;
  typedef Form_F_FunctionSpace_6 CoefficientSpace_mu_s;
  typedef Form_F_FunctionSpace_7 CoefficientSpace_nu_s;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner v_p;
  dolfin::MultiMeshCoefficientAssigner v0;
  dolfin::MultiMeshCoefficientAssigner u0;
  dolfin::MultiMeshCoefficientAssigner dt;
  dolfin::MultiMeshCoefficientAssigner rho_s;
  dolfin::MultiMeshCoefficientAssigner mu_s;
  dolfin::MultiMeshCoefficientAssigner nu_s;
};

class Form_J_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<linearelastic3dp1p1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<linearelastic3dp1p1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_J_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_dt Form_J_FunctionSpace_2;

typedef CoefficientSpace_rho_s Form_J_FunctionSpace_3;

typedef CoefficientSpace_mu_s Form_J_FunctionSpace_4;

typedef CoefficientSpace_nu_s Form_J_FunctionSpace_5;

class Form_J: public dolfin::Form
{
public:

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 4), dt(*this, 0), rho_s(*this, 1), mu_s(*this, 2), nu_s(*this, 3)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const linearelastic3dp1p1_form_1>();
  }

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> dt, std::shared_ptr<const dolfin::GenericFunction> rho_s, std::shared_ptr<const dolfin::GenericFunction> mu_s, std::shared_ptr<const dolfin::GenericFunction> nu_s):
    dolfin::Form(2, 4), dt(*this, 0), rho_s(*this, 1), mu_s(*this, 2), nu_s(*this, 3)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->dt = dt;
    this->rho_s = rho_s;
    this->mu_s = mu_s;
    this->nu_s = nu_s;

    _ufc_form = std::make_shared<const linearelastic3dp1p1_form_1>();
  }

  // Destructor
  ~Form_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "dt")
      return 0;
    else if (name == "rho_s")
      return 1;
    else if (name == "mu_s")
      return 2;
    else if (name == "nu_s")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "dt";
    case 1:
      return "rho_s";
    case 2:
      return "mu_s";
    case 3:
      return "nu_s";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_dt;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_rho_s;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_mu_s;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_nu_s;

  // Coefficients
  dolfin::CoefficientAssigner dt;
  dolfin::CoefficientAssigner rho_s;
  dolfin::CoefficientAssigner mu_s;
  dolfin::CoefficientAssigner nu_s;
};

class MultiMeshForm_J: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), dt(*this, 0), rho_s(*this, 1), mu_s(*this, 2), nu_s(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> dt, std::shared_ptr<const dolfin::GenericFunction> rho_s, std::shared_ptr<const dolfin::GenericFunction> mu_s, std::shared_ptr<const dolfin::GenericFunction> nu_s):
    dolfin::MultiMeshForm(V1, V0), dt(*this, 0), rho_s(*this, 1), mu_s(*this, 2), nu_s(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->dt = dt;
    this->rho_s = rho_s;
    this->mu_s = mu_s;
    this->nu_s = nu_s;

  }

  // Destructor
  ~MultiMeshForm_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "dt")
      return 0;
    else if (name == "rho_s")
      return 1;
    else if (name == "mu_s")
      return 2;
    else if (name == "nu_s")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "dt";
    case 1:
      return "rho_s";
    case 2:
      return "mu_s";
    case 3:
      return "nu_s";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_dt;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_rho_s;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_mu_s;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_nu_s;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner dt;
  dolfin::MultiMeshCoefficientAssigner rho_s;
  dolfin::MultiMeshCoefficientAssigner mu_s;
  dolfin::MultiMeshCoefficientAssigner nu_s;
};

// Class typedefs
typedef Form_J BilinearForm;
typedef MultiMeshForm_J MultiMeshBilinearForm;
typedef Form_J JacobianForm;
typedef MultiMeshForm_J MultiMeshJacobianForm;
typedef Form_F LinearForm;
typedef MultiMeshForm_F MultiMeshLinearForm;
typedef Form_F ResidualForm;
typedef MultiMeshForm_F MultiMeshResidualForm;
typedef Form_F::TestSpace FunctionSpace;
typedef Form_F::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
